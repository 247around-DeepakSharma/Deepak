<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

//error_reporting(E_ERROR);
//ini_set('display_errors', '0');

class engineerApi extends CI_Controller {

    private $token;
    private $header;
    private $requestId;
    private $deviceId;
    private $requestUrl;
    private $jsonRequestData;
    private $jsonResponseString;
    private $debug;
    private $tokenArray;
    private $statusCode;
    private $app_price_mapping_id = 247001;

    function __Construct() {
        parent::__Construct();

        $this->load->model('apis');
        $this->load->model('diagnostics');
        $this->load->model('discount');
        $this->load->model('booking_model');
        $this->load->model('partner_model');
        $this->load->model('vendor_model');
        $this->load->model('user_model');
        $this->load->model('partner_model');
        $this->load->model('engineer_model');
        $this->load->model("dealer_model");
        $this->load->library('notify');
        $this->load->library("miscelleneous");
        $this->load->library('booking_utilities');
        $this->load->library('s3');
        $this->load->library('email');
        $this->load->helper(array('form', 'url'));
        $this->load->library('asynchronous_lib');
        $this->load->library('paytm_payment_lib');
        $this->load->library('validate_serial_no');
        $this->load->library('warranty_utilities');
        $this->load->library('booking_creation_lib');
    }

    /**
     * @input: void
     * @description: accepts post request only and basic validations
     * @output: void
     */
    public function index() {  
        log_message('info', "Entering: " . __METHOD__. json_encode($_POST, true));
        // echo json_encode($_POST, true); exit();
        
        ob_end_clean();
        //$input_d = file_get_contents('php://input');
        //$_POST = json_decode($input_d, true);
        
        //$str = '{"request":"{\"requestId\":\"392be1e8-03e4-447f-9d7f-47365480ab05\",\"requestUrl\":\"completeBookingByEngineer\",\"deviceId\":\"ODYwMjUyMDQwMDc0NTE2LTk3NzEwMjJlZjljYzc4YjItMDI6MDA6MDA6MDA6MDA6MDAtMDI6MDA6MDA6MDA6MDA6MDA\\u003d\",\"token\":\"eyJhbGciOiJzaGEyNTYiLCJ0eXAiOiJKV1QifQ\\u003d\\u003d..NDg4ZTczYjk0ZGQzMWVlYzBjZWMyMTY2OGUyM2M1NTBlYTNkYzJiYWYxZDE4NjJiNmMyZjc3MDZmZTA4NWE3Zg\\u003d\\u003d\"}"}';
        
        //$_POST = json_decode($str, true);
            
        //print_r($_POST); exit();
        $this->debug = true;
        $this->jsonResponseString = null;
        $this->user = "";

        if ($_POST && array_key_exists("request", $_POST)) {

            $jsonRequestData = $_POST['request'];

            $requestData = json_decode($jsonRequestData, true);
            
            $this->token = $requestData['token'];

            //username is user email address, not her name
            if (array_key_exists("username", $requestData)) {
                $this->user = $requestData['username'];
            }

            $this->requestId = $requestData['requestId'];
            $this->deviceId = $requestData['deviceId'];
            $this->requestUrl = $requestData['requestUrl'];

            if ($this->requestUrl == "saveHandyMan") {
                header('Content-Type: bitmap; charset=utf-8');
            }

            $this->tokenArray = explode('.', $this->token);
            $header = $this->tokenArray[0];
            $jsonData = $this->tokenArray[1];
            $signature = $this->tokenArray[2];
            $type = 'post';

            $details = array(
                'header' => base64_decode($this->tokenArray[0]),
                'request' => base64_decode($this->tokenArray[1]),
                'signature' => base64_decode($this->tokenArray[2]),
                'request_id' => $this->requestId,
                'device_id' => $this->deviceId,
                'email_id' => $this->user,
                'browser_information' => $_SERVER['HTTP_USER_AGENT'],
                'ip_address' => $_SERVER["REMOTE_ADDR"],
                'type' => $type);
            $this->apis->saveRequestData($details);

            $activity = array('activity' => 'data input', 'data' => json_encode($details), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            $this->validateRequest();
        } else {
            log_message('info', "request key NOT exists");
            $this->sendJsonResponse(array('0001', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: accepts get request only and basic validations
     * @output: void
     */
    public function jsonPost() {
        log_message('info', "Entering: " . __METHOD__);

        $this->debug = true;
        $this->jsonResponseString = null;
        $this->user = "";
        $this->user = $this->input->get('username');
        $this->token = $this->input->get('jwt');
        $this->deviceId = $this->input->get('deviceId');
        $this->requestId = $this->input->get('requestId');
        $this->requestUrl = $this->input->get('requestUrl');

       // $authToken = $this->apis->getAuthToken($this->user);

        if (!empty($this->token)) {

            $this->tokenArray = explode('.', $this->token);
            //$header = $this->tokenArray[0];
            //$jsonData = $this->tokenArray[1];
            //$signature = $this->tokenArray[2];
            $type = 'post';

            $details = array(
                'header' => base64_decode($this->tokenArray[0]),
                'request' => base64_decode($this->tokenArray[1]),
                'signature' => base64_decode($this->tokenArray[2]),
                'request_id' => $this->requestId,
                'device_id' => $this->deviceId,
                'email_id' => $this->user,
                'browser_information' => $_SERVER['HTTP_USER_AGENT'],
                'ip_address' => $_SERVER["REMOTE_ADDR"],
                'type' => $type);
            $this->apis->saveRequestData($details);

            $activity = array('activity' => 'data input', 'data' => json_encode($details), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            $this->validateRequest();
        } else {
            log_message('info', "request key NOT exists in jsonPost");
            $this->sendJsonResponse(array('0001', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: validate each request
     * @output: void
     */
    function validateRequest() {
        if ($this->checkSignature() == true and $this->checkAppKeyAndTimeout() == true) {
            $this->processRequest();
        }
    }

    /**
     * @input: void
     * @description: check api key and timeout
     * @output: void
     */
    function checkAppKeyAndTimeout() {
        $activity = array('activity' => 'checking appkey and timeout', 'data' => json_encode($this->jsonRequestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $appKey = $this->jsonRequestData['iss'];
        $expTime = $this->jsonRequestData['exp'];
        $curTime = time();
        return true;
        if ($appKey == 'boloaaka-mobile-application' and $curTime <= $expTime) {
            return true;
        } else {
            $this->sendJsonResponse(array('0004', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: check signature and vaidate signarure
     * @output: void
     */
    function checkSignature() {
        $activity = array('activity' => 'checking signarure', 'data' => json_encode($this->tokenArray), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);
        if (count($this->tokenArray) == 3) {
            $header = $this->tokenArray[0];
            $claims = $this->tokenArray[1];
            $signature = $this->tokenArray[2];
            $secret = $this->doCalculateHmacSignature("username", "boloaaka-signup-request");
            $this->jsonRequestData = base64_decode($claims);
            $this->jsonRequestData = json_decode($this->jsonRequestData, true);
            //print_r($this->jsonRequestData);
            return $this->verifySignature($header, $claims, $signature, $secret);
        } else {
            $this->sendJsonResponse(array('0002', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: verify signarure
     * @output: print response
     */
    public function verifySignature($header, $claims, $signature, $secret) {

        $headerArray = json_decode(base64_decode($header), true);

        if ($headerArray['typ'] === 'JWT') {

            $algo = $headerArray['alg'];
            $string = $header . "." . $claims;

            $sig = base64_encode(hash_hmac($algo, $string, $secret));

            if ($sig === $signature) {
                return true;
            } else {
                //$this->statusCode = '0002';
                $this->sendJsonResponse(array('0002', 'failure'));
            }
        } else {
            //$this->statusCode = '0003';
            $this->sendJsonResponse(array('0003', 'failure'));
        }
    }

    /**
     * @input: JSON String and App secret
     * @description: Create signature from JSON String and App secret
     * @output: Signature
     */
    function doCalculateHmacSignature($message, $secretKey) {
        $hmac = hash_hmac("sha256", $message, $secretKey);

        $hmacBase64 = base64_encode($hmac);

        return $hmacBase64;
    }

    /**
     * @input: void
     * @description: acts as a router to process different request
     * @output: void
     */
    function processRequest() {
        log_message('info', "Entering: " . __METHOD__ . ", Request type UPDATED: " . $this->requestUrl);
        
        switch ($this->requestUrl) {
            /*
            case 'getCancellationReasons':
                $this->processGetCancellationReasons();
                break;

            case 'cancelBooking':
                $this->processCancelBooking();
                break;
            
            case 'rescheduleBooking':
                $this->processRescheduleBooking();
                break;
            */
            case 'engineerLogin':
                $this->processEngineerLogin();
                break;
          
            case 'completeBookingByEngineer':
                $this->processCompleteBookingByEngineer();
                break;
                
            case 'getCancellationReason':
                $this->getCancellationReason();
                break;
                
            case 'cancelBookingByEngineer':
                $this->processCancelBookingByEngineer();
                break;
            
            case 'engineerHomeScreen':
                $this->getEngineerHomeScreen();
                break;
            
            case 'missedBookings':
                $this->getMissedBookings();
                break;
            
            case 'tommorowBookings':
                $this->getTommorowBookings();
                break;
            
            case 'techSupport':
                $this->getTechSupport();
                break;
            
            case 'engineerBookingsByStatus':
                $this->getEngineerBookingsByStatus();
                break;
            
            case 'engineerHeplingDocuments':
                $this->getEngineerHeplingDocuments();
                break;
            
            case 'engineerProfile':
                $this->getEngineerProfile();
                break;
            
            case 'engineerSparePartOrder':
                $this->getEngineerSparePartOrder();
                break;
            
            case 'partTypeOnModelNumber':
                $this->getPartTypeOnModelNumber();
                break;
            
            case 'sparePartName':
                $this->getSparePartName();
                break;
            
            case 'submitSparePartsOrder':
                $this->processSubmitSparePartsOrder();
                break;
            
            case 'bookingProductDetails':
                $this->getBookingProductDetails();
                break;
            
            case 'symptomCompleteBooking':
                $this->getSymptomCompleteBooking();
                break;
            
            case 'defectCompleteBooking':
                $this->getDefectCompleteBooking();
                break;
            
            case 'solutionCompleteBooking':
                $this->getSolutionCompleteBooking();
                break;
            
            case 'updateBookingReasons':
                $this->getUpdateBookingReasons();
                break;
            
            case 'updateBookingByEngineer':
                $this->processUpdateBookingByEngineer();
                break;
            
            case 'paytmAmountByEngineer':
                $this->getPaytmAmountByEngineer();
                break;
            
            case 'getCustomerQrCode':
                $this->getCustomerQrCode();
                break;
            
            case 'validateSerialNumber':
                $this->getValidateSerialNumber();
                break;
            
            case 'sparePartsWarrantyChecker':
                $this->getSparePartsWarrantyChecker();
                break;
            
            case 'checkSparePartsOrder':
                $this->checkSparePartsOrder();
                break;
            
            case 'warrantyCheckerAndCallTypeData':
                $this->getWarrantyCheckerAndCallTypeData();
                break;
            
            case 'submitWarrantyCheckerAndEditCallType':
                $this->submitWarrantyCheckerAndEditCallType();
                break;
            
            case 'getBookingDetails':
                $this->getBookingDetails();
                break;
            
            default:
                break;
            
        }
    }

    function verifyResponse($phone_number, $userResult) {
        log_message('info', "Entering: " . __METHOD__);

        $result_print = array();
        $code = "0011";
        $status = "error";
        //$message = "Thanks for joining Aroundhomz. Avail off-season AC service at just Rs290 & get AC cover worth Rs500 free. Offer on App Booking goo.gl/m0iAcS / Call 011-39595200";
        //$message = "Thanks for joining Aroundhomz. Avail off-season AC service at Rs210. All Service charges carry 1 Month Warranty. Book on App goo.gl/m0iAcS / Call 011-39595200";
        //$message = "Thanks for interest in 247Around. Please call us for TV, Refrigerator, Washing Machine, Microwave etc Repair/Service/Installation requirement in Delhi & NCR.";
        $message = "Welcome to 247around, your appliance buddy app. You can use it for Appliance Repair/Service/Installation requirements and check our unique repair diagnostics.";
        $developer_phone = array('8826423424', '9810872244', '8130572244', '9899296372', '8447142491');
        //$developer_phone = array();

        if ($userResult) {
            //Confirm user about number verification
            $this->notify->sendTransactionalSmsMsg91($phone_number, $message,SMS_WITHOUT_TAG);
            $name = $userResult[0]['name'];
            $email = $userResult[0]['user_email'];
            $user_id = $userResult[0]['user_id'];

            //Inform Admin as well about the new user
           
            if (!in_array($phone_number, $developer_phone)) {
                /*
                  $this->sendMail("New User Added", $name . " with phone number " . $phone_number
                  . " and email " . $email . " joi`ned Around !!!", false);
                 */

                $this->sendNewUserEmail($userResult);
            }
            

            //Create sample wallet if required
            //Check no of appliances in User's wallet
            $count = $this->apis->getApplianceCountByUser($user_id);
            //log_message('info', "Appliance Count: " . $count);
            //Add sample appliances if user has < 5 appliances in wallet
            if ($count < 5) {
                $this->apis->addSampleAppliances($user_id, 5 - intval($count));
            }

            $result = $userResult[0];
            $result_print = array(
                'user_id' => $result['user_id'],
                'phone_number' => $result['phone_number'],
                'name' => $result['name']
            );

            $code = "0000";
            $status = 'success';
        }

        $this->jsonResponseString['response'] = $result_print;
        $this->sendJsonResponse(array($code, $status));
    }

    /**
     * @input: void
     *
     * @description: This function gets called through the Exotel Missed call App Passthru Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/pass-through
     * Through the $route['pass-through'] = 'api/pass_through'; mechanism defined in routes.php,
     * call reaches to this function below which fetches information passed while making a call to
     * this URL and stores all details in the boloaaka.passthru_misscall_log table (function
     * apis->insertPassthruCall($callDetails)).
     * This table is checked again and again in processUserVerificationCode() to see if valid entry
     * is there or not. Once the entry is found, it is parsed and appropriate code is returned.
     *
     * After saving call details, it marks the calling no as Verified in DB only if call was made
     * to app verification no 30017601 and set 200 OK in header.
     *
     * @output: None
     */
    public function pass_through() {
        log_message('info', "Entering: " . __METHOD__);
        
        if($this->input->post()){
            $callDetails = $this->input->post();
        }
        else{
            $activity = array('activity' => 'process exotel request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
            $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
            $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
            $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
            $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
            $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
            $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
            $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
            $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
            $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
            $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
            $callDetails['create_date'] = null;
        }
        log_message('info', "call_details_array: " . print_r($callDetails, TRUE));

        //var_dump($apiDetails);
        //insert in database
        $this->apis->insertPassthruCall($callDetails);

        //fetches only the 10 digits of the mobile no without the country code
        $num = substr($callDetails['from_number'], '-10');
        //var_dump($num);

    //User could give missed call on 011-30017601 to verify the App
    //as well as to confirm her istallation. Try both steps below and then
    //leave.
    //If user has given a missed call on 011-30017601 to verify the App,
    //verify the user no in the database.
    //Also, If user has given a missed call on 011-30017601 to confirm installation,
    //tag the booking accordingly.
    if ($callDetails['To'] == PARTNERS_MISSED_CALLED_NUMBER || $callDetails['To'] == PARTNERS_MISSED_CALLED_NUMBER_KNOWLARITY || $callDetails['To'] == PARTNERS_MISSED_CALLED_NUMBER_2) {
            //Send Notification to concerned employee for missed call notification
            $receiverArray['employee'] = explode(",",INSTALLATION_MISSED_CALL_NOTIFICATION_EMPLOYYE_IDS);
            $this->push_notification_lib->create_and_send_push_notiifcation(INSTALLATION_MISSED_CALL_NOTIFICATION,$receiverArray,array());
            
            //verify user phone no first
            $this->apis->verifyUserNumber($num);

            //Check if call has been made from APP
            //Handling case when User is not being Found in DB, sending Installation and Request
            // welcome SMS to the corresponding user and adding the details in Partner Missed Calls table as well
            //1. Sending SMS to the user
            $sms['tag'] = "partner_missed_call_welcome_sms";
            $sms['phone_no'] = $num;
            $sms['smsData'] = '';
            $sms['booking_id'] = '';
            $sms['type'] = "user";
            $sms['type_id'] = '';

            $this->notify->send_sms_msg91($sms);
            //Logging
            log_message('info', __FUNCTION__ . ' Partner Missed Call Welcome SMS has been sent to ' . $num);


            //2. Now adding details in partner_missed_calls table
            //Checking the Case when Number is already present in Table
            //Getting FollowUp Leads
            $leads_followUp = $this->partner_model->get_partner_leads_by_phone_status($num, 'FollowUp');
            //Getting Completed Leads
            $leads_completed = $this->partner_model->get_partner_leads_by_phone_status($num, 'Completed');
            //Getting Cancelled Leads
            $leads_cancelled = $this->partner_model->get_partner_leads_by_phone_status($num, 'Cancelled');
            // a . First checking if FollowUp leads is Present
            if (!empty($leads_followUp)) {

                //Updating Previously present Row, by changing Dates when Phone is present in FollowUp state
                $data['action_date'] = date('Y-m-d H:i:s');
                $data['create_date'] = date('Y-m-d H:i:s');
                $data['update_date'] = date('Y-m-d H:i:s');
                $where = array('id' => $leads_followUp[0]['id']);
                $inserted_id = $this->partner_model->update_partner_missed_calls($where, $data);
                if ($inserted_id) {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Previous Phone has been updated in partner_missed_calls table with no: ' . $num);
                    //Adding details in Booking State Change
                    $this->notify->insert_state_change("", _247AROUND_FOLLOWUP, _247AROUND_FOLLOWUP, "Lead Updated Phone: " . $num, _247AROUND_DEFAULT_AGENT, 
                            _247AROUND_DEFAULT_AGENT_NAME, ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP,_247AROUND);
                } else {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Error in adding Phone to partner_missed_calls details ' . $num);
                }
            }
            // b. Checking case when leads is Completed or Cancelled
            else if (!empty($leads_cancelled) || !empty($leads_completed)) {

                // Adding a new Row in Partner missed calls details in case of completed or cancelled
                $data['phone'] = $num;
                $data['action_date'] = date('Y-m-d H:i:s');
                $data['create_date'] = date('Y-m-d H:i:s');
                $inserted_id = $this->partner_model->insert_partner_missed_calls_detail($data);
                if ($inserted_id) {
                    //Logging
                    log_message('info', __FUNCTION__ . ' New Entry for SAME PHONE has been added in partner_missed_calls table with no: ' . $num);
                    //Adding details in Booking State Change
                    $this->notify->insert_state_change("", _247AROUND_FOLLOWUP, _247AROUND_NEW_PARTNER_LEAD, "Lead Added Phone: " . $num, _247AROUND_DEFAULT_AGENT,
                            _247AROUND_DEFAULT_AGENT_NAME, ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP,_247AROUND);
                } else {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Error in adding Phone to partner_missed_calls details ' . $num);
                }
            }
            // c. No leads is Present
            else {

                //Condition when Phone is Not Present - Insert New Row
                $data['phone'] = $num;
                $data['action_date'] = date('Y-m-d H:i:s');
                $data['create_date'] = date('Y-m-d H:i:s');
                $inserted_id = $this->partner_model->insert_partner_missed_calls_detail($data);
                if ($inserted_id) {
                    //Logging
                    log_message('info', __FUNCTION__ . ' New Phone has been added in partner_missed_calls table with no: ' . $num);
                    //Adding details in Booking State Change
                    $this->notify->insert_state_change("", _247AROUND_FOLLOWUP, _247AROUND_NEW_PARTNER_LEAD, "Lead Added Phone: " . $num, _247AROUND_DEFAULT_AGENT, 
                            _247AROUND_DEFAULT_AGENT_NAME,ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP, _247AROUND);
                } else {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Error in adding Phone to partner_missed_calls details ' . $num);
                }
            }


            //Considering the case for Snapdeal Missed Calls
        } 
        else if($callDetails['To'] == SNAPDEAL_MISSED_CALLED_NUMBER || $callDetails['To'] == SNAPDEAL_MISSED_CALLED_NUMBER_KNOWLARITY){
            //Logging
            log_message('info', __FUNCTION__ . ' Missed call given by Snapdeal customer - Number: ' . $num);
            
            //verify user phone no first
        $this->apis->verifyUserNumber($num);
            
            //find all pending queries for this user now
            $bookings = $this->user_model->booking_history($num, 100, 0);

            //change internal status to show missed call activity if it is
            //a pending query waiting for confirmation and user has given missed
            //call to confirm the installation
            if (count($bookings) > 0) {
                foreach ($bookings as $b) {
                    if (($b['type'] === 'Query' && $b['current_status'] === 'FollowUp') ||
                            $b['current_status'] === "Cancelled" && $b['type'] === 'Query' &&
                            (date('Y-m-d', strtotime($b['create_date'])) > date('Y-m-d',strtotime('-30 days')))) {
                        $d = array('internal_status' => 'Missed_call_confirmed',
                            'closed_date' => NULL,
                            'cancellation_reason' => NULL,
                            'service_center_closed_date' => NULL,
                            'booking_date' => '', 'booking_timeslot' => '',
                            'delivery_date' => date('Y-m-d H:i:s'),
                            'current_status' => 'FollowUp',
                            'query_remarks' => 'Missed call received, Convert to Booking NOW !!!');

                        //check partner status from partner_booking_status_mapping table  
                        $partner_status = $this->booking_model->get_partner_status($b['partner_id'], $d['current_status'], $d['internal_status']);
                        if (!empty($partner_status[0]['partner_current_status']) && !empty($partner_status[0]['partner_internal_status'])) {
                            $d['partner_current_status'] = $partner_status[0]['partner_current_status'];
                            $d['partner_internal_status'] = $partner_status[0]['partner_internal_status'];
                        } else {
                            $d['partner_current_status'] = 'PENDING';
                            $d['partner_internal_status'] = 'Customer_Not_Available';
                            $this->booking_utilities->send_mail_When_no_data_found($d['current_status'], $d['internal_status'], $b['booking_id'], $b['partner_id']);
                        }

                        $r = $this->booking_model->update_booking($b['booking_id'], $d);

                        $this->send_missed_call_confirmation_sms($b);

                        if ($r === FALSE) {
                            log_message('info', __METHOD__ . '=> Booking confirmation '
                                    . 'through missed call failed for ' . $b['booking_id']);

                            //Send email
                            $this->notify->sendEmail(NOREPLY_EMAIL_ID, "anuj@247around.com", "", "", "Query update Failed after Missed Call for Booking ID: " . $b['booking_id'], "", "",QUERY_UPDATE_FAILED_MISSED_CALL, "", $b['booking_id']);
                        } else {
                            log_message('info', __METHOD__ . '=> Booking confirmation '
                                    . 'through missed call succeeded for ' . $b['booking_id']);
                            $u = array('booking_status' => _247AROUND_FOLLOWUP, 'ud_closed_date' => NULL);
                            //Update unit details
                            $this->booking_model->update_booking_unit_details($b['booking_id'], $u);
                             $this->notify->insert_state_change($b['booking_id'], _247AROUND_FOLLOWUP, $b['current_status'], 
                                     "Booking Open After Customer Missed Call",_247AROUND_DEFAULT_AGENT, 
                                     _247AROUND_DEFAULT_AGENT_NAME,ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP, _247AROUND);
                        }
                    }
                    else if($b['type'] === 'Booking' && $b['current_status'] === 'Cancelled'){
                        // If Cancelled date belongs to last 7 days only 
                        $today = strtotime(date("Y-m-d"));
                        $cancelled_date = strtotime($b['closed_date']);
                        $datediff = round(($today - $cancelled_date) / (60 * 60 * 24));
                        if($datediff < 8){
                            $postArray['assigned_vendor_id'] =$b['assigned_vendor_id'];
                            $nextDay = date('Y-m-d', strtotime("+1 days"));
                            $postArray['booking_date'] = $nextDay;
                            if(date('w', strtotime($nextDay)) == 7){
                                $postArray['booking_date'] = date('Y-m-d', strtotime("+2 days"));
                            }
                            $postArray['booking_timeslot'] = "4PM-7PM";
                            $postArray['admin_remarks'] = "Booking get Reopend through customer missed call";
                            $postArray['partner_id'] = $b['partner_id'];
                            $reopenBookingUrl = base_url() . "employee/do_background_process/reopen_booking/".$b['booking_id']."/".$b['current_status'];
                            $this->asynchronous_lib->do_background_process($reopenBookingUrl, $postArray);
                        }
                    }
                }
            }else{
                /* When No bookings found for the snapdeal customers on missed call then send sms*/
                $this->send_missed_call_booking_not_found_sms($num);
                log_message('info', __FUNCTION__ . ' Missed call given by customer from 247AROUND App - Number: ' . $num);
            }
        }

        $this->output->set_header("HTTP/1.1 200 OK");
    }

    
    public function pass_through_ac_service() {
        //log_message('info', "Entering: " . __METHOD__);
        
        if($this->input->post()){
            $callDetails = $this->input->post();
        }
        else{
            $activity = array('activity' => 'AC Service Request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
            $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
            $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
            $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
            $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
            $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
            $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
            $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
            $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
            $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
            $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
            $callDetails['create_date'] = null;
        }

        //var_dump($apiDetails);
        //insert in database
        $this->apis->insertPassthruCall($callDetails);

        //fetches only the 10 digits of the mobile no without the country code
        $num = substr($callDetails['from_number'], '-10');
        //var_dump($num);

    //User would give missed call on 011-39595450 to make AC service request
        //Once missed call is received, send customer details on email to the team
        //so that the booking can be inserted.
    if ($callDetails['To'] == AC_SERVICE_MISSED_CALLED_NUMBER || $callDetails['To'] == AC_SERVICE_MISSED_CALLED_NUMBER_KNOWLARITY) {
            log_message('info', "AC Service Missed Call Received from: " . $num);
            
            //send email
            $from = NOREPLY_EMAIL_ID;
            $to = NOREPLY_EMAIL_ID;
            $cc = NITS_ANUJ_EMAIL_ID;
            $bcc = '';
            $sub = "AC Service Missed Call Received from: " . $num;
            $body = 'Please schedule AC service for this customer';
                    
            $this->notify->sendEmail($from, $to, $cc, $bcc, $sub, $body, "",AC_MISSED_CALL);
        }
        
    }
    
    /**
     * @desc: This is used to send sms when customer gave a missed call and booking is found
     * @param string $booking
     */
    function send_missed_call_confirmation_sms($booking) {
        //log_message ('info', __METHOD__);

        if($booking['partner_id'] === GOOGLE_FLIPKART_PARTNER_ID){
            $sms['tag'] = "missed_call_confirmed_for_google";
        }else{
            $sms['tag'] = "missed_call_confirmed";
        }
        $sms['phone_no'] = $booking['booking_primary_contact_no'];
        $sms['smsData']['message'] = '';
        $sms['smsData']['service'] = $booking['services'];
        // Check time is greater than 1PM. If time is greater than 1 PM,
        // then set installation date Tommorrow otherwise Today.
        if(date("l") == "Sunday"){
            
            $sms['smsData']['date'] = "Tomorrow";
            
        } else if (date('H') > 13) {
            $sms['smsData']['date'] = "Tomorrow";
        } else {
            $sms['smsData']['date'] = "Today";
        }

        $sms['smsData']['booking_id'] = $booking['booking_id'];
        $sms['booking_id'] = $booking['booking_id'];
        $sms['type'] = "user";
        $sms['type_id'] = $booking['user_id'];

        $this->notify->send_sms_msg91($sms);
    }

    /**
     * @desc: This is used to send sms when customer gave a missed call and booking is NOT found
     * @param string Mobile no
     */
    function send_missed_call_booking_not_found_sms($mobile) {
        //log_message ('info', __METHOD__);
        
    $sms['tag'] = "missed_call_booking_not_found";
    $sms['phone_no'] = $mobile;
        $sms['smsData'] = '';
    $sms['booking_id'] = '';
    $sms['type'] = "user";
    $sms['type_id'] = '';

    $this->notify->send_sms_msg91($sms);
    }

    /**
     * @input: void
     *
     * @description: This function gets called through the Exotel Vendor extn call App Passthru Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/vendor-extn
     * Through the $route['vendor-extn'] = 'api/vendor_extn'; mechanism defined in routes.php,
     * call reaches to this function below which fetches information passed while making a call to
     * this URL and the Vendor extn which gets passed through the Gather Applet.
     *
     * After saving call details, it marks the calling no as Verified in DB and set 200 OK in header.
     *
     * @output: None
     */
    public function vendor_extn() {
        log_message('info', "Entering: " . __METHOD__);

        $activity = array('activity' => 'process vendor extn request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
        $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
        $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
        $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
        $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
        $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
        $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
        $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
        $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
        $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
        $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
        //$callDetails['create_date'] = $this->microtime_float();
        //$callDetails['update_date'] = $this->microtime_float();
        //send test mail with all this info - SEND MAIL DIDN'T WORK HERE SO RELY ON DB TABLE ONLY
        //sendMail("Vendor extn test", print_r($callDetails, true), true);
        //fetches the vendor extn using the 'digits' parameter.
        //NOTE: This parameter comes with a double quote (") before and after the number. You'll have to trim()
        //this parameter for double quotes (") to get the actual digits.
        $extn = trim($callDetails['digits'], "\"");
        log_message('info', "Extn: " . $extn);

        //TODO: Validate extn and set HTTP header accordingly
        $result = $this->apis->gethandymanfromextn($extn);
        if (count($result) > 0) {
            //fetch handyman
            $callDetails['handyman_id'] = $result[0]['id'];
            $callDetails['handyman_phone'] = $result[0]['phone'];

            log_message('info', "Phone number found: " . $callDetails['handyman_phone']);
        } else {
            //TODO: Handle error here
            log_message('info', "Handyman not found, invalid extension");
        }

        //insert in database
        $this->apis->insertPassthruVendorExtnCall($callDetails);

        $this->output->set_header("HTTP/1.1 200 OK");
    }

    /**
     * @input:
     *
     * @description: This function gets called through the Exotel Vendor extn call App Connect Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/get-vendor-phone
     * to get a vendor number as per the vendor selected by the user (through the extn passed).
     *
     * @output: None
     */
    public function getVendorPhoneFromExtn() {
        log_message('info', "Entering: " . __METHOD__);

        $activity = array('activity' => 'get vendor number from extn request', 'data' => json_encode($_GET),
            'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $callSid = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;

        //returns the vendor mobile num using the extn parameter.
        //TODO: Should we have some flag which marks the request as serviced????
        $result = $this->apis->checkPassThruVendorExtnLog($callSid);
        if (count($result) > 0) {
            //return handyman mobile number
            log_message('info', "Phone number found & returned");

            $mob_num = $result[0]['handyman_phone'];
        } else {
            //TODO: Handle error here
            log_message('info', "Phone number not found, return Around call center number");

            $mob_num = "08046809276";
        }

        echo $mob_num;
        log_message('info', "Mobile no returned: " . $mob_num);
    }

    /**
     * @input: Subject and Message strings. Flag isTesting is used to send test mails only to Anuj
     * @description: send email
     * @output: Return response string: Success or Fail
     */
    function sendMail($subject, $message, $isTesting) {
        $this->load->library('email');
        $this->email->initialize(array(
            'protocol' => 'smtp',
            'smtp_host' => 'smtp.sendgrid.net',
            'smtp_user' => 'nitinmalhotra',
            'smtp_pass' => 'mandatory16',
            'smtp_port' => 587,
            'crlf' => "\r\n",
            'newline' => "\r\n",
            'mailtype' => 'html'
            )
        );

        $activity = array('activity' => 'send email', 'data' => "Subject: $subject, Message: $message",
            'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $this->email->from('feedback@247around.com', '247around Team');

    if ($isTesting) {
            $this->email->to("anuj.aggarwal@gmail.com");
        } else {
            $this->email->to(NITS_ANUJ_EMAIL_ID);
            //$this->email->cc("anuj.aggarwal@gmail.com");
    }

        $this->email->subject($subject);
        $this->email->message($message);

        if ($this->email->send()) {
            log_message('info', __METHOD__ . ": Mail sent successfully");

            return "Success";
        } else {
            log_message('error', __METHOD__ . ": Mail could not be sent");

            return "Fail";
        }
    }

    /**
     * @input: Subject and Message strings. Flag isTesting is used to send test mails only to Anuj
     * @description: send email
     * @output: Return response string: Success or Fail
     */
    function sendBookingMailToUser($user, $subject, $message, $file, $isTesting) {
        //$activity = array('activity' => 'send booking email to user', 'data' => "Subject: $subject, Message: $message",
        //    'time' => $this->microtime_float());
        //$this->apis->logTable($activity);

        $this->email->from(NOREPLY_EMAIL_ID, '247around Team');

    if ($isTesting) {
            $this->email->to($user);
            $this->email->bcc(ANUJ_EMAIL_ID);
        } else {
            $this->email->to($user);
            $this->email->bcc(NITS_ANUJ_EMAIL_ID);
    }

        $this->email->subject($subject);
        $this->email->message($message);

        if ($file != "")
            $this->email->attach($file, 'attachment', 'booking-snapshot.jpg');

        if ($this->email->send()) {
//            log_message('info', __METHOD__ . ": Mail sent successfully");

            return "Success";
        } else {
//            log_message('error', __METHOD__ . ": Mail could not be sent");

            return "Fail";
        }
    }

    function saveUnitDetails($unit_details, $booking_id, $discount_amount, $service_id, $appliance_id, $state) {
        log_message('info', "Entering: " . __METHOD__);

        $units = json_decode($unit_details, true);
        $count = count($units);
        $i= 0;
        $price_tag = array();
        //Insert unit details corresponding to this booking ID
        foreach ($units as $unit) {
        $b_unit['partner_id'] = _247AROUND;
        $b_unit['appliance_brand'] = $unit['brand'];
        $b_unit['service_id'] = $service_id;
        $b_unit['booking_id'] = $booking_id;
        $b_unit['appliance_id'] = $appliance_id;
        $b_unit['appliance_capacity'] = $unit['capacity'];
        $b_unit['appliance_category'] = $unit['category'];
        $b_unit['model_number'] = $unit['modelNo'];
        $price_tags = $unit['priceTags'];
        $p_explode = explode(",", $price_tags);
        foreach($p_explode as $key => $p_tags){
            $s_charges = $this->partner_model->getPrices( $b_unit['service_id'], $b_unit['appliance_category'], 
                    $b_unit['appliance_capacity'], $this->app_price_mapping_id, trim($p_tags),"");
            if($i == 0){
                $b_unit['around_paid_basic_charges'] = $discount_amount;
                $b_unit['around_net_payable'] = $discount_amount;
            } else{
                $b_unit['around_paid_basic_charges'] = 0;
                $b_unit['around_net_payable'] = 0;
            }
            
            $b_unit['partner_paid_basic_charges'] = 0;
            $b_unit['partner_net_payable'] = 0;
            
            $b_unit['id'] = $s_charges[0]['id'];
            $b_unit['booking_status'] = _247AROUND_PENDING;
            
             $result = $this->booking_model->insert_data_in_booking_unit_details($b_unit, $state , $key);
             array_push($price_tag, $result['price_tags']);
            $i++;
        }
           
        //log_message('info', "Unit Inserted: " . $id_returned);
        }
        
         $this->booking_model->update_request_type($booking_id, $price_tag,array());

//        log_message('info', "No of Units: " . $count);
        return $count;
    }

 
    /**
     * @input: None
     * @description: Get booking calcellation reasons
     * @output:
     */
    /*
    function processGetCancellationReasons() {
        log_message('info', "Entering: " . __METHOD__);

        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //print_r($requestData);
        $activity = array('activity' => 'process get cancellation reasons', 'data' => json_encode($requestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $reasons = $this->apis->getCancellationReasons();
        log_message('info', print_r($reasons, TRUE));

        $this->jsonResponseString['response'] = $reasons;
        $this->sendJsonResponse(array('0000', 'success'));
    }
    */
    /**
     * @input: Booking ID to be rescheduled, new date and time
     * @description: Cancel pre-existing booking
     * @output:
     */
    /*
    function processRescheduleBooking() {
        log_message('info', "Entering: " . __METHOD__);

        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //print_r($requestData);
        $activity = array('activity' => 'process reschedule booking', 'data' => json_encode($requestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $booking_id = $requestData['booking_id'];
        $booking_date = $requestData['booking_date'];
        //Format = DD-MM-YYYY for database
        $booking_date_formatted = date("d-m-Y", strtotime($booking_date));
        $booking_time = $requestData['booking_time'];
        $reschedule_date = date('Y-m-d H:i:s');

//        log_message('info', "Booking ID: " . $booking_id);

        $reschedule_details = array(
            'current_status' => 'Rescheduled',
            'update_date' => $reschedule_date,
            'booking_date' => $booking_date_formatted,
            'booking_timeslot' => $booking_time
        );

        $result = $this->apis->updateBooking($booking_id, $reschedule_details);
//        log_message('info', print_r($result, TRUE));

        //Send message to User
        $user_profile = $this->apis->getuserProfileid($result['user_id']);
        $user_phone = $user_profile[0]['phone_number'];

        $booking_date_strings = explode(",", $result['booking_date']);
        $booking_time_strings = explode("-", $result['booking_timeslot']);
        $booking_time_by = trim($booking_time_strings[1]);

        $services = $this->apis->getServiceById($result['service_id']);
        $searched_service = $services[0]['services'];

        //Send cancellation mails to Admin, Vendor and User
        $this->sendRescheduleMails($user_profile[0], $result);

        $message = "Got It ! Your request for $searched_service Repair is rescheduled to $booking_date_strings[0], $booking_time_by. Like us on Facebook goo.gl/Y4L6Hj / 9555000247 - 247Around";

        //log_message('info', "SMS text: " . $message);

        $this->notify->sendTransactionalSmsMsg91($user_phone, $message,SMS_WITHOUT_TAG);
        //$notify = "Sms Sent";

        $this->jsonResponseString['response'] = "done";
        $this->sendJsonResponse(array('0000', 'success'));
        
    }
    */

    function processEngineerLogin(){ 
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $data = $this->dealer_model->entity_login(array("entity" => "engineer", 
            "active" =>1, "user_id" => $requestData["mobile"]));
        if(!empty($data)){ 
            $login = $this->dealer_model->entity_login(array("entity" => "engineer", 
            "active" =>1, "user_id" => $requestData["mobile"], "password" => md5($requestData["password"])));
            if(!empty($login)){
                $engineer  = $this->engineer_model->get_engineers_details(array("id" => $login[0]['entity_id'], "active" => 1), "service_center_id, name");
                if(!empty($engineer)){
                    $sc_agent = $this->service_centers_model->get_sc_login_details_by_id($engineer[0]['service_center_id']);
                    $data[0]['service_center_id'] = $engineer[0]['service_center_id'];
                    $data[0]['sc_agent_id'] = $sc_agent[0]['id'];
                    $data[0]['agent_name'] = $engineer[0]['name'];
                    $device['deviceInfo'] = $requestData["deviceInfo"];
                    $device["device_id"] = $this->deviceId;
                    $device['app_version'] = $requestData["app_version"];
                    $this->partner_model->update_login_details($device, array("agent_id" => $data[0]['agent_id']));
                    $this->jsonResponseString['response'] = $data[0];
                    $this->sendJsonResponse(array('0000', 'success'));
                } else {
                    $this->sendJsonResponse(array('0012', 'Engineer does not exist'));
                }
            }
            else{
                $this->sendJsonResponse(array('0013', 'Invalid User Id or Password'));
            }
        }
        else{
            $this->sendJsonResponse(array('0014', 'User Id does not exist'));
        }
    }
    
    function processCompleteBookingByEngineer(){
        $postData = json_decode($this->jsonRequestData['qsh'], true);
        $requestData = json_decode($postData['completeBookingByEngineer'], true);
        $unitDetails = $requestData["unit_array"];
        $booking_id = $requestData["booking_id"]; 
        $validation = true;
        $sn_pic_url = "";
        $serial_number_text = "";
        $sc_agent_id = "";
        $purchase_inv_url = "";
        if($validation){
            foreach($unitDetails as $value){
                $data = array();
                
                $unit_id = $this->check_unit_exist_action_table($booking_id, $value["unit_id"], $requestData['service_center_id'], $requestData['engineer_id']);
               
                if($unit_id){
                    $data["current_status"] = "InProcess";
                    if($value['complete'] == false){
                        $data["internal_status"] = _247AROUND_CANCELLED;
                    } else {
                        $data["internal_status"] = _247AROUND_COMPLETED;
                    }
                    
                    if($requestData["appliance_broken"] == false){
                        $data["is_broken"] = 0;
                    } else {
                        $data["is_broken"] = 1;
                    }
                    
                    if(isset($value["purchase_invoice"])){
                        if(isset($value["purchase_invoice"])){
                            if(!$purchase_inv_url){
                                $purchase_inv_url = $requestData['booking_id']."_" . $unit_id ."_purchase_inv_".date("YmdHis").".png";
                                $this->miscelleneous->generate_image($value["purchase_invoice"],$purchase_inv_url, "misc-images");
                            }
                        }
                    }
                    else{
                        if(isset($value["existing_purchase_invoice"])){
                            if($value["existing_purchase_invoice"]){
                               $purchase_inv_url = $requestData['booking_id']."_" . $unit_id ."_purchase_inv_".date("YmdHis").".png";
                               $this->miscelleneous->generate_image($value["existing_purchase_invoice"],$existing_purchase_inv_url, "misc-images");
                            }
                        }
                    }

                    if(isset($value["serial_number"])){
                        $serial_number_text = $value["serial_number"];
                        if(isset($value["serial_number_pic"])){
                            if(!$sn_pic_url){
                                $sn_pic_url = $requestData['booking_id']."_" . $unit_id ."_serialNO_".rand(10,100).".png";
                                $this->miscelleneous->generate_image($value["serial_number_pic"],$sn_pic_url, SERIAL_NUMBER_PIC_DIR);
                            }
                        }
                        else{
                            if(isset($value["existing_serial_number_pic"])){
                                if($value["existing_serial_number_pic"]){
                                   $sn_pic_url = $requestData['booking_id']."_" . $unit_id ."_serialNO_".rand(10,100).".png";
                                   $this->miscelleneous->generate_image($value["existing_serial_number_pic"],$sn_pic_url, SERIAL_NUMBER_PIC_DIR);
                                }
                            }
                        }
                    }
                    $data['serial_number'] = $serial_number_text;
                    $data["serial_number_pic"] = $sn_pic_url;
                    $data["purchase_invoice"] = $purchase_inv_url;
                    $data["closed_date"] = date("Y-m-d H:i:s");
                    $data["sf_purchase_date"] = $requestData['purchase_date'];
                    if(isset( $unitDetails[0]['model_number'])){
                         $data["model_number"] = $unitDetails[0]['model_number'];
                    }
                    $data["closing_remark"] = $requestData['closing_remark'];
                    $data["symptom"] = $requestData['symptom'];
                    $data["defect"] = $requestData['defect'];
                    $data["solution"] = $requestData['solution'];
                    $data["booking_status"] = $value['complete'];
                    $service_charge = 0;
                    $additional_service_charge = 0;
                    $parts_cost = 0;
                    if(isset($value['service_charge'])){
                        $service_charge = $value['service_charge'];
                    }
                    
                    if(isset($value['additional_service_charge'])){
                        $additional_service_charge = $value['additional_service_charge'];
                    }
                    
                    if(isset($value['parts_cost'])){
                        $parts_cost = $value['parts_cost'];
                    }
                    
                    $data["service_charge"] = $service_charge;
                    $data["additional_service_charge"] = $additional_service_charge;
                    $data["parts_cost"] = $parts_cost;
                    $data["amount_paid"] = $requestData['amount_paid'];
                    $this->engineer_model->update_engineer_table($data, array("unit_details_id" => $unit_id, "booking_id" =>$requestData["booking_id"] ));
                    
                    /*Update model number and purchase date in booking unit details*/
                    $booking_update_data = array("sf_model_number" => $unitDetails[0]['model_number'], "sf_purchase_date" => $requestData['purchase_date']);
                    $this->booking_model->update_booking_unit_details($requestData["booking_id"], $booking_update_data);
                }
            }
        
        
            $sign_pic_url = $booking_id."_sign_".rand(10,100).".png";
                   
            $this->miscelleneous->generate_image($requestData["signature_pic"],$sign_pic_url,"engineer-uploads");
            
            //$en["amount_paid"] = $requestData["amountPaid"];
            $en["booking_id"] = $booking_id;
            $en["signature"] = $sign_pic_url;
            $en['closed_date'] = date("Y-m-d H:i:s");
            $bookinghistory = $this->booking_model->getbooking_history($booking_id);
            if(!empty($requestData['location']) ){
                $location = json_decode($requestData['location'], true);
                $en["pincode"] = $location['pincode'];
                if($bookinghistory[0]['booking_pincode'] != $location['pincode']){
                    $en['mismatch_pincode']  = 1;
                }
                $en["city"] = $location['city'];
                $en["address"] = $location['address'];
                $en["latitude"] = $location['latitude'];
                $en["longitude"] = $location['longitude'];
               
            }
            $en["remarks"] = $requestData['closing_remark'];
            $en["service_center_id"] = $requestData['service_center_id'];
            $en["engineer_id"] = $requestData['engineer_id'];
            $is_exist = $this->engineer_model->get_engineer_sign("id", array("service_center_id" => $requestData['service_center_id'], "booking_id" => $booking_id));
            if(!empty($is_exist)){
                $this->engineer_model->update_engineer_action_sig(array("id"=> $is_exist[0]['id']), $en);
            } else {
                $this->engineer_model->insert_engineer_action_sign($en);
            }
            $actor = $next_action = 'not_define';
            $partner_status = $this->booking_utilities->get_partner_status_mapping_data($data["current_status"] , $data['internal_status'], $requestData['partner_id'], $booking_id);
            if (!empty($partner_status)) {
                $booking['partner_current_status'] = $partner_status[0];
                $booking['partner_internal_status'] = $partner_status[1];
                $actor = $booking['actor'] = $partner_status[2];
                $next_action = $booking['next_action'] = $partner_status[3];
            }
            $this->booking_model->update_booking($booking_id, $booking);
            
            if(isset($requestData['sc_agent_id'])){
                $sc_agent_id = $requestData['sc_agent_id'];
            }
            else{
                $sc_agent = $this->service_centers_model->get_sc_login_details_by_id($requestData['service_center_id']);
                if(!empty($sc_agent)){
                    $sc_agent_id = $sc_agent[0]['id'];
                }
            }
            
            $this->notify->insert_state_change($booking_id, ENGINEER_COMPLETE_STATUS, _247AROUND_PENDING, "Booking Updated By Engineer From App", 
                    $sc_agent_id, "", $actor,$next_action,NULL, $requestData['service_center_id']);
            
            $this->sendJsonResponse(array('0000', 'Booking Completed Successfully'));
        } else {
            
            $this->sendJsonResponse(array('0018', 'Please Add All Deatils'));
        }  
    }
    
    function getCancellationReason(){
        $where = array('reason_of' => 'vendor', 'show_on_app'=> 1);
        $reason = $this->booking_model->cancelreason($where);
        $this->jsonResponseString['cancellationReason'] = $reason;
        $this->sendJsonResponse(array('0000', 'success'));
    }
    
    function processCancelBookingByEngineer(){
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData["bookingID"]) && !empty($requestData["cancellationReason"])){
            $bookinghistory = $this->booking_model->getbooking_history($requestData["bookingID"]);
            /* check spare part oredered status on booking which need to be cancel */
            $isdisable = false; 
            if(isset($bookinghistory['spare_parts'])){ 
                foreach($bookinghistory['spare_parts'] as $sp){
                    switch ($sp['status']){
                        case SPARE_PARTS_REQUESTED: 
                             $status = CANCEL_PAGE_SPARE_NOT_SHIPPED;
                             $isdisable= true;
                            break;
                        case SPARE_SHIPPED_BY_PARTNER:
                        case SPARE_DELIVERED_TO_SF:
                        case DEFECTIVE_PARTS_REJECTED:
                        case DEFECTIVE_PARTS_RECEIVED:
                        case DEFECTIVE_PARTS_SHIPPED:
                        case DEFECTIVE_PARTS_PENDING:
                        case SPARE_OOW_SHIPPED:
                             $status = CANCEL_PAGE_SPARE_SHIPPED;
                             $isdisable= true;
                             break;
                    }

                }
            }
            if(!$isdisable){
                $data['current_status'] = "InProcess";
                $data['internal_status'] = _247AROUND_CANCELLED;
                $data['cancellation_reason'] = $requestData["cancellationReason"];
                $data['cancellation_remark'] = $requestData["remarks"];
                $data["closed_date"] = date("Y-m-d H:i:s");
                $this->engineer_model->update_engineer_table($data, array( "booking_id" =>$requestData["bookingID"] ));

                $en["booking_id"] = $requestData["bookingID"];
                $en["remarks"] = "Booking Cancelled By Engineer From App";
                $en['closed_date'] = date("Y-m-d H:i:s");

                if(!empty($requestData['location']) ){
                    $location = json_decode($requestData['location'], true);
                    $en["pincode"] = $location['pincode'];
                    $en["city"] = $location['city'];
                    $en["address"] = $location['address'];
                    $en["latitude"] = $location['latitude'];
                    $en["longitude"] = $location['longitude'];
                    if($bookinghistory[0]['booking_pincode'] != $location['pincode']){
                        $en['mismatch_pincode']  = 1;
                    }

                }
                $en["service_center_id"] = $requestData['service_center_id'];
                $en["engineer_id"] = $requestData['engineer_id'];
                $is_exist = $this->engineer_model->get_engineer_sign("id", array("service_center_id" => $requestData['service_center_id'], "booking_id" => $requestData["bookingID"]));
                if(!empty($is_exist)){
                    $this->engineer_model->update_engineer_action_sig(array("id"=> $is_exist[0]['id']), $en);
                } else {
                    $this->engineer_model->insert_engineer_action_sign($en);
                }

                $this->notify->insert_state_change($requestData["bookingID"], $requestData["cancellationReason"], _247AROUND_PENDING, 
                        "Booking Cancelled By Engineer From App", 
                        $requestData['sc_agent_id'], "",ACTOR_BOOKING_CANCELLED,NEXT_ACTION_CANCELLED_BOOKING, NULL, $requestData['service_center_id']);

                $this->sendJsonResponse(array('0000', 'Booking Cancelled Successfully'));
            } else {
                $this->sendJsonResponse(array('0019', $status));
            }
        } else {
            $this->sendJsonResponse(array('0020', 'Failure'));
        }
    }

    function makeRequestDataArray() {
        $reqData = json_decode($this->jsonRequestData['qsh'], true);
        $array = array();
        for ($i = 0; $i < count($reqData); $i++) {
            $val = $reqData[$i];
            $array[$val['name']] = $val['value'];
        }
        return $array;
    }

    function makeAssocArray($data) {
        $reqData = json_decode($data, true);
        $array = array();
        for ($i = 0; $i < count($reqData); $i++) {
            $val = $reqData[$i];
            $array[$val['name']] = $val['value'];
        }
        return $array;
    }

    /**
     * @input: child key array and parent of child keys
     * @description: check valid JSON keys
     * @output: valid JSON keys
     */
    function checkJsonKeys($childArray, $parent = null) {
        $childArray = array_change_key_case($childArray, CASE_LOWER);
        $childArrayKey = array_keys($childArray);
        foreach ($childArrayKey as $childArrayKeys) {
            if (is_string($childArray[$childArrayKeys])) {
                $this->number = $this->checkValidKeys(strtolower($childArrayKeys), $parent) * $this->number;
            } else if (is_bool($childArray[$childArrayKeys])) {
                $this->number = $this->checkValidKeys(strtolower($childArrayKeys), $parent) * $this->number;
            } else if ($this->isAssociative($childArray[$childArrayKeys]) == 1) {
                $this->checkJsonKeys($childArray[$childArrayKeys], $childArrayKeys);
            } else if (is_array($childArray[$childArrayKeys])) {
                for ($i = 0; $i < sizeof($childArray[$childArrayKeys]); $i++) {
                    if (!is_string($childArray[$childArrayKeys][$i])) {
                        $this->checkJsonKeys($childArray[$childArrayKeys][$i], $childArrayKeys);
                    }
                }
            } else {
                return array("1001.1", "failure");
            }
        }
    }

    /**
     * @input: IP Address
     * @description: find the location of the user according to the ip address
     */
    function findLocationByIpNumber($ipaddress, $email) {

        //convert ip address into ip number
        $ipno = $this->Dot2LongIP($ipaddress);
        //find location according to ip number
        $getLocationFromIpNo = $this->apis->getIp2Location($ipno);
        if ($getLocationFromIpNo) {
            $latitude = $getLocationFromIpNo[0]['latitude'];
            $longitude = $getLocationFromIpNo[0]['longitude'];
            $country = $getLocationFromIpNo[0]['country_name'];

            $getLocation = $this->apis->getLastLocation($latitude, $longitude, $email);
            if (!$getLocation) {
                //saving location into database
                $location = array('latitude' => $latitude, 'longitude' => $longitude);

                $this->apis->saveLocation($location, $email, $country);
            }
        }
    }

    /**
     * @input: Ipaddress
     * @description: Converts ipaddress to ip number
     * @output: Ip number
     */
    function Dot2LongIP($Ipaddress) {
        if ($Ipaddress == "") {
            return 0;
        } else {
            $ips = explode(".", $Ipaddress);
            //print_r($ips);
            return ($ips[3] + $ips[2] * 256 + $ips[1] * 256 * 256 + $ips[0] * 256 * 256 * 256);
        }
    }

    /**
     * @input: Array
     * @description: Check array is associative or not
     * @output: true/false
     */
    function isAssociative($array) {
        return (bool) count(array_filter(array_keys($array), 'is_string'));
    }

    /**
     * @input: Array having code (numeric) and result (string) as 1st and 2nd elements
     * @description: send success and failure response
     * @output: Echoes response which gets returned to the Client (Android App) through the REST API
     */
    function sendJsonResponse($code) {
              
        $this->jsonResponseString['code'] = $code[0];
        $this->jsonResponseString['result'] = $code[1];

        if ($this->debug == "true") {
            $responseData = array("data" => $this->jsonResponseString);
            $activity = array('activity' => 'sending response', 'data' => json_encode($responseData), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);
            $response = json_encode($responseData, JSON_UNESCAPED_SLASHES);

            echo $response;
        } else if ($this->debug == "false") {
            $message = array("appid" => $this->appId, "data" => $this->jsonResponseString);
            $message = json_encode($message, JSON_UNESCAPED_SLASHES);
            $signature = $this->doCalculateHmacSignature($message, $this->appSecrete);
            header("x-pingoo:" . $signature);
            $responseData = array("appid" => $this->appId, "data" => $this->jsonResponseString);
            $responseData = json_encode($responseData, JSON_UNESCAPED_SLASHES);
            $response = base64_encode($responseData);

            echo $response;
        } else {
            $responseData = array("appid" => $this->appId, "debug" => $this->debug, "data" => $this->jsonResponseString);
            $response = json_encode($responseData, JSON_UNESCAPED_SLASHES);

            echo $response;
        }
    }

    /**
     * Simple function to replicate PHP 5 behaviour
     */
    function microtime_float() {
        list($usec, $sec) = explode(" ", microtime());
        return ((float) $usec + (float) $sec);
    }


    /**
     * @description: Function to send New User notification email to Admin
     * @param : User details object and flags array
     * @return : None
     */
    function sendNewUserEmail($userResult) {
        log_message('info', __METHOD__);

        $id = $userResult[0]['user_id'];
        $name = $userResult[0]['name'];
        $email = $userResult[0]['user_email'];
        $device_id = $userResult[0]['device_id'];
        $phone_number = $userResult[0]['phone_number'];
        $install_source = $userResult[0]['install_source'];
        $account_email = $userResult[0]['account_email'];
        $existing_flags = explode(",", $userResult[0]['existing_flags']);
        $src1 = "com.google.android";
        $src2 = "com.android.vending";

        log_message('info', "Flags: " . $existing_flags[0] . $existing_flags[1] .
            $existing_flags[2] . $existing_flags[3]);

        if ($userResult[0]['existing_flags'] == "Yes,Yes,Yes,Yes")
            $subject = "Existing User Re-installed Around";
        else {
            if ($existing_flags[3] == "No")
                $subject = "New User Joined Around";
            else
                $subject = "User Installed Around - Check further details";
        }

        $message = $name . " with phone number " . $phone_number
            . " and email " . $email . " joined Around !!! <br/><br/>";

        $message .= "<p>Notes:</p>";

        if (strstr($install_source, $src1) || strstr($install_source, $src2))
            $message = $message . "Install Source: Google" . "<br/>";
        else
            $message = $message . "Install Source: " . $install_source . "<br/>";

        $message = $message . "Playstore Email <b>" . $account_email . "</b> existed: " .
            $existing_flags[3] . "<br/>";

        $message = $message . "Phone number <b>" . $phone_number . "</b> existed: " .
            $existing_flags[1] . "<br/>";

        $message = $message . "Device ID <b>" . $device_id . "</b> existed: " .
            $existing_flags[0] . "<br/>";

        $message = $message . "Phone number & Dev Id combination existed:" .
            $existing_flags[2] . "<br/>";

        $this->sendMail($subject, $message, false);
    }

    function getservice($services) {
        $service_id = $this->apis->getservice_id($services);
        print_r($service_id);
    }


    function sendCancellationMails($user, $booking) {
        log_message('info', __METHOD__);

        //User details
        $name = $user['name'];
        $user_email = $user['user_email'];
        $phone_number = $user['phone_number'];
        log_message('info', "Name: " . $name . ", Email: " . $user_email . ", Phone: " . $phone_number);

        //Booking details
        $service_id = $booking['service_id'];
        $services = $this->apis->getServiceById($service_id);
        $service_name = $services[0]['services'];

        $booking_id = $booking['booking_id'];
        $booking_date = $booking['booking_date'];
        $booking_time = $booking['booking_timeslot'];
        $units_saved = 1;
        $booking_address = $booking['booking_address'];
        $booking_pincode = $booking['booking_pincode'];
        $amount_due = $booking['amount_due'];
        $cancellation_reason = $booking['cancellation_reason'];

        log_message('info', print_r($booking, TRUE));

        //TEMP: Need to use template for sending email to user
        $user_email = DEVELOPER_EMAIL.', booking@247around.com';

        $subject = "Booking Cancellation from 247Around";

        $message = "Dear $name ($phone_number),<br/><br/>Booking with below details stands cancelled as per your request:<br/>";
        $message .= "Booking ID: " . $booking_id . "<br/>";
        $message .= "Appliance: " . $service_name . "<br/>";
        $message .= "Booking Date: " . $booking_date . ", Time: " . $booking_time . "<br/>";
        $message .= "Number of Appliances: " . $units_saved . "<br/>";
        $message .= "Booking address / pincode: " . $booking_address . " / " . $booking_pincode . "<br/>";
        $message .= "Total amount due: Rs. " . $amount_due . "<br/>";

        $message .= "<br/>Cancellation reason " . $cancellation_reason . "<br/>";

        log_message('info', "Booking message: " . $message);

        $this->sendBookingMailToUser($user_email, $subject, $message, "", FALSE);
    }

    function sendRescheduleMails($user, $booking) {
        log_message('info', __METHOD__);

        //User details
        $name = $user['name'];
        $user_email = $user['user_email'];
        $phone_number = $user['phone_number'];
        log_message('info', "Name: " . $name . ", Email: " . $user_email . ", Phone: " . $phone_number);

        //Booking details
        $service_id = $booking['service_id'];
        $services = $this->apis->getServiceById($service_id);
        $service_name = $services[0]['services'];

        $booking_id = $booking['booking_id'];
        $booking_date = $booking['booking_date'];
        $booking_time = $booking['booking_timeslot'];
        $units_saved = $booking['quantity'];
        $booking_address = $booking['booking_address'];
        $booking_pincode = $booking['booking_pincode'];
        $amount_due = $booking['amount_due'];

        log_message('info', print_r($booking, TRUE));

        //TEMP: Need to use template for sending email to user
        $user_email = DEVELOPER_EMAIL.', booking@247around.com';

        $subject = "Booking Rescheduling from 247Around";

        $message = "Dear $name ($phone_number),<br/><br/>Booking with below details stands rescheduled as per your request:<br/>";
        $message .= "Booking ID: " . $booking_id . "<br/>";
        $message .= "Appliance: " . $service_name . "<br/>";
        $message .= "New Booking Date: " . $booking_date . ", New Time: " . $booking_time . "<br/>";
        $message .= "Number of Appliances: " . $units_saved . "<br/>";
        $message .= "Booking address / pincode: " . $booking_address . " / " . $booking_pincode . "<br/>";
        $message .= "Total amount due: Rs. " . $amount_due . "<br/>";

        log_message('info', "Booking message: " . $message);

        $this->sendBookingMailToUser($user_email, $subject, $message, "", FALSE);
       
        $this->notify->insert_state_change($booking_id, _247AROUND_RESCHEDULED, _247AROUND_PENDING, "Booking Rescheduled By Customer From App", 
               _247AROUND_DEFAULT_AGENT, "247Around", ACTOR_RESCHEDULED_BY_CUSTOMER,RESCHEDULED_BY_CUSTOMER_NEXT_ACTION,_247AROUND);
    }
    
    /**
     * @input: void
     *
     * @description: This function gets called through the Exotel Missed call App Passthru Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/pass_through_android_app
     * Through the $route['pass-through-android-app'] = 'api/pass_through_android_app'; mechanism defined in routes.php,
     * call reaches to this function below which fetches information passed while making a call to
     * this URL and stores all details in the boloaaka.passthru_misscall_log table (function
     * apis->insertPassthruCall($callDetails)).
     * This table is checked again and again in processUserVerificationCode() to see if valid entry
     * is there or not. Once the entry is found, it is parsed and appropriate code is returned.
     *
     * After saving call details, it marks the calling no as Verified in DB only if call was made
     * to app verification no 30017601 and set 200 OK in header.
     *
     * @output: None
     */
    public function pass_through_android_app() {
        //log_message('info', "Entering: " . __METHOD__);
        if($this->input->post()){
            $callDetails = $this->input->post();
        }
        else{
            $activity = array('activity' => 'process exotel request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
            $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
            $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
            $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
            $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
            $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
            $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
            $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
            $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
            $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
            $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
            $callDetails['create_date'] = null;
        }

        //var_dump($apiDetails);
        //insert in database
        $this->apis->insertPassthruCall($callDetails);

        //fetches only the 10 digits of the mobile no without the country code
        $num = substr($callDetails['from_number'], '-10');
        //var_dump($num);

    //User could give missed call on 01139585684 to verify the App

    if ($callDetails['To'] == ANDROID_APP_MISSED_CALLED_NUMBER || $callDetails['To'] == ANDROID_APP_MISSED_CALLED_NUMBER_KNOWLARITY) {
        //verify user phone no first
        $this->apis->verifyUserNumber($num);
            
        //Adding details in Log File
        log_message('info', __FUNCTION__ . ' Missed call given by customer from 247AROUND App - Number: ' . $num);
    }

        $this->output->set_header("HTTP/1.1 200 OK");
    }
    
    

    function getEngineerHomeScreen(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"])) {
            $select = "count(distinct(booking_details.booking_id)) as bookings";
            $slot_select = 'distinct(booking_details.booking_id), booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type, booking_details.booking_remarks,'
                    . 'booking_pincode, booking_primary_contact_no, booking_details.booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, booking_details.service_id, '
                    . 'booking_details.create_date, symptom.symptom';
            $missed_bookings_count = $this->getMissedBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            $tommorow_bookings_count = $this->getTommorowBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            $morning_slot_bookings = $this->getTodaysSlotBookingList($slot_select, TIMESLOT_10AM_TO_1PM, $requestData["service_center_id"], $requestData["engineer_id"], $requestData["engineer_pincode"]);
            $noon_slot_bookings = $this->getTodaysSlotBookingList($slot_select, TIMESLOT_1PM_TO_4PM, $requestData["service_center_id"], $requestData["engineer_id"], $requestData["engineer_pincode"]);
            $evening_slot_bookings = $this->getTodaysSlotBookingList($slot_select, TIMESLOT_4PM_TO_7PM, $requestData["service_center_id"], $requestData["engineer_id"], $requestData["engineer_pincode"]);
            $en_rating = $this->engineer_model->get_engineer_rating($requestData["engineer_id"], $requestData["service_center_id"])[0];
            $en_D0_data = $this->engineer_model->get_engineer_D0_closure($requestData["engineer_id"], $requestData["service_center_id"]);
            if(!empty($en_D0_data)){
                if($en_D0_data[0]['total_closure']>0){
                    $D0 = round(($en_D0_data[0]['same_day_closure']*100)/$en_D0_data[0]['total_closure']);
                }
                else{
                    $D0 = 0;
                }
            }
            else{
                $D0 = 0;
            }
            if(!$en_rating['rating']){
                $rating = 0;
            }
            else{
                $rating = $en_rating['rating'];
            }
            
            $response['missedBookingsCount'] = $missed_bookings_count[0]['bookings'];
            $response['tomorrowBookingsCount'] = $tommorow_bookings_count[0]['bookings'];
            $response['todayMorningBooking'] = $morning_slot_bookings;
            $response['todayAfternoonBooking'] = $noon_slot_bookings;
            $response['todayEveningBooking'] = $evening_slot_bookings;
            $response['rating'] = $rating;
            $response['same_day_closure'] = $D0;
            
            log_message("info", __METHOD__ . "Bookings Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0022', 'Booking ID Not Found'));
        }
    }
    
    function getMissedBookingList($select, $service_center_id, $engineer_id){ 
            $missed_where = array(
                        "assigned_vendor_id" => $service_center_id,
                        "assigned_engineer_id" => $engineer_id,
                        "engineer_booking_action.internal_status != '"._247AROUND_CANCELLED."'" => NULL,
                        "engineer_booking_action.internal_status != '"._247AROUND_COMPLETED."'" => NULL,
                        "service_center_booking_action.current_status = '"._247AROUND_PENDING."'" => NULL,
                        "(booking_details.current_status = '"._247AROUND_PENDING."' OR booking_details.current_status = '"._247AROUND_RESCHEDULED."')" => NULL
                    );
            $missed_slots = $this->apis->getMissedBookingSlots();
            if($missed_slots){
                if(count($missed_slots) == "1"){
                    $missed_where["((DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) > 0) OR  ( (DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) = 0) AND booking_details.booking_timeslot = '".$missed_slots[0]."'))"] = NULL;
                }
                if(count($missed_slots) == "2"){
                    $missed_where["((DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) > 0) OR  ( (DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) = 0) AND (booking_details.booking_timeslot = '".$missed_slots[0]."' OR booking_details.booking_timeslot = '".$missed_slots[1]."')))"] = NULL;
                }
            }
            else{
                $missed_where["(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) > 0)"] = NULL;
            }
            $missed_bookings = $this->engineer_model->get_engineer_booking_details($select, $missed_where, true, true, true, false, false, false, true);
            return $missed_bookings;
    }
    
    function getTommorowBookingList($select, $service_center_id, $engineer_id){
        log_message("info", __METHOD__. " Entering..");
        $where = array(
                    "assigned_vendor_id" => $service_center_id,
                    "assigned_engineer_id" => $engineer_id,
                    "engineer_booking_action.internal_status != '"._247AROUND_CANCELLED."'" => NULL,
                    "engineer_booking_action.internal_status != '"._247AROUND_COMPLETED."'" => NULL,
                    "service_center_booking_action.current_status = '"._247AROUND_PENDING."'" => NULL,
                    "(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) = -1)" => NULL,
                    "(booking_details.current_status = '"._247AROUND_PENDING."' OR booking_details.current_status = '"._247AROUND_RESCHEDULED."')" => NULL
                );
        $tommorow_bookings = $this->engineer_model->get_engineer_booking_details($select, $where, true, true, true, false, false, false, true);
        return $tommorow_bookings;
    }
    
    function getTodaysSlotBookingList($select, $slot, $service_center_id, $engineer_id, $engineer_pincode=""){
        log_message("info", __METHOD__. " Entering..");
        $where = array(
                    "assigned_vendor_id" => $service_center_id,
                    "assigned_engineer_id" => $engineer_id,
                    "booking_details.booking_timeslot" => $slot,
                    "engineer_booking_action.internal_status != '"._247AROUND_CANCELLED."'" => NULL,
                    "engineer_booking_action.internal_status != '"._247AROUND_COMPLETED."'" => NULL,
                    "(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_details.booking_date, '%d-%m-%Y')) = 0)" => NULL,
                    "service_center_booking_action.current_status = '"._247AROUND_PENDING."'" => NULL,
                    "(booking_details.current_status = '"._247AROUND_PENDING."' OR booking_details.current_status = '"._247AROUND_RESCHEDULED."')" => NULL
                );
        $bookings = $this->engineer_model->get_engineer_booking_details($select, $where, true, true, true, false, false, false, true);
        if($engineer_pincode){
            foreach ($bookings as $key => $value) {
                if($engineer_pincode){
                    $distance_details = $this->upcountry_model->calculate_distance_between_pincode($engineer_pincode, "", $value['booking_pincode'], "");
                    $distance_array = explode(" ",$distance_details['distance']['text']);
                    $distance = sprintf ("%.2f", str_pad($distance_array[0], 2, "0", STR_PAD_LEFT));
                    $bookings[$key]['booking_distance'] = $distance;
                }
            }
        }
        return $bookings;
    }
    
    function getMissedBookings(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"])) {
            $select = "distinct(booking_details.booking_id), booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type, booking_details.booking_remarks,"
                    . "booking_pincode, booking_primary_contact_no, booking_details.booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, booking_details.service_id, booking_details.create_date,"
                    . "symptom.symptom";
            $missed_bookings = $this->getMissedBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            foreach ($missed_bookings as $key => $value) {
                if($requestData['engineer_pincode']){
                    $distance_details = $this->upcountry_model->calculate_distance_between_pincode($requestData['engineer_pincode'], "", $value['booking_pincode'], "");
                    $distance_array = explode(" ",$distance_details['distance']['text']);
                    $distance = sprintf ("%.2f", str_pad($distance_array[0], 2, "0", STR_PAD_LEFT));
                    $missed_bookings[$key]['booking_distance'] = $distance;
                }
            }
            $response['missedBooking'] = $missed_bookings;
            log_message("info", __METHOD__ . "Missed Bookings Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0023', 'Engineer ID or Service Center Id not found'));
        }
    }
    
    function getTommorowBookings(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"])) {
            $select = "distinct(booking_details.booking_id), booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type, booking_details.booking_remarks, "
                    . "booking_pincode, booking_primary_contact_no, booking_details.booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, "
                    . "booking_details.service_id, booking_details.create_date, symptom.symptom";
            $tomorrowBooking = $this->getTommorowBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            foreach ($tomorrowBooking as $key => $value) {
                if($requestData['engineer_pincode']){
                    $distance_details = $this->upcountry_model->calculate_distance_between_pincode($requestData['engineer_pincode'], "", $value['booking_pincode'], "");
                    $distance_array = explode(" ",$distance_details['distance']['text']);
                    $distance = sprintf ("%.2f", str_pad($distance_array[0], 2, "0", STR_PAD_LEFT));
                    $tomorrowBooking[$key]['booking_distance'] = $distance;
                }
            }
            $response['tomorrowBooking'] = $tomorrowBooking; 
            log_message("info", __METHOD__ . "Tommorow Bookings Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0024', 'Engineer ID or Service Center Id not found'));
        }
    }
    
    function getEngineerBookingsByStatus(){  
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"]) && !empty($requestData["booking_status"])) {
            if($requestData["booking_status"] == _247AROUND_CANCELLED || $requestData["booking_status"] == _247AROUND_COMPLETED){
                $select = "distinct(booking_details.booking_id), booking_details.booking_date, users.name, booking_details.request_type, booking_details.amount_due, "
                        . "engineer_booking_action.amount_paid, CAST(engineer_booking_action.closed_date AS date) as closed_date";
                $where = array(
                    "assigned_vendor_id" => $requestData["service_center_id"],
                    "assigned_engineer_id" => $requestData["engineer_id"],
                );

                if($requestData["booking_status"] == _247AROUND_CANCELLED){
                    $where["engineer_booking_action.internal_status = '"._247AROUND_CANCELLED."'"] = NULL;
                    $where["engineer_booking_action.booking_id in (select DISTINCT booking_id from engineer_booking_action group by booking_id having count(DISTINCT internal_status)=1)"] = NULL;
                }
                else{
                    $where["engineer_booking_action.internal_status = '"._247AROUND_COMPLETED."'"] = NULL;
                }
               
                $response['cancelledBookings'] = $this->engineer_model->get_engineer_booking_details($select, $where, true, false, false, false, false, false);
               
                if(!empty($response['cancelledBookings'])){
                    log_message("info", __METHOD__ . "Bookings Found Successfully");
                    $this->jsonResponseString['response'] = $response;
                    $this->sendJsonResponse(array('0000', 'success'));
                }
                else{
                    log_message("info", __METHOD__ . "Bookings not found");
                    $this->sendJsonResponse(array('0025', 'Bookings not found'));
                }
            }
            else{
                log_message("info", __METHOD__ . "Incorrect Booking Status");
                $this->sendJsonResponse(array('0025', 'Incorrect Booking Status'));
            }
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0026', 'Engineer ID Not Found or Service Center Id or Booking Status Not found'));
        }
    }
    
    function getTechSupport(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["booking_id"])) {
            $tech_support = $this->apis->techSupportNumberForEngineer($requestData["booking_id"]);
            if(!empty($tech_support)){
                $response = $tech_support[0];
                log_message("info", __METHOD__ . "Tech Support Numbers Founded Successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Booking Id not found".$requestData["booking_id"]);
            $this->sendJsonResponse(array('0027', 'Support Details not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found".$requestData["booking_id"]);
            $this->sendJsonResponse(array('0028', 'Booking id not found'));
        }
    }
    
    function getEngineerHeplingDocuments(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $pdf_docs = array();
        $video_docs = array();
        $other_docs = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["booking_id"])) {
            $documets =  $this->service_centers_model->get_collateral_for_service_center_bookings($requestData["booking_id"]);
            $i = 0;
            foreach ($documets as $key => $value) {
                if($value['document_type'] == "pdf"){
                    $pdf['document_type'] = $value['document_type'];
                    $pdf['document_description'] = $value['document_description'];
                    $pdf['file'] = "https://s3.amazonaws.com/bookings-collateral/vendor-partner-docs/".$value['file'];
                    array_push($pdf_docs, $pdf);
                }
                else if($value['document_type'] == "video"){
                    $video['document_type'] = $value['document_type'];
                    $video['document_description'] = $value['document_description'];
                    $video['file'] = "https://s3.amazonaws.com/bookings-collateral/vendor-partner-docs/".$value['file'];
                    array_push($video_docs, $video);
                }
                else{
                    $others['document_type'] = $value['document_type'];
                    $others['document_description'] = $value['document_description'];
                    $others['file'] = "https://s3.amazonaws.com/bookings-collateral/vendor-partner-docs/".$value['file'];
                    array_push($other_docs, $others);
                }
                $i++;
            }
            
            $response['pdf'] = $pdf_docs;
            $response['video'] = $video_docs;
            $response['others'] = $other_docs;
            
            log_message("info", __METHOD__ . "Helping Documents Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found - ".$requestData["booking_id"]);
            $this->sendJsonResponse(array('0029', 'Booking Id not found'));
        }
    }
    
    function getEngineerProfile(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["engineer_id"])) {
            $eng_profile =  $this->engineer_model->engineer_profile_data($requestData['engineer_id']);
            if(!empty($eng_profile)){
                $response = $eng_profile[0];
                log_message("info", __METHOD__ . "Enngineer Profile Found Successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Engineer Profile not found - ".$requestData["engineer_id"]);
                $this->sendJsonResponse(array('0030', 'Engineer Profile not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Engineer id not found - ".$requestData["engineer_id"]);
            $this->sendJsonResponse(array('0031', 'Engineer Id not found'));
        }
    }
    
    function getEngineerSparePartOrder(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["partner_id"]) && !empty($requestData["service_id"])) {
            $where = array('entity_id' => $requestData['partner_id'], 'entity_type' => _247AROUND_PARTNER_STRING, 'service_id' => $requestData['service_id'], 'inventory_model_mapping.active' => 1,'appliance_model_details.active' => 1);
            $model_detail = $this->inventory_model->get_inventory_mapped_model_numbers('appliance_model_details.id,appliance_model_details.model_number',$where);
            if(!empty($model_detail)){
                $response['sparePartsOrder']['modelNumberList'] = $model_detail;
                $response['sparePartsOrder']['getPartOnModel'] = true;
            }
            else{
                $where = array('entity_id' => $requestData['partner_id'], 'entity_type' => _247AROUND_PARTNER_STRING, 'service_id' => $requestData['service_id'], 'active' => 1 );
                $model_detail =  $this->inventory_model->get_appliance_model_details('id, model_number', $where);
                $response['sparePartsOrder']['modelNumberList'] = $model_detail;
                
                $parts_type_details = $this->inventory_model->get_inventory_parts_type_details('inventory_parts_type.part_type', array('inventory_parts_type.service_id' => $requestData['service_id']), FALSE);
                $response['sparePartsOrder']['partTypeList'] = $parts_type_details;
                $response['sparePartsOrder']['getPartOnModel'] = false;
            }
            
            if(isset($requestData["booking_id"])){
                $spare_select = 'spare_parts_details.serial_number, '
                        . 'CONCAT("https://s3.amazonaws.com/'.BITBUCKET_DIRECTORY.'/misc-images/", spare_parts_details.invoice_pic) as invoice_pic, '
                        . 'CONCAT("https://s3.amazonaws.com/'.BITBUCKET_DIRECTORY.'/'.SERIAL_NUMBER_PIC_DIR.'/", spare_parts_details.serial_number_pic) as serial_number_pic';
                $spare_details = $this->partner_model->get_spare_parts_by_any($spare_select, array('booking_id' => $requestData["booking_id"]));
                if(!empty($spare_details)){
                    $response['sparePartsOrder']['spare_parts'] = $spare_details[0];
                }
            }
            
            log_message("info", __METHOD__ . "Model Number or Part Type found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Partner Id not found - ".$requestData["partner_id"]." OR Service Id not found ".$requestData["service_id"]);
            $this->sendJsonResponse(array('0032', 'Partner Id or Service Id not found'));
        }
    }
    
    function getPartTypeOnModelNumber(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData["model_number_id"])) {
            $response['partTypeList'] = $this->inventory_model->get_inventory_model_mapping_data('inventory_master_list.type as part_type', array('model_number_id' => $requestData["model_number_id"], 'inventory_model_mapping.active' => 1, 'inventory_model_mapping.bom_main_part' => 1));
            log_message("info", __METHOD__ . "Part Type found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Model Number Id not found - ".$requestData["model_number_id"]);
            $this->sendJsonResponse(array('0033', 'Model Number Id not found'));
        }
    }
    
    function getSparePartName(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData["part_type"]) && !empty($requestData["partner_id"]) && !empty($requestData["service_id"])) {
            $where = array();
            if (!empty($requestData["model_number_id"])) {
                $where['model_number_id'] = $requestData["model_number_id"];
            }

            if (!empty($requestData["part_type"])) {
                $where['type'] = $requestData["part_type"];
            }

            $where['inventory_master_list.service_id'] = $requestData['service_id'];
            $where['inventory_master_list.entity_id'] = $requestData['partner_id'];
            $where['inventory_master_list.entity_type'] = _247AROUND_PARTNER_STRING;
            $where['inventory_model_mapping.active'] = 1;
            $where['inventory_model_mapping.bom_main_part'] = 1;
            $select = "inventory_master_list.part_name, inventory_master_list.inventory_id, inventory_model_mapping.max_quantity, inventory_master_list.part_number, CAST((price + (price*gst_rate/100) + (price*oow_around_margin/100) + (price*oow_vendor_margin/100)) as decimal(10,2)) as amount";
            $response = $this->inventory_model->get_inventory_model_mapping_data($select, $where);
            log_message("info", __METHOD__ . "Spare Part Name found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
            
        }
        else{
            log_message("info", __METHOD__ . "Part Type not found - ".$requestData["part_type"]." or Partner Id not found - ".$requestData["partner_id"]." or Service Id not found -".$requestData["service_id"]);
            $this->sendJsonResponse(array('0034', 'Part Type or Partner Id or Service Id not found'));
        }
    }
    
    function processSubmitSparePartsOrder(){ 
        log_message("info", __METHOD__. " Entering..");
        $postData = json_decode($this->jsonRequestData['qsh'], true);
        $requestData = json_decode($postData['submitSparePartsOrder'], true);
        $requestData["call_from_api"] = TRUE;
        $validation = $this->validateSparePartsOrderRequest($requestData);
        if($validation['status']){ 
            /*Check part warranty status*/
            $bookingDetails = $this->reusable_model->get_search_query("booking_details", "request_type", array("booking_id" => $requestData['booking_id']), false, false, false, false, false)->result_array();
            foreach ($requestData['part'] as $key => $value){
                if(strpos($bookingDetails[0]['request_type'],'Out Of Warranty') == true || strpos($bookingDetails[0]['request_type'],'Gas Recharge - Out') == true ){
                    $requestData['part'][$key]['part_warranty_status'] = 2;
                }else{
                    $requestData['part'][$key]['part_warranty_status'] = 1;
                }
                //upload defective front part pic
                if($value["defective_front_parts"]){
                    $defective_part_pic = "Defective_Parts_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($value["defective_front_parts"], $defective_part_pic, "misc-images");
                    $requestData['part'][$key]['defective_parts'] = $defective_part_pic;
                }
                
                //upload defective back part pick
                if($value["defective_back_parts"]){
                    $defective_back_part_pic = "Defective_Parts_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($value["defective_back_parts"], $defective_back_part_pic, "misc-images");
                    $requestData['part'][$key]['defective_back_parts_pic'] = $defective_back_part_pic;
                }
            }
        
        
            if(isset($requestData['serial_number_pic_exist'])){
                if($requestData['serial_number_pic_exist']){
                    $serial_number_pic = "serial_number_pic_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($requestData['serial_number_pic_exist'], $serial_number_pic, SERIAL_NUMBER_PIC_DIR);
                    $requestData['serial_number_pic'] = $serial_number_pic;
                }
            }
            else{
                if(isset($requestData['existing_serial_number_pic'])){
                    if($requestData['existing_serial_number_pic']){
                        $serial_number_pic = "serial_number_pic_".date("YmdHis").".png";
                        $this->miscelleneous->generate_image($requestData['existing_serial_number_pic'], $serial_number_pic, SERIAL_NUMBER_PIC_DIR);
                        $requestData['serial_number_pic'] = $serial_number_pic;
                    }
                }
            }

            if(isset($requestData['invoice_number_pic_exist'])){
                if($requestData['invoice_number_pic_exist']){
                    $invoice_pic = "invoice_".$requestData['booking_id']."_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($requestData['invoice_number_pic_exist'], $invoice_pic, "misc-images");
                    $requestData['invoice_pic'] = $invoice_pic;
                }
            }
            else{
                if($requestData['existing_purchase_invoice']){
                    $invoice_pic = "invoice_".$requestData['booking_id']."_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($requestData['existing_purchase_invoice'], $invoice_pic, "misc-images");
                    $requestData['invoice_pic'] = $invoice_pic;
                }
            }
            
            //Call curl for updating spare parts using code from where service center ask for spare parts
            $url = base_url()."employee/service_centers/update_spare_parts"; 
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($requestData));
            $curl_response = curl_exec($ch);
            curl_close($ch);
            if($curl_response){
                log_message("info", __METHOD__ . "Part  Updated successfully");
                $this->jsonResponseString['response'] = "Booking Updated Successfully";
                $this->sendJsonResponse(array('0000', 'success'));
            }
            /*
            $response = json_decode($curl_response);
            if($response->status){
                log_message("info", __METHOD__ . "Part  Updated successfully");
                $this->jsonResponseString['response'] = $response->message;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Part Not Updated Error - ".$response->message);
                $this->sendJsonResponse(array('0035', $response->message));
            }
            */
        }
        else{
            log_message("info", __METHOD__ . "Request validation failed ".$validation['message']);
            $this->sendJsonResponse(array('0036', $validation['message']));
        }
    }
    
    function validateSparePartsOrderRequest($requestData){
        $response = array();
        $response['status'] = false;
        if(!isset($requestData['booking_id'])){
            $response['message'] = "Booking id not found!";
        }
        else if(!isset($requestData['amount_due'])){
            $response['message'] = "Amount Due not found";
        }
        else if(!isset($requestData['partner_id'])){
            $response['message'] = "Partner Id not found";
        }
        else if(!isset($requestData['price_tags'])){
            $response['message'] = "Request Type not found";
        }
        else if(!isset($requestData['partner_flag'])){
            $response['message'] = "Partner Flag not found";
        }
        else if(!isset($requestData['spare_shipped'])){
            $response['message'] = "Shipped Spare not found";
        }
        else if(!isset($requestData['reason'])){
            $response['message'] = "Spare Remarks not found";
        }
        else if(!isset($requestData['days'])){
            $response['message'] = "Days not found";
        }
        /*
        else if(!isset($requestData['model_number_id'])){
            $response['message'] = "Model Number Id not found";
        }
         * 
         */
        else if(!isset($requestData['model_number'])){
            $response['message'] = "Model Number not found";
        }
        else if(!isset($requestData['dop'])){
            $response['message'] = "Date of purchase not found";
        }
        else if(!isset($requestData['serial_number'])){
            $response['message'] = "Serial Number not found";
        }
        else if(!isset($requestData['service_center_id'])){
            $response['message'] = "Service Center Id not found";
        }
        else if(!isset($requestData['part'])){
            $response['message'] = "Parts Array not found";
        }
        else if(isset($requestData['part'])){
           
            $check = true;
            $missing_key = "";
            $keys = array("part_warranty_status", "parts_type", "parts_name", "quantity", "requested_inventory_id");
            foreach($requestData['part'] as $parts){
                foreach ($keys as $key){
                    if (!array_key_exists($key, $parts)){ 
                        $check = false;
                        $missing_key = "Part array key missing - ".$key;
                    }
                }
            }
            if($check){
                $response['status'] = true;
                $response['message'] = "success";
            }
            else{
                $response['message'] = $missing_key;
            }
        }
        else{
            $response['status'] = true;
            $response['message'] = "success";
        }
        
        return $response;
    }
    
     function getSymptomCompleteBooking(){ 
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $response['defect'] = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        
        if(!empty($requestData["booking_id"]) && !empty($requestData["service_id"]) && !empty($requestData["partner_id"])){
            $bookingDetails = $this->reusable_model->get_search_query("booking_details", "request_type", array("booking_id" => $requestData['booking_id']), false, false, false, false, false)->result_array();
            $response['booking_symptom'] = $this->booking_model->getBookingSymptom($requestData["booking_id"]);
            $price_tags = str_replace('(Free)', '', $bookingDetails[0]['request_type']);
            $price_tags1 = str_replace('(Paid)', '', $price_tags);
            
            $symptom_id = null;
            if(count($response['booking_symptom'])>0) {
                $symptom_id = ((!is_null($response['booking_symptom'][0]['symptom_id_booking_completion_time'])) ? $response['booking_symptom'][0]['symptom_id_booking_completion_time'] : $response['booking_symptom'][0]['symptom_id_booking_creation_time']);
            }
            
            $where = array(
                'symptom.service_id' => $requestData["service_id"], 
                'symptom.active' => 1, 
                'symptom.partner_id' => $requestData["partner_id"]
            );
            $where_in = array(
                'request_type.service_category' => $price_tags1
            );
            $response['symptoms'] = $this->booking_request_model->get_booking_request_symptom('symptom.id, symptom', $where, $where_in);
            if((count($response['symptoms']) <= 0) || (is_null($symptom_id))) {
                $response['symptoms'][0] = array('id' => 0, 'symptom' => 'Default');
            }
            
            if($symptom_id !== "") {
                $defect_where = array(
                    'symptom_id' => $symptom_id,
                    'partner_id' => $requestData["partner_id"]
                );
                $response['defect'] = $this->booking_request_model->get_defect_of_symptom('defect_id,defect', $defect_where);
            }
            if(count($response['defect']) <= 0) {
                $response['defect'][0] = array('defect_id' => 0, 'defect' => 'Default');
            }
            
            if(!empty($response['symptoms']) || !empty($response['defect'])){
                log_message("info", __METHOD__ . "Symptoms or Defects found successfully successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Symptom or Defects not found");
                $this->sendJsonResponse(array('0037', 'Symptom not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Service Id - ".$requestData["service_id"]." or Partner Id - ".$requestData["partner_id"]." or Request Type - ".$bookingDetails[0]['request_type']." not found");
            $this->sendJsonResponse(array('0037', 'Booking Id or Service Id or Partner Id or Request Type not found'));
        }
    }
    
    function getDefectCompleteBooking(){ 
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(isset($requestData["technical_problem"])){
            $response = $this->booking_request_model->get_defect_of_symptom('defect_id,defect', array('symptom_id' => $requestData['technical_problem']));
            if(count($response)<=0) {
                array_push($response, array('defect_id' => 0, 'defect' => 'Default'));
            }
            if(!empty($response)){
                log_message("info", __METHOD__ . "Defects found successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Defects not found");
                $this->sendJsonResponse(array('0038', 'Defects not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . " ");
            $this->sendJsonResponse(array('0039', 'Technical Problem not found'));
        }
    }
    
    function getSolutionCompleteBooking(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(isset($requestData["technical_symptom"]) && isset($requestData["technical_defect"])){
            $response = $this->booking_request_model->get_solution_of_symptom('solution_id,technical_solution', array('symptom_id' => $requestData["technical_symptom"], 'defect_id' => $requestData["technical_defect"]));
            if(count($response)<=0) {
                array_push($response, array('solution_id' => 0, 'technical_solution' => 'Default'));
            }
            if(!empty($response)){
                log_message("info", __METHOD__ . "Solution found successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Solution not found");
                $this->sendJsonResponse(array('0040', 'Solution not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Technical Problem or Defect not found");
            $this->sendJsonResponse(array('0041', 'Technical Problem or Defect not found'));
        }
    }
    
    function getBookingProductDetails(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $final_parices = array();
        $bookng_unit_details = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData["booking_id"]) && !empty($requestData["brand"]) && !empty($requestData["partner_id"]) && !empty($requestData["service_id"])){
            $source = $this->partner_model->getpartner_details('bookings_sources.source, partner_type', array('bookings_sources.partner_id' => $requestData['partner_id']));
            $where = array(
                "partner_appliance_details.partner_id" => $requestData["partner_id"],
                'partner_appliance_details.service_id' => $requestData["service_id"], 
                'partner_appliance_details.brand' => $requestData["brand"], 
                'appliance_model_details.active'=> 1, 
                "NULLIF(model, '') IS NOT NULL" => NULL);
        
            $response['model_data'] = $this->partner_model->get_model_number("appliance_model_details.id, appliance_model_details.model_number", $where);
            $unit_details = $this->booking_model->getunit_details($requestData["booking_id"]);
            array_push($bookng_unit_details, $unit_details[0]);
            $response['prices'] = array();
            $price_tags = array();
            foreach ($bookng_unit_details as $key1 => $b) {

                if ($source[0]['partner_type'] == OEM) {
                    $prices = $this->booking_model->getPricesForCategoryCapacity($requestData['service_id'], $bookng_unit_details[$key1]['category'], $bookng_unit_details[$key1]['capacity'], $requestData['partner_id'], $b['brand']);
                } 
                //If partner type is not OEM then check is brand white list for partner if brand is white listed then use brands if not then 
                else {
                    $isWbrand = "";
                    $whiteListBrand = $this->partner_model->get_partner_blocklist_brand(array("partner_id" => $requestData['partner_id'], "brand" => $b['brand'],"service_id" => $requestData['service_id'], "whitelist" => 1), "*");
                    if(!empty($whiteListBrand)){
                        $isWbrand = $b['brand'];
                    }
                    $prices = $this->booking_model->getPricesForCategoryCapacity($requestData['service_id'], $bookng_unit_details[$key1]['category'], $bookng_unit_details[$key1]['capacity'], $requestData['partner_id'], $isWbrand);
                }

                $broken = 0;
                foreach ($b['quantity'] as $key2 => $u) {
                    $price_tags1 = str_replace('(Free)', '', $u['price_tags']);
                    $price_tags2 = str_replace('(Paid)', '', $price_tags1);
                    array_push($price_tags, $price_tags2);
                    $pid = $this->miscelleneous->search_for_pice_tag_key($u['price_tags'], $prices);
                    

                    $unitWhere = array("engineer_booking_action.booking_id" => $requestData['booking_id'],
                        "engineer_booking_action.unit_details_id" => $u['unit_id'], "service_center_id" => $requestData['service_center_id']);
                    $en = $this->engineer_model->getengineer_action_data("engineer_booking_action.*", $unitWhere);
                    if (!empty($en)) {
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_serial_number'] = $en[0]['serial_number'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_serial_number_pic'] = $en[0]['serial_number_pic'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_is_broken'] = $en[0]['is_broken'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_internal_status'] = $en[0]['internal_status'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_purchase_date'] = $en[0]['sf_purchase_date'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_model_number'] =  $en[0]['model_number'];
                        if ($en[0]['is_broken'] == 1) {
                            $broken = 1;
                        }
                    }
                
                    // remove array key, if price tag exist into price array
                    unset($prices[$pid]);

                }
                
                foreach ($prices as $key3 => $value3){
                    array_push($final_parices, $value3);
                }
                
                $response['prices'] = $final_parices;
                $bookng_unit_details[$key1]['is_broken'] = $broken;
                $bookng_unit_details[$key1]['dop'] = $broken;
            }
            $spare_select = 'spare_parts_details.model_number, spare_parts_details.date_of_purchase, spare_parts_details.serial_number, '
                    . 'CONCAT("https://s3.amazonaws.com/'.BITBUCKET_DIRECTORY.'/misc-images/", spare_parts_details.invoice_pic) as invoice_pic, '
                    . 'CONCAT("https://s3.amazonaws.com/'.BITBUCKET_DIRECTORY.'/'.SERIAL_NUMBER_PIC_DIR.'/", spare_parts_details.serial_number_pic) as serial_number_pic';
            $spare_details = $this->partner_model->get_spare_parts_by_any($spare_select, array('booking_id' => $requestData["booking_id"]));
            
            if(!empty($spare_details)){
                $response['spare_parts'] = $spare_details[0];
            }
            
            $response['booking_unit_details'] = $bookng_unit_details[0];
            log_message("info", __METHOD__ . "Product details found successfully");
            
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Booking Id or Brand or Partner Id or Service Id not found");
            $this->sendJsonResponse(array('0042', 'Booking Id or Brand or Partner Id or Service Id not found'));
        }
    }
    
    function check_unit_exist_action_table($booking_id, $unit_id, $service_center_id, $engineer_id) {
        log_message("info", __METHOD__ . " Booking ID " . $booking_id . " Unit ID " . $unit_id);
        if (strpos($unit_id, 'new') !== false) {
            $remove_string_new = explode('new', $unit_id);
            $unit_tmp_id = $remove_string_new[0];
            $service_charges_id = $remove_string_new[1];
            $data['booking_id'] = $booking_id;
            $data['booking_status'] = _247AROUND_PENDING;
            $data['customer_paid_parts'] = 0;
            $data['customer_paid_basic_charges'] = 0;
            $data['customer_paid_extra_charges'] = 0;
            $data['added_by_sf'] = 1;
            log_message('info', __FUNCTION__ . " New unit selected, previous unit " . print_r($unit_id, true)
                    . " Service charges id: "
                    . print_r($service_charges_id, true)
                    . " Data: " . print_r($data, true));
            $unit_id = $this->booking_model->insert_new_unit_item($unit_tmp_id, $service_charges_id, $data, "");
            if(!empty($unit_id)){
                $engineer_action['unit_details_id'] = $unit_id;
                $engineer_action['service_center_id'] = $service_center_id;
                $engineer_action['engineer_id'] = $engineer_id;
                $engineer_action['booking_id'] = $booking_id;
                $engineer_action['current_status'] = _247AROUND_PENDING;
                $engineer_action['internal_status'] = _247AROUND_PENDING;
                $engineer_action["create_date"] = date("Y-m-d H:i:s");

                $this->engineer_model->insert_engineer_action($engineer_action);
            }
        }
           
        $data = $this->service_centers_model->get_service_center_action_details("*", array('unit_details_id' => $unit_id, "booking_id" => $booking_id));
        if (empty($data)) {
            log_message("info", __METHOD__ . " Unit is not exist for booking id " . $booking_id . " Unit ID " . $unit_id);
            $data1 = $this->service_centers_model->get_service_center_action_details("*", array("booking_id" => $booking_id));
            if (!empty($data1)) {
                $a = $data1[0];
                $a['id'] = NULL;
                $a['create_date'] = date("Y-m-d H:i:s");
                $a['unit_details_id'] = $unit_id;
                log_message("info", __METHOD__ . " data unit Insert " . print_r($a, true));
                $this->vendor_model->insert_service_center_action($a);
            }
        }
        return $unit_id;
    }
    
    function getUpdateBookingReasons(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData["booking_id"])){
            $booking_id = $requestData["booking_id"];
            $response['internal_status'] = array();
            $booking_history = $this->booking_model->getbooking_history($booking_id);
            if (!empty($booking_history)) {
                $is_est_approved = false;
                $spareShipped = false;
                $spare_shipped_flag = false;
                if (isset($booking_history['spare_parts'])) {
                    foreach ($booking_history['spare_parts'] as $sp) {
                        if ($sp['status'] == SPARE_OOW_EST_GIVEN) {
                            array_push($response['internal_status'], array("reason" => ESTIMATE_APPROVED_BY_CUSTOMER, "calender_flag"=> 0));
                            $is_est_approved = true; 
                        }

                        if(($sp['auto_acknowledeged'] == 1 || $sp['auto_acknowledeged'] == 2)&& $sp['status'] == SPARE_DELIVERED_TO_SF ){
                            $spare_shipped_flag = TRUE;
                        }

                        switch ($sp['status']){
                            case SPARE_SHIPPED_BY_PARTNER:
                            case DEFECTIVE_PARTS_PENDING:
                            case DEFECTIVE_PARTS_RECEIVED:
                            case DEFECTIVE_PARTS_REJECTED:
                            case DEFECTIVE_PARTS_SHIPPED:
                            case SPARE_DELIVERED_TO_SF: 
                               $spareShipped = TRUE;
                                break;
                        }
                    }
                }

                $current_date = date_create(date('Y-m-d'));
                $current_booking_date = date_create(date('Y-m-d', strtotime($booking_history[0]['booking_date'])));
                $date_diff = date_diff($current_date, $current_booking_date);
                if ($date_diff->days < 1) {
                    $int = $this->booking_model->get_internal_status(array("page" => "update_sc", "active" => '1'), true);
                    foreach ($int as $int_kaey => $int_value) {
                        if($int_value['status'] != ENGINEER_ON_ROUTE){
                            array_push($response['internal_status'], array("reason" => $int_value['status'], "calender_flag"=> 0));
                        }
                    }
                    $response['days'] = 0;
                }
                else if ($date_diff->days < 3) {
                    array_push($response['internal_status'], array("reason"=>CUSTOMER_NOT_REACHABLE, "calender_flag"=>0));
                    $response['days'] = $date_diff->days;
                }else {
                    if($spareShipped){
                        array_push($response['internal_status'], array("reason"=>CUSTOMER_NOT_REACHABLE, "calender_flag"=>0));
                    }
                   $response['days'] = 0;
                }

                $unit_details = $this->booking_model->get_unit_details(array('booking_id' => $booking_id));
                $spare_flag = "";
                foreach ($unit_details as $value) { 
                    if (strcasecmp($value['price_tags'], REPAIR_OOW_TAG) == 0) {
                        /*
                        if(!$is_est_approved){
                            $spare_flag = SPARE_OOW_EST_REQUESTED;
                        }
                        */
                    }

                    if (stristr($value['price_tags'], "Service Center Visit")) {
                        array_push($response['internal_status'], array("reason"=>CUSTOMER_NOT_VISTED_TO_SERVICE_CENTER, "calender_flag"=>0));
                    }
                }
                if($spare_flag){
                    array_push($response['internal_status'],array("reason"=>$spare_flag, "calender_flag"=>0));
                }
                
                if($booking_history[0]['is_upcountry'] == 1){
                    array_push($response['internal_status'], array("reason"=>RESCHEDULE_FOR_UPCOUNTRY, "calender_flag"=>1));
                }
                
                if($spare_shipped_flag){
                    array_push($response['internal_status'], array("reason"=>SPARE_PARTS_NOT_DELIVERED_TO_SF, "calender_flag"=>1)); 
                }
                array_push($response['internal_status'], array("reason"=>CUSTOMER_ASK_TO_RESCHEDULE, "calender_flag"=>1));
                array_push($response['internal_status'], array("reason"=>PRODUCT_NOT_DELIVERED_TO_CUSTOMER, "calender_flag"=>1));
                $response['spare_shipped'] = $spareShipped;
                 
                log_message("info", "Update booking reasons found successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Booking History not found");
                $this->sendJsonResponse(array('0043', 'Booking History not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found");
            $this->sendJsonResponse(array('0044', 'Booking Id not found'));
        }
    }
    
    function processUpdateBookingByEngineer(){
        log_message("info", __METHOD__. " Entering..");
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData['booking_id'])){
            if(!empty($requestData['reason'])){
                if(!empty($requestData['remark'])){
                    $postData = array(
                        "booking_id" => $requestData['booking_id'],
                        "reason" => $requestData['reason'],
                        "reason_text" => $requestData['remark'],
                        "sc_remarks" => $requestData['remark'],
                        "days" => $requestData['days'],
                        "booking_date" => $requestData['booking_date'],
                        "partner_id" => $requestData['partner_id'],
                        "service_center_id" => $requestData['service_center_id'],
                        "call_from_api" => true,
                    );
                    //Call curl for updating booking by engineer
                    $url = base_url()."employee/service_centers/process_update_booking"; 
                    $ch = curl_init($url);
                    curl_setopt($ch, CURLOPT_HEADER, false);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($ch, CURLOPT_POST, true);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));
                    $curl_response = curl_exec($ch);
                    curl_close($ch);
                    $response = json_decode($curl_response);
                    if($response->status){
                        $this->sendJsonResponse(array('0000', 'success'));
                    }
                    else{
                        $this->sendJsonResponse(array('0044', 'Error occured while updating booking'));
                    }
                }
                else{
                    log_message("info", __METHOD__ . "Update Remark not found");
                    $this->sendJsonResponse(array('0045', 'Update Remark not found'));
                }
            }
            else{
                log_message("info", __METHOD__ . "Update Reason not found");
                $this->sendJsonResponse(array('0046', 'Update Reason not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found");
            $this->sendJsonResponse(array('0047', 'Booking Id not found'));
        }
    }
    
    function getPaytmAmountByEngineer(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData['booking_id'])){
            $paytm_data = $this->paytm_payment_model->get_paytm_transactions($requestData['booking_id']);
            if(!empty($paytm_data)){
                $response['amount_flag'] = 1;
                $response['amount'] = $paytm_data[0]['paid_amount'];
                log_message("info", "Paytm transaction amount found successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                $response['amount_flag'] = 0;
                $response['amount'] = 0;
                log_message("info", "Paytm transaction amount not found");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'Amount not recieved'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found");
            $this->sendJsonResponse(array('0049', 'Booking Id not found'));
        }
    }
    
    /**
     * @desc This is used to get qr url link from App
     */
    function getCustomerQrCode() {
        log_message("info", __METHOD__. " Entering..");
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["bookingID"])) {

            $response = $this->paytm_payment_lib->generate_qr_code($requestData["bookingID"], QR_CHANNEL_APP, 
                    $requestData["amountPaid"], "");
            $result = json_decode($response, TRUE);
            if ($result['status'] == SUCCESS_STATUS) {
                $this->jsonResponseString['QrImageUrl'] = S3_WEBSITE_URL . $result['qr_url'];
                $this->sendJsonResponse(array('0000', 'success'));
            } else {
                log_message("info", __METHOD__ . " QR Failed " . print_r($result, true));
                $this->sendJsonResponse(array('0050', 'QR Not Generated'));
            }
        } else {
            log_message("info", __METHOD__ . " Booking ID Not Found " . print_r($result, true));
            $this->sendJsonResponse(array('0051', 'Booking ID Not Found'));
        }
    }
    
    function getValidateSerialNumber(){
        log_message("info", __METHOD__. " Entering..");
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if (!empty($requestData["booking_id"])) {
            if(!empty($requestData['serial_number'])){
                if(!empty($requestData['price_tags'])){
                    $booking_id = $requestData["booking_id"];
                    $booking_history = $this->booking_model->getbooking_history($booking_id);

                    $serial_number = $requestData['serial_number'];
                    $partner_id = $booking_history[0]['partner_id'];
                    $user_id = $booking_history[0]['user_id'];
                    $price_tags = $requestData['price_tags'];
                    $appliance_id = $booking_history[0]['appliance_id'];
                    $model_number = $requestData['model_number'];
                    
                    if (!ctype_alnum($serial_number)) {
                        log_message('info', "Serial Number Entered With Special Character " . $serial_number . " . This is not allowed.");
                        $this->sendJsonResponse(array('0052', 'Serial Number Entered With Special Character " . $serial_number . " . This is not allowed.'));
                    }
                    else {
                        $status = $this->validate_serial_no->validateSerialNo($partner_id, trim($serial_number), trim($price_tags), $user_id, $booking_id, $appliance_id,$model_number);
                        if (!empty($status)) {
                            if($status['code'] == SUCCESS_CODE){
                                $this->sendJsonResponse(array('0000', 'Serial Number Successfully Validated'));
                            }
                            else{
                                $this->sendJsonResponse(array('0053', $status['message']));
                            }
                        } else {
                            log_message('info',__METHOD__. 'Partner serial no validation is not define');
                            $this->sendJsonResponse(array('0000', 'Serial no validation not required'));
                        }
                    }
                }
                else{
                    log_message("info", __METHOD__ . " Price Tag Not Found ");
                    $this->sendJsonResponse(array('0054', ' Price Tag Not Found'));
                }
            }
            else{
                log_message("info", __METHOD__ . " Serial Number Not Found ");
                $this->sendJsonResponse(array('0055', ' Serial Number Not Found'));
            }
        } else {
            log_message("info", __METHOD__ . " Booking ID Not Found ");
            $this->sendJsonResponse(array('0056', 'Booking ID Not Found'));
        }
    }
    
    function warrantyChecker($booking_id, $partner_id, $booking_create_date, $model_number, $purchase_date, $booking_request_type){
        $data = array();
        $matching_flag = false;
        $arrBookings[0] = array(
            "booking_id" => $booking_id,
            "partner_id" => $partner_id,
            "booking_create_date" => $booking_create_date,
            "purchase_date" => $purchase_date,
            "model_number" => $model_number
        );
        $arrWarrantyData = $this->warranty_utilities->get_warranty_data($arrBookings);
        $arrModelWiseWarrantyData = $this->warranty_utilities->get_model_wise_warranty_data($arrWarrantyData); 
        foreach($arrBookings as $key => $arrBooking)
        {
            if(!empty($arrModelWiseWarrantyData[$arrBooking['model_number']]))
            {   
                $arrBookings[$key] = $this->warranty_utilities->map_warranty_period_to_booking($arrBooking, $arrModelWiseWarrantyData[$arrBooking['model_number']]);
            }
            $arrBookings[$arrBooking['booking_id']] = $arrBookings[$key];
            unset($arrBookings[$key]);
        }
        $arrBookingsWarrantyStatus = $this->warranty_utilities->get_bookings_warranty_status($arrBookings); 

        $arr_warranty_status = ['IW' => ['In Warranty', 'Presale Repair', 'AMC', 'Repeat', 'Installation'], 'OW' => ['Out Of Warranty', 'Out Warranty', 'AMC', 'Repeat'], 'EW' => ['Extended', 'AMC', 'Repeat']];
        $arr_warranty_status_full_names = array('IW' => 'In Warranty', 'OW' => 'Out Of Warranty', 'EW' => 'Extended Warranty');
        $warranty_checker_status = $arrBookingsWarrantyStatus[$booking_id];
        // If no data found against warranty, consider booking as of Out Warranty
        if($warranty_checker_status != 'IW' && $warranty_checker_status != 'EW'):
            $warranty_checker_status = "OW";
        endif;
        $warranty_mismatch = 0;
        $returnMessage = "";

        if(!empty($arr_warranty_status[$warranty_checker_status]))
        {
            $warranty_mismatch = 1;
            foreach($arr_warranty_status[$warranty_checker_status] as $request_types)
            {
                if(strpos(strtoupper(str_replace(" ","",$booking_request_type)), strtoupper(str_replace(" ","",$request_types))) !== false)
                {
                    $warranty_mismatch = 0;
                    break;
                }
            }
        }

        if(!empty($warranty_mismatch))
        {
            if((strpos(strtoupper(str_replace(" ","",$booking_request_type)), 'OUTOFWARRANTY') !== false))
            {
                $warranty_mismatch = 0;
                //$returnMessage = "Booking Warranty Status (".$arr_warranty_status_full_names[$warranty_checker_status].") is not matching with current request type (".$booking_request_type.") of booking, but if needed you may proceed with current request type.";
                $returnMessage = "Warranty Status is ".$arr_warranty_status_full_names[$warranty_checker_status].", But you can continue";
            }
            else
            { 
                //$returnMessage = "Booking Warranty Status (".$arr_warranty_status_full_names[$warranty_checker_status].") is not matching with current request type (".$booking_request_type."), to request part please change request type of the Booking.";
                $returnMessage = "Warranty Status is ".$arr_warranty_status_full_names[$warranty_checker_status].", Change request type";
            }   
        }
        
        $arrReturn['warranty_flag'] = $warranty_mismatch;
        $arrReturn['message'] = $returnMessage;
        return $arrReturn;
        
        
    }
    
    function getSparePartsWarrantyChecker(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $missing_key = "";
        $check = true;
        $validateKeys = array("booking_id", "partner_id", "booking_create_date", "model_number", "purchase_date", "request_type");
        foreach ($validateKeys as $key){
                if (!array_key_exists($key, $requestData)){ 
                    $check = false;
                    $missing_key = $key;
                    break;
                }
        }
        if($check){
            
            $response = $this->warrantyChecker($requestData["booking_id"], $requestData["partner_id"], $requestData["booking_create_date"], $requestData["model_number"], $requestData["purchase_date"], $requestData["request_type"]);
            
            log_message("info", "Warrenty plan found");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Warranty checker key missing - ".$missing_key);
            $this->sendJsonResponse(array("0050", "Warranty checker key missing - ".$missing_key));
        }
    }
    
    function checkSparePartsOrder(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $is_est_approved = false;
        $check_spare_flag = false;
        $est_approved_msg = "";
        if (!empty($requestData["booking_id"])) {
            $unit_details = $this->booking_model->get_unit_details(array('booking_id' => $requestData["booking_id"]));
            $data['bookinghistory'] = $this->booking_model->getbooking_history($requestData["booking_id"]);
            if(!empty($data['bookinghistory'][0])){
                if(isset($data['bookinghistory']['spare_parts'])){
                    foreach ($data['bookinghistory']['spare_parts'] as $sp) {
                        if ($sp['status'] == SPARE_OOW_EST_GIVEN) {
                            $is_est_approved = true; 
                        }
                    }
                }
                foreach ($unit_details as $value) {
                    if (strcasecmp($value['price_tags'], REPAIR_OOW_TAG) == 0) {
                        if(!$is_est_approved){
                           $check_spare_flag = true;
                        }
                        else{
                            $est_approved_msg = "Spare estimate cost given. Please update Approved by customer and then order spare part";  
                        }
                    } else if (stristr($value['price_tags'], "Repair") 
                            || stristr($value['price_tags'], "Repeat")
                            || stristr($value['price_tags'], EXTENDED_WARRANTY_TAG) 
                            || stristr($value['price_tags'], PRESALE_REPAIR_TAG)
                            || stristr($value['price_tags'], GAS_RECHARGE_IN_WARRANTY)
                            || stristr($value['price_tags'], AMC_PRICE_TAGS)
                            || stristr($value['price_tags'], GAS_RECHARGE_OUT_OF_WARRANTY)) {
                        
                        $check_spare_flag = true;
                    }
                }
                if($check_spare_flag){
                    $response["spare_flag"] = 1;
                    $response["message"] = "Success";
                }
                else{
                    $response["spare_flag"] = 0;
                    if($est_approved_msg){
                        $response["message"] = $est_approved_msg;
                    }
                    else{
                        $response["message"] = "You can not request spare part for this booking";
                    }
                }
                log_message("info", "Spare parts flag found");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . " Booking ID Not Found ");
                $this->sendJsonResponse(array('0051', 'Booking ID Not Found'));
            }
        } else {
            log_message("info", __METHOD__ . " Booking ID Not Found ");
            $this->sendJsonResponse(array('0052', 'Booking ID Not Found'));
        }
    }
    
    /*
    @Auther - Kalyani Tekpure 
    @Date - 30-Aug-2019
    @Desc - This api is used to gather data for warranty checker screen which includes Model Number AND request type
    @Param - $booking_id, $partner_id, $service_id
    @Response - $model_number_list(Array), $booking_details(Array)
    */
    function getWarrantyCheckerAndCallTypeData(){
        log_message("info", __METHOD__. " Entering..");
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $missing_key = "";
        $check = true;
        $validateKeys = array("booking_id", "partner_id", "service_id");
        foreach ($validateKeys as $key){
            if (!array_key_exists($key, $requestData)){ 
                $check = false;
                $missing_key = $key;
                break;
            }
        }
        if($check){
            $where = array('entity_id' => $requestData['partner_id'], 'entity_type' => _247AROUND_PARTNER_STRING, 'service_id' => $requestData['service_id'], 'inventory_model_mapping.active' => 1,'appliance_model_details.active' => 1);
            $model_numbers = $this->inventory_model->get_inventory_mapped_model_numbers('appliance_model_details.id,appliance_model_details.model_number',$where);
            if(empty($model_numbers)){
                $where = array('entity_id' => $requestData['partner_id'], 'entity_type' => _247AROUND_PARTNER_STRING, 'service_id' => $requestData['service_id'], 'active' => 1 );
                $model_numbers =  $this->inventory_model->get_appliance_model_details('id, model_number', $where);
            }
            $response['model_number_list'] = $model_numbers;
            $booking_details = $this->booking_creation_lib->get_edit_booking_form_helper_data($requestData['booking_id'],NULL,NULL);
            unset($booking_details['city']);
            unset($booking_details['sources']);
            unset($booking_details['booking_history']); 
            unset($booking_details['services']);
            unset($booking_details['capacity']); 
            unset($booking_details['category']); 
            unset($booking_details['file_type']);
            unset($booking_details['booking_symptom']);
            unset($booking_details['booking_files']);
            unset($booking_details['symptom']);
            unset($booking_details['follow_up_internal_status']);
            unset($booking_details['active']);
            unset($booking_details['brand']);
            unset($booking_details['partner_type']);
            unset($booking_details['model']);
            unset($booking_details['appliance_id']);
            unset($booking_details['c2c']);
            $response['booking_details'] = $booking_details;
            
            /** get model number and date of purchase if spare part already ordered **/
            $spare_details = $this->partner_model->get_spare_parts_by_any('spare_parts_details.model_number, spare_parts_details.date_of_purchase', array('booking_id' => $requestData["booking_id"]));
            if(!empty($spare_details)){
                $response['spare_parts'] = $spare_details[0];
            }
            /** End **/
            log_message("info", "Warranty checker call type data founded successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Request key missing - ".$missing_key);
            $this->sendJsonResponse(array("0053", "Request key missing - ".$missing_key));
        }
    }
    
    function is_spare_requested($booking){
        if(array_key_exists('spare_parts',$booking['booking_history'])){
            foreach($booking['booking_history']['spare_parts'] as $values){
                if($values['status'] != _247AROUND_CANCELLED){
                     return true;
                }
            }
        }
        return false;
    }
    
    
    /*
    @Auther - Kalyani Tekpure 
    @Date - 03-Sept-2019
    @Desc - This api is used to edit call type for booking and check warrenty status
            in this we form the required data and call the existing function by curl which updates the booking call type.
            also we includes some validations like -
            1)If spare part already ordered on the booking than can't allow to edit call type.
            2)We can not update same type of request type.
            3)If warranty status is IW and booking request type is OW than we allow system to update call type.
    */
    function submitWarrantyCheckerAndEditCallType(){
        log_message("info", __METHOD__. " Entering..");
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        
        $missing_key = "";
        $check = true;
        $check_request_type = array();
        $edit_call_type = true;
        $warranty_checker = true;
        $warranty_status = true;
        $warranty_status_holder = array();
        $curl_data = array();
        $validateKeys = array("booking_id", "prices", "request_types");
        $request_types =  json_decode($requestData['request_types'], true);
        $requested_prices = json_decode($requestData['prices'], true);
        foreach ($validateKeys as $key){
            if (!array_key_exists($key, $requestData)){ 
                $check = false;
                $missing_key = $key;
                break;
            }
        }
        if($check){
            $booking_details = $this->booking_creation_lib->get_edit_booking_form_helper_data($requestData['booking_id'],NULL,NULL);
            foreach ($booking_details['unit_details'] as $unit_key => $unit_value) {
                $quan = array();
                foreach ($unit_value['quantity'] as $quan_key => $quan_value) {
                    array_push($quan, $quan_value['price_tags']);
                }
                array_push($check_request_type, $quan);
            }
            
            sort($check_request_type);
            sort($request_types);
            
            if($check_request_type == $request_types){
                $edit_call_type = false;
                $warranty_checker = true;
            }
            else{
                $is_spare_requested = $this->is_spare_requested($booking_details);
                if($is_spare_requested){
                    $edit_call_type = false;
                    $warranty_checker = false;
                    $warranty_status = false;
                    log_message("info", __METHOD__ . " Spare is already requested, You can not Edit this Booking ");
                    $this->jsonResponseString['response'] = array("warranty_flag" => 1, "message" => "Spare is already requested, You can not Edit this Booking");
                    $this->sendJsonResponse(array('0054', 'Spare is already requested, You can not Edit this Booking'));
                }
                else{ 
                    foreach ($request_types as $request_type) {
                        $check_request = $this->booking_creation_lib->checkPriceTagValidation($request_type);
                        if(!$check_request){ 
                            break;
                        }
                    }
                    if(!$check_request){
                        $edit_call_type = false;
                        $warranty_checker = false;
                        $warranty_status = false;
                        log_message("info", __METHOD__ . " Not Allow to select multiple different type of service category ");
                        $this->jsonResponseString['response'] = array("warranty_flag" => 1, "message" => "Not Allow to select multiple different type of service category");
                        $this->sendJsonResponse(array('0055', 'Not Allow to select multiple different type of service category'));
                    }
                    else{
                        $edit_call_type = true;
                        $warranty_checker = true;
                    }
                }
            }
            
            if($warranty_checker){
                $arrBookings[0] = array(
                    "booking_id" => $requestData["booking_id"],
                    "partner_id" => $booking_details["booking_history"][0]['partner_id'],
                    "booking_create_date" => date("Y-m-d", strtotime($booking_details["booking_history"][0]['create_date'])),
                    "purchase_date" => date("Y-m-d", strtotime($requestData["purchase_date"])),
                    "model_number" => $requestData["model_number"],
                    "service_id" => $booking_details["booking_history"][0]['service_id'],
                );
                
                foreach ($request_types as $request_typess){
                        $new_request_type = $this->booking_utilities->get_booking_request_type($request_typess);
                        $response = $this->warrantyChecker($requestData["booking_id"], $booking_details["booking_history"][0]['partner_id'], $booking_details["booking_history"][0]['create_date'], $requestData["model_number"], $requestData["purchase_date"], $new_request_type);
                        if($response['warranty_flag'] == 1){
                            $warranty_status = false;
                            $warranty_status_holder = $response;
                            $edit_call_type = false;
                            $warranty_checker = false;
                            break;
                        }
                }
            } 
            
            if($edit_call_type){  
                if(isset($requestData['sc_agent_id'])){
                    $curl_data['sc_agent_id'] = $requestData['sc_agent_id'];
                }
                $curl_data['call_from_api'] = true;
                $curl_data['service_center_id'] = $booking_details['booking_history'][0]['assigned_vendor_id'];
                $curl_data['is_repeat'] = $booking_details['is_repeat'];
                $curl_data['upcountry_data'] = ""; 
                $curl_data['user_name'] = $booking_details['booking_history'][0]['name'];
                $curl_data['is_repeat'] = $booking_details['partner_type'];
                $curl_data['is_active'] = $booking_details['booking_history'][0]['is_active'];
                $curl_data['booking_type'] = $booking_details['booking_history'][0]['type'];
                $curl_data['partner_id'] = $booking_details['booking_history'][0]['partner_id'];
                $curl_data['assigned_vendor_id'] = $booking_details['booking_history'][0]['assigned_vendor_id'];
                $curl_data['booking_primary_contact_no'] = $booking_details['booking_history'][0]['booking_primary_contact_no']; 
                $curl_data['booking_pincode'] = $booking_details['booking_history'][0]['booking_pincode'];
                $curl_data['city'] = $booking_details['booking_history'][0]['city'];
                $curl_data['service_id'] = $booking_details['booking_history'][0]['service_id'];
                $curl_data['service_id'] = $booking_details['booking_history'][0]['service_id'];
                $curl_data['service_id'] = $booking_details['booking_history'][0]['service_id'];
                $curl_data['order_id'] = $booking_details['booking_history'][0]['order_id'];
                $curl_data['dealer_phone_number'] = "";
                $curl_data['dealer_id'] = $booking_details['booking_history'][0]['dealer_id'];
                $curl_data['user_email'] = $booking_details['booking_history'][0]['user_email'];
                $curl_data['booking_alternate_contact_no'] = $booking_details['booking_history'][0]['booking_alternate_contact_no'];
                $curl_data['source_code'] = $booking_details['booking_history'][0]['partner_id'];
                $curl_data['partner_source'] = $booking_details['booking_history'][0]['partner_source'];
                $curl_data['parent_id'] = $booking_details['booking_history'][0]['parent_booking'];
                $curl_data['dealer_name'] = "";
                $curl_data['type'] = $booking_details['booking_history'][0]['type'];
                $curl_data['dealer_name'] = "";
                $curl_data['type'] = $booking_details['booking_history'][0]['type'];
                $curl_data['booking_date'] = $booking_details['booking_history'][0]['booking_date']; 
                $curl_data['home_address'] = $booking_details['booking_history'][0]['home_address']; 
                $curl_data['upcountry_charges'] = 0;
                $curl_data['grand_total_price'] = 0;
                $curl_data['booking_timeslot'] = $booking_details['booking_history'][0]['booking_timeslot'];
                $curl_data['booking_request_symptom'] = $booking_details['booking_history'][0]['booking_request_symptom']; 
                $curl_data['query_remarks'] = $booking_details['booking_history'][0]['booking_remarks']; 
                $curl_data['repeat_reason'] = $booking_details['booking_history'][0]['repeat_reason'];
                $curl_data['internal_status'] = $booking_details['booking_history'][0]['internal_status'];
                
                $appliance_ids = array();
                $appliance_brands = array();
                $appliance_categorys = array();
                $appliance_capacitys = array();
                $appliance_descriptions = array();
                $order_item_ids = array();
                $purchase_dates = array();
                $model_numbers = array();
                $partner_paid_basic_charges = array();
                $index = 1;
                $price_arr = array();
                $discount_arr = array();
                $partner_paid_charges = array();
                $discout_charges = array(); 
                foreach($booking_details['unit_details'] as $unit_details){
                    array_push($appliance_ids, $unit_details['appliance_id']);
                    array_push($appliance_brands, $unit_details['brand']);
                    array_push($appliance_categorys, $unit_details['category']);
                    array_push($appliance_capacitys, $unit_details['capacity']);
                    array_push($appliance_descriptions, $unit_details['description']);
                    array_push($order_item_ids, $unit_details['sub_order_id']);
                    array_push($purchase_dates, $unit_details['purchase_date']); 
                    array_push($model_numbers, $unit_details['model_number']);
                    
                    foreach ($booking_details['prices'][0] as $price) {
                        $partner_net_payable = NULL;
                        $around_net_payable = NULL;
                        foreach ($unit_details['quantity'] as  $tags) {
                            if($tags['price_tags'] == $price['service_category'] ){
                               $partner_net_payable = $tags['partner_net_payable'];
                               $around_net_payable = $tags['around_net_payable'];
                            }
                        }
                        if(is_null($partner_net_payable)){ 
                            $partner_net_payable = $price['partner_net_payable'];
                        }
                        if(is_null($around_net_payable)){ 
                            $around_net_payable = $price['around_net_payable'];
                        }
                        $partner_paid_charges[$price['id']] = array($partner_net_payable);
                        $discout_charges[$price['id']] = array($around_net_payable);
                    }
                    $price_arr[$index] = $partner_paid_charges;
                    $discount_arr[$index] = $discout_charges;
                    $partner_paid_basic_charges = array($unit_details['brand_id'] => $price_arr);
                    $discount = array($unit_details['brand_id'] => $discount_arr);
                    $index++;
                }
               
                $curl_data['partner_paid_basic_charges'] = $partner_paid_basic_charges;
                $curl_data['discount'] = $discount;
                $curl_data['prices'] = $requested_prices;
                
                $curl_data['appliance_id'] = $appliance_ids;
                $curl_data['appliance_brand'] = $appliance_brands;
                $curl_data['appliance_category'] = $appliance_categorys;
                $curl_data['appliance_capacity'] = $appliance_capacitys;
                $curl_data['appliance_description'] = $appliance_descriptions;
                $curl_data['order_item_id'] = $order_item_ids;
                $curl_data['purchase_date'] = $purchase_dates;
                $curl_data['model_number'] = $model_numbers;
                            
                $url = base_url() . "employee/booking/Api_getAllBookingInput/".$booking_details['booking_history'][0]['user_id']."/".$requestData["booking_id"];
                $ch = curl_init($url);

                $postdata = json_encode($curl_data, true);
                curl_setopt_array($ch, array(
                    CURLOPT_POST => TRUE,
                    CURLOPT_RETURNTRANSFER => TRUE,
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json'
                    ),
                    CURLOPT_POSTFIELDS => $postdata
                ));

                $curl_response = curl_exec($ch);
                //$this->asynchronous_lib->do_background_process($url, $curl_data);
                $this->partner_cb->partner_callback($requestData["booking_id"]);
                
                /*Update model number and purchase date in booking unit details*/
                $booking_update_data = array("sf_model_number" => $requestData["model_number"], "sf_purchase_date" => $requestData["purchase_date"]);
                $this->booking_model->update_booking_unit_details($requestData["booking_id"], $booking_update_data);
                
                log_message("info", "Booking Request type hase been updated successfully");
                
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));         
            }
            if($warranty_status){
                if(!$edit_call_type){
                    log_message("info", __METHOD__ . "Warraranty status successfully varified. ");
                    $this->jsonResponseString['response'] = $response;
                    $this->sendJsonResponse(array('0000', "Warraranty status successfully varified"));
                }
            }
            else{ 
                if(!empty($warranty_status_holder)){
                    log_message("info", __METHOD__ . $warranty_status_holder['message']);
                    $this->jsonResponseString['response'] = $response;
                    $this->sendJsonResponse(array('0056', $warranty_status_holder['message']));
                }
            }
        }                   
        else{
            log_message("info", __METHOD__ . "Request key missing - ".$missing_key);
            $this->sendJsonResponse(array("0057", "Request key missing - ".$missing_key));
        }
    }
}
