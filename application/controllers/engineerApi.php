<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

//error_reporting(E_ERROR);
//ini_set('display_errors', '0');

class engineerApi extends CI_Controller {

    private $token;
    private $header;
    private $requestId;
    private $deviceId;
    private $requestUrl;
    private $jsonRequestData;
    private $jsonResponseString;
    private $debug;
    private $tokenArray;
    private $statusCode;
    private $app_price_mapping_id = 247001;

    function __Construct() {
        parent::__Construct();

        $this->load->model('apis');
        $this->load->model('diagnostics');
        $this->load->model('discount');
        $this->load->model('booking_model');
        $this->load->model('partner_model');
        $this->load->model('vendor_model');
        $this->load->model('user_model');
        $this->load->model('partner_model');
        $this->load->model('engineer_model');
        $this->load->model("dealer_model");
        $this->load->library('notify');
        $this->load->library("miscelleneous");
        $this->load->library('booking_utilities');
        $this->load->library('s3');
        $this->load->library('email');
        $this->load->helper(array('form', 'url'));
        $this->load->library('asynchronous_lib');
        $this->load->library('paytm_payment_lib');
    }

    /**
     * @input: void
     * @description: accepts post request only and basic validations
     * @output: void
     */
    public function index() {  
        log_message('info', "Entering: " . __METHOD__. json_encode($_POST, true));
        // echo json_encode($_POST, true); exit();
        
        ob_end_clean();
        //$input_d = file_get_contents('php://input');
        //$_POST = json_decode($input_d, true);
        
        //$str = '{"request":"{\"requestId\":\"249c0d03-5123-487a-9ad9-cbe487ed95bc\",\"requestUrl\":\"engineerLogin\",\"deviceId\":\"MzU4MjQwMDUxMTExMTEwLWU0YmNiNTcwM2MyZjczMGUtMDI6MDA6MDA6MDA6MDA6MDAtbnVsbA\\u003d\\u003d\",\"token\":\"eyJhbGciOiJzaGEyNTYiLCJ0eXAiOiJKV1QifQ\\u003d\\u003d.eyJleHAiOjE1NTYwOTA4NzYsImlhdCI6MTU1NjA5MDY5NiwiaXNzIjoiYm9sb2Fha2EtbW9iaWxlLWFwcGxpY2F0aW9uIiwicXNoIjoie1wicGFzc3dvcmRcIjpcIjc4MjA5Mzk0NjlcIixcIm1ldGhvZFwiOlwicG9zdFwiLFwiYXBwX3ZlcnNpb25cIjpcIjEuMFwiLFwiYXBpUGF0aFwiOlwiYXBpXCIsXCJtb2JpbGVcIjpcIjc4MjA5Mzk0NjlcIixcImRldmljZUluZm9cIjpcIntcXFwiaXNFbXVsYXRvclxcXCI6XFxcImZhbHNlXFxcIixcXFwib3NcXFwiOlxcXCIzLjE4LjkxK1xcXCIsXFxcIm1vZGVsVmVyc2lvblxcXCI6XFxcImdlbmVyaWNfeDg2XFxcIixcXFwicGxhdGZvcm1WZXJzaW9uXFxcIjpcXFwiOC4wLjBcXFwiLFxcXCJtb2RlbFxcXCI6XFxcIkdvb2dsZVxcXCIsXFxcImlzUm9vdGVkXFxcIjpcXFwidHJ1ZVxcXCJ9XCJ9In0\\u003d.NWM2ZjY0NDEyODRmY2ZkNzQ5ZTk1NWVlOGEzOWYzYTJmZTA5MmI2MTk3YzNkZTJjYzJiNWMzZDUwM2JjNWYyNA\\u003d\\u003d\"}"}';
        //$str = '{"request":"{\"requestId\":\"6ffc22ec-e6e0-4db6-b2cc-186268c3db96\",\"requestUrl\":\"bookingProductDetails\",\"deviceId\":\"MzU4MjQwMDUxMTExMTEwLWU0YmNiNTcwM2MyZjczMGUtMDI6MDA6MDA6MDA6MDA6MDAtbnVsbA\\u003d\\u003d\",\"token\":\"eyJhbGciOiJzaGEyNTYiLCJ0eXAiOiJKV1QifQ\\u003d\\u003d.eyJleHAiOjE1NjIwNTM2NzYsImlhdCI6MTU2MjA1MzQ5NiwiaXNzIjoiYm9sb2Fha2EtbW9iaWxlLWFwcGxpY2F0aW9uIiwicXNoIjoie1wibWV0aG9kXCI6XCJwb3N0XCIsXCJhcHBfdmVyc2lvblwiOlwiMS4wXCIsXCJhcGlQYXRoXCI6XCJhcGlcIixcInN1Ym1pdFNwYXJlUGFydHNPcmRlclwiOlwie1xcXCJyZWFzb25cXFwiOlxcXCJydGVyZGVzXFxcIixcXFwicGFydG5lcl9mbGFnXFxcIjowLFxcXCJkb3BcXFwiOlxcXCIyMDE5LTA1LTAzXFxcIixcXFwicHJpY2VfdGFnc1xcXCI6XFxcIlJlcGFpciAtIE91dCBPZiBXYXJyYW50eSAoSG9tZSBWaXNpdClcXFwiLFxcXCJpbnZvaWNlX251bWJlcl9waWNfZXhpc3RcXFwiOlxcXCJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSGdBQUFCNENBSUFBQUMyQnFHRkFBQUFBM05DU1ZRSUNBamI0VS9nQUFBZ0FFbEVRVlI0XFxcXG5uSDE5YlpManVvNXNBcExyenN4eVpndHZFMi8vaXpoZHRpUmlmb0JNSmtIM1VYUjB1R3lKSW9GRTRvTVVaZi8vLy8ydkJmSTRmMTdIXFxcXG5jVmdnSXN5c3RkWVFadWJ1QU5xRGlEQVBod0dJQ0xpWjljOFd5TSt0dFd3dHIwVjRSTUJhL3VydUZtaXR3UTFBTklzSXQraU5tSVVoXFxcXG5JZ0NZV1hiTURtK3RtVmwyS1Qva0NlNGVjcmo3Y1J6Wmdmdy9UK2o5YVUzLzFDL05iTjUwakNJL1o4c0FzdVg4SnMvSjgzbnIwcjNuXFxcXG5lU2c2TTNOdC9icXU1M215M1d5T2NuVDN2RWFQdkFmUHlhYllBMzdXay9PMGJJcVhjUEI2STE2ZVBkWUxlYksyMzVIUkd0WEE3L1BEXFxcXG5jUnphaUkyRHZkSm1WZlRaSlpXdnRrekZkS0I4RzJORU9JQ0dmaHNMM0orTGtJd0loem5HQUR5TzB5TGlpZlpFNDExYnU4MENiayswXFxcXG5ocTViOXNZdER1KzlpV2J0V2RSZ0hyQVdoaWRhR01JNmxCd1JEK0RXRUFodkQyZ1FFS05KV0tpWThodUtnT01uRWlPQ2w2ZjB2NnBjXFxcXG5OYVFINFovdEtMeXlXWVdkYXE2Q0ZNQjkzOVFKMWE2TnN0KzlvWGEweHptd29tb2R0aXFmWm9nVi9xMjE1M2tJQi8yZVB4VzBGalBTXFxcXG5QbUJZVXBFc3Z5ZWY4RFNlcklMbVQ2UWFIYzVYK2FxNWRFUURDQU44WG54ZFYwSU1BOWVkV0VXbGFRZkoyckRtc05NUEFFOTB2RmlBXFxcXG5iRzRCdERDUHZGY1lDaEdaMlhFY2srQUN4OUY3MlZIZnJEMWRTV3I3UlpmcEE5QzZhMUVzcTE3MTFyeGNUUm5ib2FjcE12Wm1PVFR0XFxcXG5ZZitLZ0oycXZoKzBDVGUxV2IwZWdxUFdHdkdpS0ZiOVU4a3BXY0tUZ09KZ3lMWmxHT3huUWE2ZW5KZERtRUY1WTI5S2U2alFUckhFXFxcXG42b2ZLdFlXN2lYcitSQUZXWklXaElWcHI5MzByWXh6bWpFK1diajNOQW5sVml1K0tObm5RclNIU1lnQ1k5d0dqQmRyQVppQXRabUhiXFxcXG5hRlJ3djlCRHBZWTF0SmlLTklUaGVSN0Mzd2IxVWU3dXJ0eUZZUTBxTDhwb2wvVXVYQ1dvci9ydzdDZzEwSDJSTzREbmVlNzdMc3FrXFxcXG5CQXNLQ0hrMUszWlI0ZHpsK0R6RUhWYkE4dnhpWnp4SENZUUk1UWNmQi9Hb0hvd1JIanVUZlNqUytkb2ZpS1YrL1o4SHFadzQ4R1RTXFxcXG5MaTlER0tLWjRlaVJRRVQ2bnh6VmRFUXRFb1lPZ3h2YzBNSmg4YlI0Mm84ZnBZdko4anpNckVjVUxTd0E3dzVoMGh4czh2dUlXQkJlXFxcXG5GRWEwNXZuTEhkZjQ1Ry9DSXFWUTFrb2crNW1MRUhRNEsxdnVDUGdTcTJNRUhtbG85MzFmMTR6NWVHV2hUclhOaGFRQ21RRmhQZlp4XFxcXG5sdTdTa1BkZnAwTWVCc1R6UTZJM25rUGtzaWxGSE1XcTdldVhTaVA2L2RkRGFZMW1GK2tNelN3UjBhT0x1TTNIR1lZd0pGbDNyTGtmXFxcXG41ZzJSbkVzTitYa2tzMDkrY0F0UnZDcDgycFNoSWR6UDVOK3BOZ1NqSUljZDVobDdRT0JNWnJUaFYyekVkcEF3aHFvcUdXRDhKUXZqXFxcXG5Ud3Z2RDVGQkhNTlgwQ2d5eU1PV21XRTVNaGhRRlVYRWRWMktQb1hiNUh0M1JndUZHY3RJbnVmaEphUk83YUlKbSt0Z3lLY2NsV1lvXFxcXG5XQk1LNVhFTlF2YWVGNmlxclBlUnFyYllmdjZxV1g3K21tbXRNUVduR1I3SG9melkwV1FXRVovN3VqT3g4NTZWMnVFOWxnaFk0REQzXFxcXG44MGh3c1dRQk56dEcySnUwN3A3WnNPcU1NVzhmZVhSYVR4OFExbGxiRlZBY2IxR0dSbVk1ZUlwYm9WZG9nZTFRMmNxWmlnWVNVUWZzXFxcXG5NQTYxYVVvZmdFZEVncUtFd0ZndEl0RjZYVmNabFdvWXEzbVdYeFdEL0o3aVRzM3JUVFdPM29rWWdNTXlNZUdZVlhPbGZjcWF5dmliXFxcXG5aTFh6SlhJb1JxWjYwa2FvV2tpMjdFOURpdzQ2dldzQ2Foa0FEQzN1ejVVaGNBNnlEOHluZERyWUF3dDJiUDVwZ1hnYVhRTEJtemJSXFxcXG5PM0Q0dEluTXkwZW1hc0xqNlJVU0t4eDhIL25vSk5xQzVTSWRYdlVWSmRnb2E5ZUhFaGRXV21zQTVlQ21wYnlOS0xFZHovT1FyOW1KXFxcXG40bExTQytVNUZJSHF2T1RRS2o0YUZ0SEUwMmlrN0tRT2xkK1FGckZpSEg4dkcvR0VYZGE3VmtxNG9xTERSdVZrZVgrZDdoWU1jb3N6XFxcXG5aZXpSRUdFdDRHRzQyOU5kVUNBWm5KWjQrcEdsaHZNOFo2RGRJbzJqRERLUk82T1h3eHNxM0pRMzBnNHNjUHJCTUNsUFM4elNZdEFpXFxcXG5tVDMvbVhCb1NDekJBMEFtQVpTKy9xUjZMWnJER2pXV3V4eG1tWXNnT1ZyRFVnakg2UTFLdDY3cnV1OGJLN3NwRmlMaVBNL1NnaXBjXFxcXG4yVlBCZ3RXUSthYzZsbklWNzZqOTU3Z2dqaEVDNnE4VW9lZncvM0k3N1hhSVkxUWtzZkl6aStDOFRXcmo2K0FQYzRkWk9Jc2QxOTErXFxcXG4zeGR4VFdTTmF5eUxHMzdPZ3R6OFByczdLaElXU0ViV0FTL250NUZBTW5jZFBQaVZiYnY5S2JvM2dkTElPR1JtQm9VbDJLeExMVERXXFxcXG5HTncyWmxkOXpQUEwyZXo5bm10aUFDZGo3Yy9uUXdvMjhmNXNyVHZHYjQxUS93VHBYaXBqSDlTRWQ5TXBkcTJ3WWd0cUpjVzJWSm9tXFxcXG5QdU03MXcxWjMvZk5oRWkxb3Bjd25Jc0lWOFBVVGlpQkxLSjgybUYrSHVZV1lmamNsM3JrYnIvcDd2UExaR0UzZUk4M09uWVVwMy9KXFxcXG5ialFhVTdIeWp1cFVpeWZ2RFE0TGdIQ0xvbXJQZ09ZeFJtRWpYQ3QwcWhNVTJsdUtzY244VG9Vek5jWm9GOEpmWm5hZXAwS2d0ZlorXFxcXG52N0ZOZzJwSlRFbGMvYnV5Y0FsczlWQ1VVUitGTWRobXlLSGE0c21sekxTclN1OWJTdDRodk8rajBFb3JvUkd6dGV4UG42WFYyNlQrXFxcXG5zUnFPbWJXRysyNEFVc29xZlFBTjhmdDVoOEhQZzFFRXVUdGpqMTVhc3A1VkFwMS9WU0xrZXNwbG9UV2JjNXZrZXFXUmlNZ0tJdStlXFxcXG5XZWhVTFl3RzFHdUgzNVE2dGVKbXg4eFQrRDlGbVpHb1p1R0sxMklCZGQ2RXd5NkJvUlpvOUJ3YnlkNzcvUzdrdzVsVFZYaTVQYzlYXFxcXG5uUEluUmJFaVRqR096ZXgyOFgzMUU5b2xqbFJQVU9KUzhXSEFXVSt6elcyVTRHMlpTY281RkpWRjVpYm42U3duTHdISnFJUkFaZ2tTXFxcXG5SSnltNnVhY1dCNlJieGwyWjE1RXppVWFaNjhEOFN3enpTb1J6dHJvQ1lucnRKNmNVd2ZBT1NER01HaHhyRXN0RkxaRml3b0ZFdjMrXFxcXG5xOG9hQXQvRXFHTWtjcEI1Z1RZT3lrdVR2YUtyL2szNDUzMXIwc2gyMk84U0FMalBLSDQzRjJ3VXY0dEFpZDQya2cycHZlbTF4YmFLXFxcXG55UGFUZlMyWlFzQ3VSc3hSNndsejdLb3VkcmUxOWp4UHh0c3Ftc1NkV3FLWlplNEhhN0QyK1gyM2U1UWR4T1Byc1Z4K2VFUG5VeHNSXFxcXG5icUsrMkdiZUpXMk9scFJoK0dHZWZRNkRIVjRrTWtVcGZxSm5qSUVNdE9mYXF5MTFMTVN5bTVkV0lFeW91V1F4UzhLU3hKcEFabDZuXFxcXG5scFhMb2xnNVdqUTIvdng4UG9WL0k1YjRGQ1BNS0VOaWEra1NOSXpSNGZsYThOMlJ6bTlLNGI4Y2U0WDY2eEdqVXJaSElQeS9yZk84XFxcXG5PaUorT1BkR09jamRrTTNzOUlNbHpiWGo0YkJ3UE5IKytmM3pQLy8xMzlhYXdmUDZlSnBaRHhVTXZiWUFvRDNOM1p0RklNd3NuaGE5XFxcXG45MllCRE8rZlZZZzVoc09mMXF3Wmtxa2pFREFLTlBQWHAwVjZMWEhkRWVISDVJRnVORzRCR0JZd1VrUE1vVzFNZ0tsQUNvYmlXekpGXFxcXG5mUFNRT3dQbjh6eE40a0VWTVh0UU1uVVNHUVE3QmRlOFdmbW02SjhuRkRXYkhCQURzcFdtcTFjVXUxYUdaTXRKUHNUbXY2VFViSWZnXFxcXG5wUVJNcGsxS243V0ZLV1VieVVpT1J3czA3SWZxNEt0anpQVktEbnVlNTdxZWF2dWo0Z3d5dU9HSjFybVNDMUF4bHpoRjlNTDNNZ2FaXFxcXG51ZStnQmdBYzVrbmlaSHlDZ05NdWJLRXZWZDNpbjZMUkhyMWxEWDFicUtZNks2bFFyQlVJendudkRNaE11SHpuZnE3cVZGbFQveVJ1XFxcXG45cFV6TWp2VnNnZkZyeGI0OHlmMUNpckJYWnFhOWFyc05QTGRyK1ZkRk10TnByRTEvVlBGVUZZRnlKUzFEY0k1NFpaZVcyWEtENlYvXFxcXG5oWVBVWHM3ekxBRW1SbkI5bm1kWVg2bkhnUmJsUjR3VjFxS1ZralM1ZTBNRUlwZHdlQ280dTkwTGI4TTNSbS81aVlZSU4vZkRvWXQxXFxcXG5CQ0pVekxRZVNSbzdqQkRtUzMyMW9JZUhTcHlOUjRSekpRYldRd21Ma0tGRmtLRktDZHUzV3NSOTMvZDlhNW1KaDBiUTJpMEZtZ0t6XFxcXG5CS2VxMThMbTJOSzVrRFVuNlkzVTVOdFlsS0tZdFpXdmlrcGlMVDJXZ3lZK1FaTUZBV0JaOTZheUxqWTQweTBKVWRnejlkZVVXb2FNXFxcXG43dDdyenFOdVo0RXlNRWkrcHplZFB1ZCtkUDBmaEcyL05PS212L1pxakp5Z3VTalAwZFhpYUtFVFkvLytQMVp1Wk9lN01GV21CZmE3XFxcXG5yUGxOT212TnloU1lESWw0KzdMU0xyWTRXazh1ZklmVnF0UW1GQmF4Umxxa1B0Nk8vUy9wWW9tNzJEaUxHRHJ0cVdJaGg1UU9oMHdXXFxcXG5zelAwYWY3MW1pOWR4MWg2OC9kS0RZQXltSWk0cmd2dFlUelFNN1MxUG1WbW1yOXgxb05JNmJvY2dKM0RrRGwxVlV6UEZRYzJwMlJiXFxcXG5ML1hsK2U1K21LTk5TZ1Y2QXBuWGF0V1h2RmUwcTROZERqTUxUQkpSaFZCcWhUU3BxOWZyVmE3Q0NreHFncUtQaU90NnpKYnA4MTJwXFxcXG5lajdIdkN1dldFelJ0RUtlVkU3WFFqRVZoclZSek9LTmVLMENXYzh2ZjlMczFOYURLYmorck42TStrKzlzeFA1VTZZMlBMa0l2YWdxXFxcXG5QMXpYOWM4L3Y1MTJZVnh4a2ZGMWpKcGNHSWd2alBVYkdYRW55am9MdFFvT01xeDFFQTJGSFo1OHpUWjE3ckZqY015WGs5WVM4bjF4XFxcXG50OHhtUUxpb2tCNEV6bFRWWVFZM0w2ZmFGdHRDTXFqeVUzTHhMbHo5MDJVNVZycjF6K2VqRlhEdE43dFJDRmNGYXV2akJ6eFREVkVCXFxcXG54ZnJNVG95K3JqOWlIbEFHb3JmZytWOUhUVlJwUU5VQk9zNmM2ODl0TGRaRVJHdGdKVS9GcDVjUTFHckkxR3JXQWltZ3orZlQyajB2XFxcXG55YldnTXNQU2U2LzUyNml4VVNKWitjc1ZUTVlvZUN3ZzRXd1IwTmVCZE10NzJxeEgrNkloOGdPNXU2aFF4VW81ZnVWb2ZxQXV6Nkd1XFxcXG5KWGhVMmVrTVFtSE1uVzFKSXhybkFjaGFJR1RpNTNrQXVFWnkvV1Q3YTBLaDNjTWFUVUtBbjZKZU9veEpjZHJQN0UrdVRWZ2tLQ3NsXFxcXG5zKzdLODB2UlEzdSs5NWF5YnEweEJENUVpSjJMT1Z2T01FTnJLRTJXVTZyUUZlbnBPYlVjeUo3ZGQ4dEVodEZDakhySVpOTEI1dkcwXFxcXG4rUlFNaHoxbVNUZzhXZ1pqaVQ1YWd4MkRGbnk2eXJ4RXRkZ1paa1ExNlEvK1pxbThSUC9FaW5HUzVFbmxhSnJYR25KZXFpaEhkVnZZXFxcXG5yVGhvak5sNFpSdnRVSXhLRmdaWjdWa1dMVW1iblowWkZsREcyY2UveGxIVCtDS2MvVy9MTEdWOEM5cTBCZjIvdEt3MkVaSko4SkhwXFxcXG5FOHVTMWpCRGE4dXpMbXpMUnY0TmNRc2wwNkdJSTBKRFFDcERPd1NBMDR5bEJUWDhyRE8wWVJ6emNnTkllY3F6MFNPTmdnbExqZXA5XFxcXG5Xc0NRZnFxQW1yVWtGYnJxc21CTEZSTmJ0U0J5Y3BiNmJBMnRnWFNoNTMxbENUMm9tTHpINi9VcTl3NEpXdFFhc254STR0S3JkQXpwXFxcXG5pa3RRcFZhdkxaZ3NtOW9SdDB0TmtjUVBzUko5QVFHdG4wQlJFYmQxTVlsbFpzaS9OUWdyZmRMNzVTVWNPVHNKOUZDWHN3Y0VCUnZSXFxcXG5sZ2tjUGhROWY5TDVSbGt4aEMxTFlzczhVMDlvcmVYa3pnTHRncEp4RmNWZEFBU3hTeUpHQ1kyeVZ1WkovMFJvemlpTlFHWmtybmhSXFxcXG50TzVRb2pKUFAxN0huR3kwalcwb0F2clZiRGFuejVXT0ZHamxwanBhM2toajV5ODZXQVZYc2xZVllxeHNDekhXSFh6YXo2L0FtdmVGXFxcXG5WdGZXZSt2QTVNcVo5VFBRdWU5N3hOb1ZFUkRrUXZCb1FzMnAvMXdIbkRGSFgyZXRxMDlWQkNNeTZZWTAxb3YydFJ5WlNZWjhPUUlNXFxcXG5lS2VVSHIwaDVucWxGcVdhaUsyVVFmbm85d3BxbnFhVityemQzSE9FZ3RZWXp1UWhzdnkxaERzcG96YldBaE0xQlE2N1liSjZSK2VUXFxcXG5DbE5jNzV5alIzRTRLZ2dJejRSVUNvc2NpL28xWUtVdDdzYWsxc01MdFRXWFRWSzRFUEpVVlpSUmhVeFFTVlhUSXBwWkw2SzMxcEtSXFxcXG54MUFQcys1T3NlSlhxVVBaaHFPS09VSHNMRmxFOUhDQmw1aFpUcGw3QUMzeTZadStXRCtRSVllYlFaMWtzckJYOHJFRzc1UHlROXdaXFxcXG5oeGdnMUZFKzh4c0kyeENqYmV4MVFiaFFoZ3VRVFJ5dVNtZVBncHZzbmxIWVRYbFE1Y3REbllZaUJRQ2Y5TmV4cVpRTEVqWEdLckxRXFxcXG5EcGNnaEtQYnorUnA1ZFlxWHdqNzVUQzUrRmFOUU1mdUhUUjVZd1B0aFYrbVFJdng1bU1zeEhLeFFReHZxOHJUWHJheGVFVTFUNkZmXFxcXG4xOFY2OFZ4ZkdtRFJ1WGRtbEtTWmNQVUs4aXBFRzFWcGpDb2RzNzRpNnpuQUVlZW9LSXIwT1VZS1hXV3REV1lMY3gxRlhwa21iMEpBXFxcXG5KbVZvTTR1dzV3bDNQOCt6VUlGSjNTTldGMkVTQXROaUZGOGNiWW8rbDRVby9MWGZ0bFk1cXBqV1EwVVphL3hiVktKQnV0cEhNWUxZXFxcXG5NbklsVzBXa0lzdzVtNVYxWVIxUDZhajY2OVBubmlaRmpleHh4aWRGRURGcVRCUWlCVjNBTmF1cFl6VUlTNTJKN2hpMUVVZmZ6bW5hXFxcXG41WGpTbHAzVXAyeXlrZU00ZEoxMW9qNmtXczB1RldKa3pLTTZ5OU4wMnJkUTdoS3hGaFpUS0NXcGZ6NmY0emhlcjlkTzNNcm1TcDArXFxcXG5Wb3lZeFBBN0ZsU3BHalh1cXJJUkR4UlM1cG9qZG1ZM0JaWGFiaFBhK082VDlpUUY2OUp5RS9jT01XS01BRGZKNjRsNEtLRG84Zkt5XFxcXG5TVW9ZenA4WEx5dGpVTjJNVGxSUWNJM09ibXVhZ0hIOGZIaDBVdE5ZQ0pxTFdnSGs3RWsrTjdZa3ZtNnNjU2ZNNlRNdzRxVWU3WTZWXFxcXG5wV2l6aW0xYkJZWUR5Ym44djVYQVNxbUVQODIvT1dDVlFwNlhqYjRPUDhTZ3NISVRWa3JpZUlpN3I4K2FLMEVWRHNrQzJQdjl2cTVMXFxcXG5XYktjUC9sa1lJb2ZTcTlLQnFBNlpyUEVHWE1JTllJWTRacXVRVzJ5dmluYjRkYUNrMjM0RElzQ2F2VGdBRHpHYzE3RDlibDc5V3h6XFxcXG5NazRPeWlXQjQrUFJHdDVZVlVMSjZwaGpiSDZUZlVod0xQWXU2NXI1UkVIT1E2cXN6WG9IOVdtYTNnMnBYR2NMdkNyR295SFpQcU1kXFxcXG5BdG0zaXFOQ1IwbXlhNGpvb1BiVXFGUEsra2lBdHM1MlNVK3E1eGpPZ1ZaaTR2MTIrS3YrODlhNTZESS82KzVPcWcrRmlKcUxSbWJsXFxcXG5nVUM5bzJKQ01hY0ExKzdsSlcyZFB5b21ia0xXekJMSjBYUHRkd0lnWmZUejgwT0p1TE1tMTNUTUFMTDlFazJuYUFwalVMaXFiVFUwXFxcXG5HNUc3TGlOdnJYMCtOL09qUkdMZk9ITHN0MGMxRTVVemxjaFZTMUlYVERoejN5ZzFmSDVZekJFeDQ1TXh3Y1R1RlMxU1Nlbk1PMThQXFxcXG5XWGhyR05rMk1sSXVhOUYwREd4eHIwYnhlNTBuTEpoVllJYUVLSlJYS1dlbkd0N3ZkNW1VNFRpTDJraHVER0JNU29hS2F6VXNGWm1lXFxcXG56M29GaE90bWxyU3V3aDZnbkVQclBlUU5PR0I5ZWdWTC9oTkFjejhqbU5HMmlFZWpDd3g2ZXIxZWVXSEVsOUtnQm4vYU9jNVNGZ1Z6XFxcXG5EUG1NekpBUXVHOXF0MUNwMjVuc2RSY1NIVE85aEhCMHFRcnRSQlN5Y1F5L3p4S1lnaS9FcFZNSENhbmxlYU1NcDM1K2ZuUURUNDFYXFxcXG5JQVJYNHB2Q0RJVWlOUEJTUXRDaTFlZnpPYzh6N1dBWE5DL01SSWEvYWhMUGUybndRS0diT0xxQ1plMzVMbXRlVmFUUDB6UVIxMXNzXFxcXG5zdWFLdEVRVDdUMnZIQkxQNmNUSnk3S0NaYTRpVExzK2pzTk0rL1JsN2xGTkdDUEFLTS8yMkxyTkZ3SFJXbnUvMy9TTnliOVpxbVU5XFxcXG5oQ3MzYkRxaXZ0MUhyM3VNeDlNNXM1N3FDZkhQSVpsblNJYlI1cVRTT3FHKzFYS1ZaK2FUV0ZtK3dPWnFYWjdXVWpVcTZDTG04bFlWXFxcXG5Wa0dLZG9XeTVoNTcvRW1qVjk2STFwQkNLY1dRQWsrVkNNVHdhZUJNS0haUGlNMHV0WDJlcWNPbkRXazdyTVIxSm9tSTY3b3lzWGIvXFxcXG5ia2QybkdaSGpGRFQrNHhrTDkwVlU0Z0lSYkh3TzdMNk1ac1ZsNldDdG05UllCbmJmZDk4SG1tQ2ZhelNZMFNjNjVpZTUzbWliNVRXXFxcXG5kOFMrSDMxR1dOVTVmWktzM21PZ3BsNlhIZE0rc0V2VVFRZFdhKzMxZWxIOHhWM3VPeHpGZW1pa2pMOGN0bnAyZmlEVitMckRYSnVUXFxcXG5ESk53MUVuRUNCLzNYY3ZVWW55dHZ0UEFzWlhYdFdXVm9QYTJJTHFjVStTKy8rUVpTRmxmeHBoRDJuRGRRZ1dSbUkwWms5ZmI2NWlIXFxcXG4vckpjbDZzWWVteERLWnZNSW12UVJ2a1dMSnRaR3RCMVhkeTFMR3QxdkRCeDNVT09mQWJTd0dWS2ZhcXdSVDd3RUJJUnhKb1FxVXdoXFxcXG53TmNUaUEveU9IVk1nYmlLTDJjM2ZEd3lENjJwcjFsVEc5TXJMblZPdlgzQlYrbFd1ajVXdEdNTmZtMDR2VjFocWd3YlFZaXVNTjlEXFxcXG5OTUtaNkk1dnV5OHB6OFpmUWt3ZWhVQW9VQ3FweVFNc0hUSHNINGY2UE04SU0zb3NFZkZrTlVPd3I4K3pWOURwUWJ1aitGckRlWjdIXFxcXG5jVmlidHF4R2F0K0NRaG9RblFHL24yVDl0RU8ydGFVMGM5OVVqS3FJSGU2eXFKTTdlNmgyU3p5cVR6YjJ4WUx5YXgvcTJHTVBxMlVIXFxcXG5vNDRwOWFGdC9aS0gva1RJeDhyOVg4WE4rNlhGbEdsMU5vNDFjMU1Pb2FvVXk4UkhST1J1SVhwSFc5TTJ6aHpGTEJzc3hXdmVYZnRqXFxcXG5VaHNvTEJ3U2pKc1VFYWxkcmJzRjkrdGdvOGR4UkZocldiNDRrcS9Ua1dOa2ZXbnlzZm9ybGM0NFd0SnhEa0JMSDcyTEk0WlZOakFKXFxcXG5NM1JJcXA2aTNmeXNzcVltK0t2NlJuMlNCd0NmMzlMbkxkMWRZeGdJOXZseWpwQWRUdHlkdTlxbytjN09GRVZsaDlvNEtDWmRaRU5sXFxcXG43c2hWM1BITExLK29vMU84cU9CNE9kUFJXS3NLSVo2cWlEWFQyaVkxMHZJMGxlNVR4QzlWWjJWYzFJM2ltaGN5MWRRR2lWOW12Sk83XFxcXG4yV21oYzdENHl6cEd5TXBITWJSZ2lKSzNVSEVEem9xMmU0WTNNem1NZUd5Tmw0azR5am8zOTZYYUtQZHlGWVlwM1BmbnV0Nkp6WDEvXFxcXG5DTEtXMlppcEdkVnFDK1REQTAycStLckZaUjU5Wkl6bGljZitPYUNQcnJLVFM4MnBTYm5aQmlrblRGaE9vODZWeW9rMVhrdkJNYmNPXFxcXG5TYzhLbldub1FxVVNZdlRqTnFJNm9BYkNRK0xuNysvY0JVZXBnN0w0bHcwNlFvcHRUZWFHOUM0cVZqMm5tRmU1Rm9rNEFPNlFha2FtXFxcXG5WalBvY1VjK2NzS1kxNVlNSW5HZDVEdXIxVzBzM21EUEluVExvRGwvT0d1SmcwbHl3aUhYUzJva0FFbU9GTmZvOW5lNzkwU0dnSXFZXFxcXG5UK2xtbitlU0NyZDhTMUsrYllBNzM1QjhpZ0owSC9peW85NE1mTmU5NGpFWWNxN21LbnBJM3NpQXY0MjVLTVVzaG04ZDNVcmd6S3dQXFxcXG5RRDZKVHlVelBrdEJLRmdVR2lRNENsZGxUV1ZvV01LZlVnM1hkZVcrYnlvc3J1L1grODdQZ2o3dHM4WTV0ajFJa1ZjRkZzdFdRK2MzXFxcXG5qT2ZNN01nNElXUG5sUElZc0xOODBWZVQyclJyZG85Rk8yWjlJZFVpSGRXK1AyemhEWlBwWk4zaURwSk42SGowcWE5VS8vWCtjRlUxXFxcXG5keXRsSTEvbWZYeDVuZ1hmYWtuNjNKanU5ZXRlWXdxS21OZk9QSVZnNGFoNG0ya1g4Z1lJS3B6NGN2Y0krM3p1ekVmVWF4ZldOcG1pXFxcXG41UCtzcnZEOFdNTUF6blNveXlMUGxCZzhjYzJnRGFQRXlDR29GMVVVVTBhVURLOHRQa24vVkFiZmdZVXNLbkhZR1Q1SFBDbFlWVkZFXFxcXG5aSnpRWjc5eUl4ay9nZ3VZNGEwaDRzbDNYSGwvM25hK1dDRTFsV0xrVFVuM09SNnVZQm9kellJM0pXLzZYTHlOVmRYRThvVG5NUFBQXFxcXG41NE0xVk9ldkprR2JCdkw4di9pRzJZbU1OM3d1TWxuYUhIbGphMk5ublY2S2tleUx4S3JBc1cwNWNEYXF1ZFp4SE0vemFBV0RZVGh4XFxcXG5vY0ZETVJvK01sUk16NFFmS0t3eWZ2YVdGa0RKcGo1MGk4a1NaZTNRQzRsUFl1eVRJVkJicmlvR0YrTmdheHJGZFNpbG1GWmYxM3BGXFxcXG5OMWpBMXZtT3ZuTTBBUGZ6dXViR1Z3RGNFZkc0WnhYNzRhcVAvQ1lSMUZjU0Nick5sZ0FXUUZiN1ZNY3BhektBUGl4RHdHbWFrK2k1XFxcXG5QOWZjVjIvemRjWEcxWC95SEJwbGE2MllLZUhJZlJuSTlWMGE1eEUyRW10T3lDYlBrbGVMcnBSd2xTS3h2cjNGWmNtd1dneC9BdnFjXFxcXG5VeTdlNERQbEttZ1R5dFBPY0NNWlhzV2YrS0ZFZnMvemtFTnNwUmVWc3RvdUJ2bG9HcjNmeTlaajF4YjdjMnEwR3pMOUE4eVVZZldOXFxcXG5HZDk0eWovdDREelBSRzQrZ1J2UkJ1NzRoRVRhell5VzJqcXhBREZidlduRVJEMzFlcnpPYzd4ZkVTdWxtaEFJbStJVXdjL1BEN2NxXFxcXG5zT0ViYkgySzM3ZEZWWVNhdXdjUURlN2pVZDh4bGVPZTcrSzFHQ3RnODJJQTdYNTZTbFllZzRCd1lnRjEwUjd0UU1NQVhrSzcxcXZ5XFxcXG5IRlpPdU9wUjROQXc5aDFTV2VkdnFkZDhzdzZkVzJGRzJ5cEtpYVRydWxMY2ltdEdoSkFVWC91c3dLUW1lQ04xdkJESFF6SHl0R1hsXFxcXG5PVEhDY2JKRjZ6RkFvcVp2ektCMDBSb0duSmZDcG9LUmN5dVpiYUt2T0IxazBwdHlSdlM2c0JPQUJoanhORWFRRENJcDlPd2ViWjkyXFxcXG44L2w4K0VKTURxM0VHNnBqU2tPREZpNW56UldxU2w4bFArVGVmaTNmSlUxRTJFcFlLblQ5bkpJcVc2UHJuZFNFZmJ3dmlwQzBVYkxRXFxcXG5ySSsyaVkwNk1jSllodGc4OHpoMHI0QzY4bG9EZGdyMDkvZFhkYTlrVGJYWjVwYnpVQnZTZm5JZzFEZkpnQU5abnB6bGdFdnJnMFlPXFxcXG53RCtmTzRhN3o1Vkt2Q1ZuZUNPTUMvV080K1YrSnQ2VG93VzVKT0xITExMK08xNnNkUnpIaTlPQXovTzhYaStwa3pCSGJVdUJlNFZoXFxcXG5TRDZsMzcvZmIrNDIxdkxSV3I2YWE2enR5ODBvYlExdCs1K2pia2VYbHZzOEtrOUNPSzNQNENnRTFCMnB4Z3BGcXM3cDMyUE12T1daXFxcXG5MSXhReWRkMThVS0ZJZi9NN1V0VTMyYVdrekk2ZlZWYVlBYzRDdjVmekl1U2l2VVpHY1hXYmtuOHJBcXpFVGp3cDZLUElrRGcyNk1WXFxcXG5qSjlVRmsxMmxJNkkvaTV3T0ZaVnFRa25yZ2RwM3F3TzhvNzBMV1BSU0tvb2FPOTM2eXRHU29ZOTFHUEFqSEE1MnVGbVozVndkNXM5XFxcXG40QnQ3cHovUjd2YlFKZlE5bUxiVXZLZDVJd09ZUTg1eVhZdjVaSTBhbGdGdWpsV05NZEloVlF0ZHlpR2JLTzJxVThBeU1TTzlhb3FsXFxcXG4ydVZnZElsSURPL1BhVFAyMDc1bHFyeTFWdjRLS3hZMTMvZWQ3OXNvYkZQc3VCQkNhVTF4WFN5RGwzZHp0M0h3VzVQNlZrVGtraTNOXFxcXG4raURWZW5YWjdDZ3ROelYwbnFmWjRYNW1wc2IrcFJZaUhvMnVVdHlabFArYzZldTZKd0JtUVZHSHpUK0o1WjJkZGs0d3MrdTZQcDhQXFxcXG4zMWZiV3VOYjdWVFdVNlBqS1M2TnZ2dUZibjEzOXhVQkVmMk5ZaE0rS240YWRXWjkraklGbFdBWmdINXVZeGwyNmJFZXFsZUlhYi9mXFxcXG5iMVVrczRsWXZZS3Y4M2dhYmhZQXhyb3lFVUt5S1d1c3Eyd0xiUzZ5SGoxWE42Q1hxRXowdzl5V1cwa2c1WmdtbjdMbFZSR1dXUTRrXFxcXG5nQy9Ub0NaejNsMTRscW1VamVvSHk3Tjk3REYyY1Zyck9QMmNpRWtwTW9aWnpZaDFHYU4ycHFnNVJ0bVBQdmJ6K1pqWjhUck5ESWJZXFxcXG4wZ2dxa3RyOUNxOWRKWDJNRVpZUDNkdTZZMHBxVmFzUSswcFJaU2lsQzR5VlVmU284eEpaczlLK3ZTaU03b0hxR1dURkdiVmxpUVdEXFxcXG5abUpaUS9LUVJVTkZhaXJsUE43djk0L3NCbXUyK0xTUStXTDFqZHAvZ2tBN21lYllkTjg3SmRrMlZnZVl4Q0ZzbmIxUm8rWmdJaDZHXFxcXG5nSXBCWGJycDdtYWgxZXBrNGM5OThla2dIYk5KQmJVTHJyK2VhQzVBeUY5TFAyT2RNbGVKYklWdjlQZHQ1TXpoZUltWFNueXkvOVBLXFxcXG4vcjZ4aHMvOFg3UDVVOCttdHJudmxJNDJ4S2QvMVRsNjlXTXBjU2lVZUh0RzNGbWx1ZTlvcmYzOC9Nd3RpRWY2cm1sM0wzUWNmWDBYXFxcXG5ZVTVjYTd3UmE1eExMSnRaUHZtN2t3ejNiKy9CbGNTNEhJNjc5M2Z3ZkdNUERsbHRkRG9iL3NiQy8xZjlaS1dpamMwTzhodFNTazUyXFxcXG51SiswREtEdEMwMFRiV2tQQUNJc1gvUjBucWNqeklJckxtZzkyVElMQzYwMWk3a28yL3BEaE9COWJWMHVRaEV3Zk5UdnBiZmRnY2Q0XFxcXG54eEhFZkR0SlBpMzNmK1Q3RXJFeU1sbExHKytRSWp2bkE2cXNZSkI1bTZ6ZklPdHBXMnFQKzJrdTlZZUNvSXhxMnJwb1JGK1FIWkpyXFxcXG5xREUxcVlpeUR5NjF0NGdhejlFNXF5M3VTTXlDcW1SU1ZsclRXKytSeGo3WU9aQlVwRDVDVWhabVVPY1Jwa09sVzJEaEg0REpVN1E1XFxcXG5pd2poMmQ1K2g5UnhYWTg3WHE5WmtpN1VuUFRRcjJvNXc5QmF1OXV5T08zSVpTazZLaXFTUGJUMUJZRzhoYTBzakxHK25ZNUhkY1BuXFxcXG5FbFVzRU9MbFFTeVNBLzE1NHJvNjk3a3ZrOVo3YjhxOW0yeENvLzVLWVZ2UVIzTkxmNnN6Zm5NTXl2Y0FBQVl4U1VSQlZDYnJvN1VQXFxcXG5PckRQNTNZLzA0WFFGV3RzU2x6dldOYk9GTkJwa041YXU5NmZkai9GbXN2b3RCSDJoTit2Y0FFQVZ5eExqWGhxV0xWRXpJNXdhdEZFXFxcXG40alRwVGFWRFMreXpNMjFLbWZWb004c3BOQjJiemhuMkRzaHJZV01yenJFdkFISldrNDlZVXpvaEVRS0g2Wks0SmVhdTYzcXVXL2ZiXFxcXG53K0ptRmlGbVQ3b1l4MjVqaXJiSXdyOWFYUGxjN3RHZk1odnIxZW5sOVJ4MUlIb24yZ1JybmxoSmpjSlNQOE0rSkNCK2ZuNncwb0thXFxcXG5MUW5OQnVFZTY1YVVXTzJkWHk0Qjc3QUo3c3lDRmFkNkZVZkVBTmVrTEVHRXVicmdYSjFFOVdwY0ltRHBiK3ZNRFpXNDFrVmxhcXVQXFxcXG5VaDFFV0Y0b3Y4NzFUWVBmbjlTMTloWEFlVHJRMEtZZ0ZFMXRISGtYQVBjOTl1YmEzakpVVkp1SDd2M0Evbjgrbi80dXhIV0FKazdTXFxcXG4zWHZvbmQ4UEhyZXh4cU0vS1ZOd1N1ZnVrbGlydUVNU3hYbW5GVjhtQlpkQlNsMDYrODZ3MUxRT2dCTEVXZ1IvWkJ1dGtKaEVvUm9SXFxcXG4xelZ6SHhVclpSMXJRVU5ER2xzTExKeVJjWmxkMUErS1ZOVmM4UWVPTlk3Uk1GbE5uaDNDbUVES3A3aDRWNFZZZmtoeXpDU1FXYTl0XFxcXG5SVTRmaVdKcmNHZGcwTXo2b3hqc2E3SmNrWFhPeUF3MElOWVhTWnRaak1xeVFsVTFwQVp1YTBRTDRMN3YzOTlmUHZXbGVpWHN1RjdwXFxcXG5lZVo4azFuZlVxRnJpRmV5TnhTWjFod29mZUlkM2VFc0JVelY0ZmpzcmZYTkRoVDRlaSs5aXJXaE5LOWMra1FjcUgvWG52UDdMTkVvXFxcXG5mUlhjeFJyL3BsdldWUSsyUlFIUDgyVGxXbnZPL3RCa2xVKzBlOTNFUzRlQTVYVU9ORjd1V1dEaXJDaEU5WFZxTWxSeU1nWlFRL3JNXFxcXG5ER213U2JQSDhjcXRMUFIyWXhpNUxyQTl6NVZ4UllTc1dZNzVBcnQ5NUFWUHR1MWNyNklvMkgrLy8veisvclByTEdTS1F3T2t5UkNJXFxcXG5YSVZkeTZUVW9jbkJQN1ZNb1dSQ3JLa2pEWm1IVnZKU1VBOGxBYXN4bWhsMW96OFJjY04vOUZYUCtUNmJVaWt0Yks3Qk5XVERkbUV3XFxcXG5UaGJQYUdjTThQam5uNDhkcCs2UVJqbjRtT2tuODBCaUVtT2h3OVp0UkRJTXBQR09BS01iVjVQS0p4WVN1RVhodlFSSUxGTWZyVFYzXFxcXG5aTGhDUVR4UDVNMlR6V043YWpNaUFEK09WOGJwT1VlZUhpSm5vUE54ZHA2L0h3WFgrOU9vVFZZdHIvZk5lbkk3RG52LytYMnVtMDlpXFxcXG5FZFFVOGRkYjV6NEw4NmxTOVFENXpYM2ZYT0N0eGtMS2h4QS8yWU9vMUVWTTJvL24yeTdLYlN5TmdNd09rLzU4Yks2cW91UnBER1lLXFxcXG5uTXNIaUJsUmtaREloK2F2TnBmakl1Ly8rZk9IMFlWTHZadWRvVWFKM1I2ZVV6cG0vVEU1N1lTdGU1UHlvRmJhTExrZWJjd0RQYzlTXFxcXG44RjBCQXNBanJMVWJzdFZqYTIyazF3Y0xKcXJPZFpYZU14YTdMaXRyeTFHZ2dIVnV3WmdUR3B1dHJzek1BRCtPUmU1Ly92eHA2OHRuXFxcXG5uK3ZPOTNlcWI2T1U3UEFuV3AzRHgwaDFJRkVIYzRGeXFQWnN2TU1uclhod0FsOWMwWHcrS0ZlOU04YWpvaEJYUTFBb3M3RS9BTEwwXFxcXG5vOXRYRlBBcTFmSXVYYmd5S0pJQVZpcGdFc3NXR0Jvb3JtMjRjVVl2MlRLNzJyMVg5TGF6UW13Y3MxSWtoSkZkMGtXZVFPTFBrWWU0XFxcXG43S0VoQi94WTVxaWNZVGhSUnZ2SXV2YVFkUWV2R1RlTU9hN3JpYkFTbHYzdEF5dnBwWWFWNDVvYitnckYvWXV0aE9GdXorOC9mNTVyXFxcXG4yZEZUVnpibE1JbnJTUkdFU1VSb0ZVYWxURVhwU0hoVmx1ZHpQeVkxcXliN25MZXhxSm1hYUxJdWg5MmxQWkh1bVNua3JYTXFSTE1TXFxcXG50WlVxbHdqSUFrbXBvTTJnWGp0c1krcVdicnlFcEhua3NoREZYMGdLd3RGaHNPdUliOXFzZVdxN3hRMFc4OFF3WjFveE5ja1BsQkVyXFxcXG5MeVVyNHl6SjBKOC96L0xrSWJFZkVSYU5FMXJZN0YxbDNVVndwRkFtTnJ0elBwWVpMMHFLcldrSVlHdEZJYU1PdUYzUC9mbDk1OVBoXFxcXG4zRWRTTzVQdjVlcmJPY1VJM1RWNnAwQ0xhSnBVcXRqTFozM0tpbDJIcFAvNVBkR2FMV2RGZ3BwVFhtb3lVYUlSYXk0TjBBbnNXUFBWXFxcXG53Z3h0WGU3ZWxocXM2ZER5RzUwZzV5aW9DVFdkSFA3bjg4a3VxVC9nL3hvK09RZFBwdjhxY2UwNkIybG1yQ3lUbUlvVGVOYXRCUFNjXFxcXG5ySVRrVTF6ODFiMC94cHVKSDYwcWVycDh1aXpUVjJJTmNReVRaKzlsbTdiWjg0QktoQXJnMWt1VHdkZUhBWGdWbWprT3MrUHp1Zk1aXFxcXG5tVmpkTytXV3EyVG5XZ1gxRDJwS2V1UUpmUVp6UUpKRXdSWUlILzJURWtuVnBtNjBjS2ptVDZYeUJHb1V3ZythMnZFdUliT2RwRUdkXFxcXG5rU3BZeVNNTFdQLzV6MzlzRFlxYXJFUlU0K1AvRWZINys1dlpXYXh6cEhsK092bi9BM09xa1IwNzBldy9BQUFBQUVsRlRrU3VRbUNDXFxcXG5cXFwiLFxcXCJwYXJ0XFxcIjpbe1xcXCJkZWZlY3RpdmVfZnJvbnRfcGFydHNcXFwiOlxcXCJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSGdBQUFCNENBSUFBQUMyQnFHRkFBQUFBM05DU1ZRSUNBamI0VS9nQUFBZ0FFbEVRVlI0XFxcXG5uSDE5YlpManVvNXNBcExyenN4eVpndHZFMi8vaXpoZHRpUmlmb0JNSmtIM1VYUjB1R3lKSW9GRTRvTVVaZi8vLy8ydkJmSTRmMTdIXFxcXG5jVmdnSXN5c3RkWVFadWJ1QU5xRGlEQVBod0dJQ0xpWjljOFd5TSt0dFd3dHIwVjRSTUJhL3VydUZtaXR3UTFBTklzSXQraU5tSVVoXFxcXG5JZ0NZV1hiTURtK3RtVmwyS1Qva0NlNGVjcmo3Y1J6Wmdmdy9UK2o5YVUzLzFDL05iTjUwakNJL1o4c0FzdVg4SnMvSjgzbnIwcjNuXFxcXG5lU2c2TTNOdC9icXU1M215M1d5T2NuVDN2RWFQdkFmUHlhYllBMzdXay9PMGJJcVhjUEI2STE2ZVBkWUxlYksyMzVIUkd0WEE3L1BEXFxcXG5jUnphaUkyRHZkSm1WZlRaSlpXdnRrekZkS0I4RzJORU9JQ0dmaHNMM0orTGtJd0loem5HQUR5TzB5TGlpZlpFNDExYnU4MENiayswXFxcXG5ocTViOXNZdER1KzlpV2J0V2RSZ0hyQVdoaWRhR01JNmxCd1JEK0RXRUFodkQyZ1FFS05KV0tpWThodUtnT01uRWlPQ2w2ZjB2NnBjXFxcXG5OYVFINFovdEtMeXlXWVdkYXE2Q0ZNQjkzOVFKMWE2TnN0KzlvWGEweHptd29tb2R0aXFmWm9nVi9xMjE1M2tJQi8yZVB4VzBGalBTXFxcXG5QbUJZVXBFc3Z5ZWY4RFNlcklMbVQ2UWFIYzVYK2FxNWRFUURDQU44WG54ZFYwSU1BOWVkV0VXbGFRZkoyckRtc05NUEFFOTB2RmlBXFxcXG5iRzRCdERDUHZGY1lDaEdaMlhFY2srQUN4OUY3MlZIZnJEMWRTV3I3UlpmcEE5QzZhMUVzcTE3MTFyeGNUUm5ib2FjcE12Wm1PVFR0XFxcXG5ZZitLZ0oycXZoKzBDVGUxV2IwZWdxUFdHdkdpS0ZiOVU4a3BXY0tUZ09KZ3lMWmxHT3huUWE2ZW5KZERtRUY1WTI5S2U2alFUckhFXFxcXG42b2ZLdFlXN2lYcitSQUZXWklXaElWcHI5MzByWXh6bWpFK1diajNOQW5sVml1K0tObm5RclNIU1lnQ1k5d0dqQmRyQVppQXRabUhiXFxcXG5hRlJ3djlCRHBZWTF0SmlLTklUaGVSN0Mzd2IxVWU3dXJ0eUZZUTBxTDhwb2wvVXVYQ1dvci9ydzdDZzEwSDJSTzREbmVlNzdMc3FrXFxcXG5CQXNLQ0hrMUszWlI0ZHpsK0R6RUhWYkE4dnhpWnp4SENZUUk1UWNmQi9Hb0hvd1JIanVUZlNqUytkb2ZpS1YrL1o4SHFadzQ4R1RTXFxcXG5MaTlER0tLWjRlaVJRRVQ2bnh6VmRFUXRFb1lPZ3h2YzBNSmg4YlI0Mm84ZnBZdko4anpNckVjVUxTd0E3dzVoMGh4czh2dUlXQkJlXFxcXG5GRWEwNXZuTEhkZjQ1Ry9DSXFWUTFrb2crNW1MRUhRNEsxdnVDUGdTcTJNRUhtbG85MzFmMTR6NWVHV2hUclhOaGFRQ21RRmhQZlp4XFxcXG5sdTdTa1BkZnAwTWVCc1R6UTZJM25rUGtzaWxGSE1XcTdldVhTaVA2L2RkRGFZMW1GK2tNelN3UjBhT0x1TTNIR1lZd0pGbDNyTGtmXFxcXG41ZzJSbkVzTitYa2tzMDkrY0F0UnZDcDgycFNoSWR6UDVOK3BOZ1NqSUljZDVobDdRT0JNWnJUaFYyekVkcEF3aHFvcUdXRDhKUXZqXFxcXG5Ud3Z2RDVGQkhNTlgwQ2d5eU1PV21XRTVNaGhRRlVYRWRWMktQb1hiNUh0M1JndUZHY3RJbnVmaEphUk83YUlKbSt0Z3lLY2NsV1lvXFxcXG5XQk1LNVhFTlF2YWVGNmlxclBlUnFyYllmdjZxV1g3K21tbXRNUVduR1I3SG9melkwV1FXRVovN3VqT3g4NTZWMnVFOWxnaFk0REQzXFxcXG44MGh3c1dRQk56dEcySnUwN3A3WnNPcU1NVzhmZVhSYVR4OFExbGxiRlZBY2IxR0dSbVk1ZUlwYm9WZG9nZTFRMmNxWmlnWVNVUWZzXFxcXG5NQTYxYVVvZmdFZEVncUtFd0ZndEl0RjZYVmNabFdvWXEzbVdYeFdEL0o3aVRzM3JUVFdPM29rWWdNTXlNZUdZVlhPbGZjcWF5dmliXFxcXG5aTFh6SlhJb1JxWjYwa2FvV2tpMjdFOURpdzQ2dldzQ2Foa0FEQzN1ejVVaGNBNnlEOHluZERyWUF3dDJiUDVwZ1hnYVhRTEJtemJSXFxcXG5PM0Q0dEluTXkwZW1hc0xqNlJVU0t4eDhIL25vSk5xQzVTSWRYdlVWSmRnb2E5ZUhFaGRXV21zQTVlQ21wYnlOS0xFZHovT1FyOW1KXFxcXG40bExTQytVNUZJSHF2T1RRS2o0YUZ0SEUwMmlrN0tRT2xkK1FGckZpSEg4dkcvR0VYZGE3VmtxNG9xTERSdVZrZVgrZDdoWU1jb3N6XFxcXG5aZXpSRUdFdDRHRzQyOU5kVUNBWm5KWjQrcEdsaHZNOFo2RGRJbzJqRERLUk82T1h3eHNxM0pRMzBnNHNjUHJCTUNsUFM4elNZdEFpXFxcXG5tVDMvbVhCb1NDekJBMEFtQVpTKy9xUjZMWnJER2pXV3V4eG1tWXNnT1ZyRFVnakg2UTFLdDY3cnV1OGJLN3NwRmlMaVBNL1NnaXBjXFxcXG4yVlBCZ3RXUSthYzZsbklWNzZqOTU3Z2dqaEVDNnE4VW9lZncvM0k3N1hhSVkxUWtzZkl6aStDOFRXcmo2K0FQYzRkWk9Jc2QxOTErXFxcXG4zeGR4VFdTTmF5eUxHMzdPZ3R6OFByczdLaElXU0ViV0FTL250NUZBTW5jZFBQaVZiYnY5S2JvM2dkTElPR1JtQm9VbDJLeExMVERXXFxcXG5HTncyWmxkOXpQUEwyZXo5bm10aUFDZGo3Yy9uUXdvMjhmNXNyVHZHYjQxUS93VHBYaXBqSDlTRWQ5TXBkcTJ3WWd0cUpjVzJWSm9tXFxcXG5QdU03MXcxWjMvZk5oRWkxb3Bjd25Jc0lWOFBVVGlpQkxLSjgybUYrSHVZV1lmamNsM3JrYnIvcDd2UExaR0UzZUk4M09uWVVwMy9KXFxcXG5ialFhVTdIeWp1cFVpeWZ2RFE0TGdIQ0xvbXJQZ09ZeFJtRWpYQ3QwcWhNVTJsdUtzY244VG9Vek5jWm9GOEpmWm5hZXAwS2d0ZlorXFxcXG52N0ZOZzJwSlRFbGMvYnV5Y0FsczlWQ1VVUitGTWRobXlLSGE0c21sekxTclN1OWJTdDRodk8rajBFb3JvUkd6dGV4UG42WFYyNlQrXFxcXG5zUnFPbWJXRysyNEFVc29xZlFBTjhmdDVoOEhQZzFFRXVUdGpqMTVhc3A1VkFwMS9WU0xrZXNwbG9UV2JjNXZrZXFXUmlNZ0tJdStlXFxcXG5XZWhVTFl3RzFHdUgzNVE2dGVKbXg4eFQrRDlGbVpHb1p1R0sxMklCZGQ2RXd5NkJvUlpvOUJ3YnlkNzcvUzdrdzVsVFZYaTVQYzlYXFxcXG5uUEluUmJFaVRqR096ZXgyOFgzMUU5b2xqbFJQVU9KUzhXSEFXVSt6elcyVTRHMlpTY281RkpWRjVpYm42U3duTHdISnFJUkFaZ2tTXFxcXG5SSnltNnVhY1dCNlJieGwyWjE1RXppVWFaNjhEOFN3enpTb1J6dHJvQ1lucnRKNmNVd2ZBT1NER01HaHhyRXN0RkxaRml3b0ZFdjMrXFxcXG5xOG9hQXQvRXFHTWtjcEI1Z1RZT3lrdVR2YUtyL2szNDUzMXIwc2gyMk84U0FMalBLSDQzRjJ3VXY0dEFpZDQya2cycHZlbTF4YmFLXFxcXG55UGFUZlMyWlFzQ3VSc3hSNndsejdLb3VkcmUxOWp4UHh0c3Ftc1NkV3FLWlplNEhhN0QyK1gyM2U1UWR4T1Byc1Z4K2VFUG5VeHNSXFxcXG5icUsrMkdiZUpXMk9scFJoK0dHZWZRNkRIVjRrTWtVcGZxSm5qSUVNdE9mYXF5MTFMTVN5bTVkV0lFeW91V1F4UzhLU3hKcEFabDZuXFxcXG5scFhMb2xnNVdqUTIvdng4UG9WL0k1YjRGQ1BNS0VOaWEra1NOSXpSNGZsYThOMlJ6bTlLNGI4Y2U0WDY2eEdqVXJaSElQeS9yZk84XFxcXG5PaUorT1BkR09jamRrTTNzOUlNbHpiWGo0YkJ3UE5IKytmM3pQLy8xMzlhYXdmUDZlSnBaRHhVTXZiWUFvRDNOM1p0RklNd3NuaGE5XFxcXG45MllCRE8rZlZZZzVoc09mMXF3Wmtxa2pFREFLTlBQWHAwVjZMWEhkRWVISDVJRnVORzRCR0JZd1VrUE1vVzFNZ0tsQUNvYmlXekpGXFxcXG5mUFNRT3dQbjh6eE40a0VWTVh0UU1uVVNHUVE3QmRlOFdmbW02SjhuRkRXYkhCQURzcFdtcTFjVXUxYUdaTXRKUHNUbXY2VFViSWZnXFxcXG5wUVJNcGsxS243V0ZLV1VieVVpT1J3czA3SWZxNEt0anpQVktEbnVlNTdxZWF2dWo0Z3d5dU9HSjFybVNDMUF4bHpoRjlNTDNNZ2FaXFxcXG51ZStnQmdBYzVrbmlaSHlDZ05NdWJLRXZWZDNpbjZMUkhyMWxEWDFicUtZNks2bFFyQlVJendudkRNaE11SHpuZnE3cVZGbFQveVJ1XFxcXG45cFV6TWp2VnNnZkZyeGI0OHlmMUNpckJYWnFhOWFyc05QTGRyK1ZkRk10TnByRTEvVlBGVUZZRnlKUzFEY0k1NFpaZVcyWEtENlYvXFxcXG5oWVBVWHM3ekxBRW1SbkI5bm1kWVg2bkhnUmJsUjR3VjFxS1ZralM1ZTBNRUlwZHdlQ280dTkwTGI4TTNSbS81aVlZSU4vZkRvWXQxXFxcXG5CQ0pVekxRZVNSbzdqQkRtUzMyMW9JZUhTcHlOUjRSekpRYldRd21Ma0tGRmtLRktDZHUzV3NSOTMvZDlhNW1KaDBiUTJpMEZtZ0t6XFxcXG5CS2VxMThMbTJOSzVrRFVuNlkzVTVOdFlsS0tZdFpXdmlrcGlMVDJXZ3lZK1FaTUZBV0JaOTZheUxqWTQweTBKVWRnejlkZVVXb2FNXFxcXG43dDdyenFOdVo0RXlNRWkrcHplZFB1ZCtkUDBmaEcyL05PS212L1pxakp5Z3VTalAwZFhpYUtFVFkvLytQMVp1Wk9lN01GV21CZmE3XFxcXG5yUGxOT212TnloU1lESWw0KzdMU0xyWTRXazh1ZklmVnF0UW1GQmF4Umxxa1B0Nk8vUy9wWW9tNzJEaUxHRHJ0cVdJaGg1UU9oMHdXXFxcXG5zelAwYWY3MW1pOWR4MWg2OC9kS0RZQXltSWk0cmd2dFlUelFNN1MxUG1WbW1yOXgxb05JNmJvY2dKM0RrRGwxVlV6UEZRYzJwMlJiXFxcXG5ML1hsK2U1K21LTk5TZ1Y2QXBuWGF0V1h2RmUwcTROZERqTUxUQkpSaFZCcWhUU3BxOWZyVmE3Q0NreHFncUtQaU90NnpKYnA4MTJwXFxcXG5lajdIdkN1dldFelJ0RUtlVkU3WFFqRVZoclZSek9LTmVLMENXYzh2ZjlMczFOYURLYmorck42TStrKzlzeFA1VTZZMlBMa0l2YWdxXFxcXG5QMXpYOWM4L3Y1MTJZVnh4a2ZGMWpKcGNHSWd2alBVYkdYRW55am9MdFFvT01xeDFFQTJGSFo1OHpUWjE3ckZqY015WGs5WVM4bjF4XFxcXG50OHhtUUxpb2tCNEV6bFRWWVFZM0w2ZmFGdHRDTXFqeVUzTHhMbHo5MDJVNVZycjF6K2VqRlhEdE43dFJDRmNGYXV2akJ6eFREVkVCXFxcXG54ZnJNVG95K3JqOWlIbEFHb3JmZytWOUhUVlJwUU5VQk9zNmM2ODl0TGRaRVJHdGdKVS9GcDVjUTFHckkxR3JXQWltZ3orZlQyajB2XFxcXG55YldnTXNQU2U2LzUyNml4VVNKWitjc1ZUTVlvZUN3ZzRXd1IwTmVCZE10NzJxeEgrNkloOGdPNXU2aFF4VW81ZnVWb2ZxQXV6Nkd1XFxcXG5KWGhVMmVrTVFtSE1uVzFKSXhybkFjaGFJR1RpNTNrQXVFWnkvV1Q3YTBLaDNjTWFUVUtBbjZKZU9veEpjZHJQN0UrdVRWZ2tLQ3NsXFxcXG5zKzdLODB2UlEzdSs5NWF5YnEweEJENUVpSjJMT1Z2T01FTnJLRTJXVTZyUUZlbnBPYlVjeUo3ZGQ4dEVodEZDakhySVpOTEI1dkcwXFxcXG4rUlFNaHoxbVNUZzhXZ1pqaVQ1YWd4MkRGbnk2eXJ4RXRkZ1paa1ExNlEvK1pxbThSUC9FaW5HUzVFbmxhSnJYR25KZXFpaEhkVnZZXFxcXG5yVGhvak5sNFpSdnRVSXhLRmdaWjdWa1dMVW1iblowWkZsREcyY2UveGxIVCtDS2MvVy9MTEdWOEM5cTBCZjIvdEt3MkVaSko4SkhwXFxcXG5FOHVTMWpCRGE4dXpMbXpMUnY0TmNRc2wwNkdJSTBKRFFDcERPd1NBMDR5bEJUWDhyRE8wWVJ6emNnTkllY3F6MFNPTmdnbExqZXA5XFxcXG5Xc0NRZnFxQW1yVWtGYnJxc21CTEZSTmJ0U0J5Y3BiNmJBMnRnWFNoNTMxbENUMm9tTHpINi9VcTl3NEpXdFFhc254STR0S3JkQXpwXFxcXG5pa3RRcFZhdkxaZ3NtOW9SdDB0TmtjUVBzUko5QVFHdG4wQlJFYmQxTVlsbFpzaS9OUWdyZmRMNzVTVWNPVHNKOUZDWHN3Y0VCUnZSXFxcXG5sZ2tjUGhROWY5TDVSbGt4aEMxTFlzczhVMDlvcmVYa3pnTHRncEp4RmNWZEFBU3hTeUpHQ1kyeVZ1WkovMFJvemlpTlFHWmtybmhSXFxcXG50TzVRb2pKUFAxN0huR3kwalcwb0F2clZiRGFuejVXT0ZHamxwanBhM2toajV5ODZXQVZYc2xZVllxeHNDekhXSFh6YXo2L0FtdmVGXFxcXG5WdGZXZSt2QTVNcVo5VFBRdWU5N3hOb1ZFUkRrUXZCb1FzMnAvMXdIbkRGSFgyZXRxMDlWQkNNeTZZWTAxb3YydFJ5WlNZWjhPUUlNXFxcXG5lS2VVSHIwaDVucWxGcVdhaUsyVVFmbm85d3BxbnFhVityemQzSE9FZ3RZWXp1UWhzdnkxaERzcG96YldBaE0xQlE2N1liSjZSK2VUXFxcXG5DbE5jNzV5alIzRTRLZ2dJejRSVUNvc2NpL28xWUtVdDdzYWsxc01MdFRXWFRWSzRFUEpVVlpSUmhVeFFTVlhUSXBwWkw2SzMxcEtSXFxcXG54MUFQcys1T3NlSlhxVVBaaHFPS09VSHNMRmxFOUhDQmw1aFpUcGw3QUMzeTZadStXRCtRSVllYlFaMWtzckJYOHJFRzc1UHlROXdaXFxcXG5oeGdnMUZFKzh4c0kyeENqYmV4MVFiaFFoZ3VRVFJ5dVNtZVBncHZzbmxIWVRYbFE1Y3REbllZaUJRQ2Y5TmV4cVpRTEVqWEdLckxRXFxcXG5EcGNnaEtQYnorUnA1ZFlxWHdqNzVUQzUrRmFOUU1mdUhUUjVZd1B0aFYrbVFJdng1bU1zeEhLeFFReHZxOHJUWHJheGVFVTFUNkZmXFxcXG4xOFY2OFZ4ZkdtRFJ1WGRtbEtTWmNQVUs4aXBFRzFWcGpDb2RzNzRpNnpuQUVlZW9LSXIwT1VZS1hXV3REV1lMY3gxRlhwa21iMEpBXFxcXG5KbVZvTTR1dzV3bDNQOCt6VUlGSjNTTldGMkVTQXROaUZGOGNiWW8rbDRVby9MWGZ0bFk1cXBqV1EwVVphL3hiVktKQnV0cEhNWUxZXFxcXG5NbklsVzBXa0lzdzVtNVYxWVIxUDZhajY2OVBubmlaRmpleHh4aWRGRURGcVRCUWlCVjNBTmF1cFl6VUlTNTJKN2hpMUVVZmZ6bW5hXFxcXG41WGpTbHAzVXAyeXlrZU00ZEoxMW9qNmtXczB1RldKa3pLTTZ5OU4wMnJkUTdoS3hGaFpUS0NXcGZ6NmY0emhlcjlkTzNNcm1TcDArXFxcXG5Wb3lZeFBBN0ZsU3BHalh1cXJJUkR4UlM1cG9qZG1ZM0JaWGFiaFBhK082VDlpUUY2OUp5RS9jT01XS01BRGZKNjRsNEtLRG84Zkt5XFxcXG5TVW9ZenA4WEx5dGpVTjJNVGxSUWNJM09ibXVhZ0hIOGZIaDBVdE5ZQ0pxTFdnSGs3RWsrTjdZa3ZtNnNjU2ZNNlRNdzRxVWU3WTZWXFxcXG5wV2l6aW0xYkJZWUR5Ym44djVYQVNxbUVQODIvT1dDVlFwNlhqYjRPUDhTZ3NISVRWa3JpZUlpN3I4K2FLMEVWRHNrQzJQdjl2cTVMXFxcXG5XYktjUC9sa1lJb2ZTcTlLQnFBNlpyUEVHWE1JTllJWTRacXVRVzJ5dmluYjRkYUNrMjM0RElzQ2F2VGdBRHpHYzE3RDlibDc5V3h6XFxcXG5NazRPeWlXQjQrUFJHdDVZVlVMSjZwaGpiSDZUZlVod0xQWXU2NXI1UkVIT1E2cXN6WG9IOVdtYTNnMnBYR2NMdkNyR295SFpQcU1kXFxcXG5BdG0zaXFOQ1IwbXlhNGpvb1BiVXFGUEsra2lBdHM1MlNVK3E1eGpPZ1ZaaTR2MTIrS3YrODlhNTZESS82KzVPcWcrRmlKcUxSbWJsXFxcXG5nVUM5bzJKQ01hY0ExKzdsSlcyZFB5b21ia0xXekJMSjBYUHRkd0lnWmZUejgwT0p1TE1tMTNUTUFMTDlFazJuYUFwalVMaXFiVFUwXFxcXG5HNUc3TGlOdnJYMCtOL09qUkdMZk9ITHN0MGMxRTVVemxjaFZTMUlYVERoejN5ZzFmSDVZekJFeDQ1TXh3Y1R1RlMxU1Nlbk1PMThQXFxcXG5XWGhyR05rMk1sSXVhOUYwREd4eHIwYnhlNTBuTEpoVllJYUVLSlJYS1dlbkd0N3ZkNW1VNFRpTDJraHVER0JNU29hS2F6VXNGWm1lXFxcXG56M29GaE90bWxyU3V3aDZnbkVQclBlUU5PR0I5ZWdWTC9oTkFjejhqbU5HMmlFZWpDd3g2ZXIxZWVXSEVsOUtnQm4vYU9jNVNGZ1Z6XFxcXG5EUG1NekpBUXVHOXF0MUNwMjVuc2RSY1NIVE85aEhCMHFRcnRSQlN5Y1F5L3p4S1lnaS9FcFZNSENhbmxlYU1NcDM1K2ZuUURUNDFYXFxcXG5JQVJYNHB2Q0RJVWlOUEJTUXRDaTFlZnpPYzh6N1dBWE5DL01SSWEvYWhMUGUybndRS0diT0xxQ1plMzVMbXRlVmFUUDB6UVIxMXNzXFxcXG5zdWFLdEVRVDdUMnZIQkxQNmNUSnk3S0NaYTRpVExzK2pzTk0rL1JsN2xGTkdDUEFLTS8yMkxyTkZ3SFJXbnUvMy9TTnliOVpxbVU5XFxcXG5oQ3MzYkRxaXZ0MUhyM3VNeDlNNXM1N3FDZkhQSVpsblNJYlI1cVRTT3FHKzFYS1ZaK2FUV0ZtK3dPWnFYWjdXVWpVcTZDTG04bFlWXFxcXG5Wa0dLZG9XeTVoNTcvRW1qVjk2STFwQkNLY1dRQWsrVkNNVHdhZUJNS0haUGlNMHV0WDJlcWNPbkRXazdyTVIxSm9tSTY3b3lzWGIvXFxcXG5ia2QybkdaSGpGRFQrNHhrTDkwVlU0Z0lSYkh3TzdMNk1ac1ZsNldDdG05UllCbmJmZDk4SG1tQ2ZhelNZMFNjNjVpZTUzbWliNVRXXFxcXG5kOFMrSDMxR1dOVTVmWktzM21PZ3BsNlhIZE0rc0V2VVFRZFdhKzMxZWxIOHhWM3VPeHpGZW1pa2pMOGN0bnAyZmlEVitMckRYSnVUXFxcXG5ESk53MUVuRUNCLzNYY3ZVWW55dHZ0UEFzWlhYdFdXVm9QYTJJTHFjVStTKy8rUVpTRmxmeHBoRDJuRGRRZ1dSbUkwWms5ZmI2NWlIXFxcXG4vckpjbDZzWWVteERLWnZNSW12UVJ2a1dMSnRaR3RCMVhkeTFMR3QxdkRCeDNVT09mQWJTd0dWS2ZhcXdSVDd3RUJJUnhKb1FxVXdoXFxcXG53TmNUaUEveU9IVk1nYmlLTDJjM2ZEd3lENjJwcjFsVEc5TXJMblZPdlgzQlYrbFd1ajVXdEdNTmZtMDR2VjFocWd3YlFZaXVNTjlEXFxcXG5OTUtaNkk1dnV5OHB6OFpmUWt3ZWhVQW9VQ3FweVFNc0hUSHNINGY2UE04SU0zb3NFZkZrTlVPd3I4K3pWOURwUWJ1aitGckRlWjdIXFxcXG5jVmlidHF4R2F0K0NRaG9RblFHL24yVDl0RU8ydGFVMGM5OVVqS3FJSGU2eXFKTTdlNmgyU3p5cVR6YjJ4WUx5YXgvcTJHTVBxMlVIXFxcXG5vNDRwOWFGdC9aS0gva1RJeDhyOVg4WE4rNlhGbEdsMU5vNDFjMU1Pb2FvVXk4UkhST1J1SVhwSFc5TTJ6aHpGTEJzc3hXdmVYZnRqXFxcXG5VaHNvTEJ3U2pKc1VFYWxkcmJzRjkrdGdvOGR4UkZocldiNDRrcS9Ua1dOa2ZXbnlzZm9ybGM0NFd0SnhEa0JMSDcyTEk0WlZOakFKXFxcXG5NM1JJcXA2aTNmeXNzcVltK0t2NlJuMlNCd0NmMzlMbkxkMWRZeGdJOXZseWpwQWRUdHlkdTlxbytjN09GRVZsaDlvNEtDWmRaRU5sXFxcXG43c2hWM1BITExLK29vMU84cU9CNE9kUFJXS3NLSVo2cWlEWFQyaVkxMHZJMGxlNVR4QzlWWjJWYzFJM2ltaGN5MWRRR2lWOW12Sk83XFxcXG4yV21oYzdENHl6cEd5TXBITWJSZ2lKSzNVSEVEem9xMmU0WTNNem1NZUd5Tmw0azR5am8zOTZYYUtQZHlGWVlwM1BmbnV0Nkp6WDEvXFxcXG5DTEtXMlppcEdkVnFDK1REQTAycStLckZaUjU5Wkl6bGljZitPYUNQcnJLVFM4MnBTYm5aQmlrblRGaE9vODZWeW9rMVhrdkJNYmNPXFxcXG5TYzhLbldub1FxVVNZdlRqTnFJNm9BYkNRK0xuNysvY0JVZXBnN0w0bHcwNlFvcHRUZWFHOUM0cVZqMm5tRmU1Rm9rNEFPNlFha2FtXFxcXG5WalBvY1VjK2NzS1kxNVlNSW5HZDVEdXIxVzBzM21EUEluVExvRGwvT0d1SmcwbHl3aUhYUzJva0FFbU9GTmZvOW5lNzkwU0dnSXFZXFxcXG5UK2xtbitlU0NyZDhTMUsrYllBNzM1QjhpZ0owSC9peW85NE1mTmU5NGpFWWNxN21LbnBJM3NpQXY0MjVLTVVzaG04ZDNVcmd6S3dQXFxcXG5RRDZKVHlVelBrdEJLRmdVR2lRNENsZGxUV1ZvV01LZlVnM1hkZVcrYnlvc3J1L1grODdQZ2o3dHM4WTV0ajFJa1ZjRkZzdFdRK2MzXFxcXG5qT2ZNN01nNElXUG5sUElZc0xOODBWZVQyclJyZG85Rk8yWjlJZFVpSGRXK1AyemhEWlBwWk4zaURwSk42SGowcWE5VS8vWCtjRlUxXFxcXG5keXRsSTEvbWZYeDVuZ1hmYWtuNjNKanU5ZXRlWXdxS21OZk9QSVZnNGFoNG0ya1g4Z1lJS3B6NGN2Y0krM3p1ekVmVWF4ZldOcG1pXFxcXG41UCtzcnZEOFdNTUF6blNveXlMUGxCZzhjYzJnRGFQRXlDR29GMVVVVTBhVURLOHRQa24vVkFiZmdZVXNLbkhZR1Q1SFBDbFlWVkZFXFxcXG5aSnpRWjc5eUl4ay9nZ3VZNGEwaDRzbDNYSGwvM25hK1dDRTFsV0xrVFVuM09SNnVZQm9kellJM0pXLzZYTHlOVmRYRThvVG5NUFBQXFxcXG41NE0xVk9ldkprR2JCdkw4di9pRzJZbU1OM3d1TWxuYUhIbGphMk5ublY2S2tleUx4S3JBc1cwNWNEYXF1ZFp4SE0vemFBV0RZVGh4XFxcXG5vY0ZETVJvK01sUk16NFFmS0t3eWZ2YVdGa0RKcGo1MGk4a1NaZTNRQzRsUFl1eVRJVkJicmlvR0YrTmdheHJGZFNpbG1GWmYxM3BGXFxcXG5OMWpBMXZtT3ZuTTBBUGZ6dXViR1Z3RGNFZkc0WnhYNzRhcVAvQ1lSMUZjU0Nick5sZ0FXUUZiN1ZNY3BhektBUGl4RHdHbWFrK2k1XFxcXG5QOWZjVjIvemRjWEcxWC95SEJwbGE2MllLZUhJZlJuSTlWMGE1eEUyRW10T3lDYlBrbGVMcnBSd2xTS3h2cjNGWmNtd1dneC9BdnFjXFxcXG5VeTdlNERQbEttZ1R5dFBPY0NNWlhzV2YrS0ZFZnMvemtFTnNwUmVWc3RvdUJ2bG9HcjNmeTlaajF4YjdjMnEwR3pMOUE4eVVZZldOXFxcXG5HZDk0eWovdDREelBSRzQrZ1J2UkJ1NzRoRVRhell5VzJqcXhBREZidlduRVJEMzFlcnpPYzd4ZkVTdWxtaEFJbStJVXdjL1BEN2NxXFxcXG5zT0ViYkgySzM3ZEZWWVNhdXdjUURlN2pVZDh4bGVPZTcrSzFHQ3RnODJJQTdYNTZTbFllZzRCd1lnRjEwUjd0UU1NQVhrSzcxcXZ5XFxcXG5IRlpPdU9wUjROQXc5aDFTV2VkdnFkZDhzdzZkVzJGRzJ5cEtpYVRydWxMY2ltdEdoSkFVWC91c3dLUW1lQ04xdkJESFF6SHl0R1hsXFxcXG5PVEhDY2JKRjZ6RkFvcVp2ektCMDBSb0duSmZDcG9LUmN5dVpiYUt2T0IxazBwdHlSdlM2c0JPQUJoanhORWFRRENJcDlPd2ViWjkyXFxcXG44L2w4K0VKTURxM0VHNnBqU2tPREZpNW56UldxU2w4bFArVGVmaTNmSlUxRTJFcFlLblQ5bkpJcVc2UHJuZFNFZmJ3dmlwQzBVYkxRXFxcXG5ySSsyaVkwNk1jSllodGc4OHpoMHI0QzY4bG9EZGdyMDkvZFhkYTlrVGJYWjVwYnpVQnZTZm5JZzFEZkpnQU5abnB6bGdFdnJnMFlPXFxcXG53RCtmTzRhN3o1Vkt2Q1ZuZUNPTUMvV080K1YrSnQ2VG93VzVKT0xITExMK08xNnNkUnpIaTlPQXovTzhYaStwa3pCSGJVdUJlNFZoXFxcXG5TRDZsMzcvZmIrNDIxdkxSV3I2YWE2enR5ODBvYlExdCs1K2pia2VYbHZzOEtrOUNPSzNQNENnRTFCMnB4Z3BGcXM3cDMyUE12T1daXFxcXG5MSXhReWRkMThVS0ZJZi9NN1V0VTMyYVdrekk2ZlZWYVlBYzRDdjVmekl1U2l2VVpHY1hXYmtuOHJBcXpFVGp3cDZLUElrRGcyNk1WXFxcXG5qSjlVRmsxMmxJNkkvaTV3T0ZaVnFRa25yZ2RwM3F3TzhvNzBMV1BSU0tvb2FPOTM2eXRHU29ZOTFHUEFqSEE1MnVGbVozVndkNXM5XFxcXG40QnQ3cHovUjd2YlFKZlE5bUxiVXZLZDVJd09ZUTg1eVhZdjVaSTBhbGdGdWpsV05NZEloVlF0ZHlpR2JLTzJxVThBeU1TTzlhb3FsXFxcXG4ydVZnZElsSURPL1BhVFAyMDc1bHFyeTFWdjRLS3hZMTMvZWQ3OXNvYkZQc3VCQkNhVTF4WFN5RGwzZHp0M0h3VzVQNlZrVGtraTNOXFxcXG4raURWZW5YWjdDZ3ROelYwbnFmWjRYNW1wc2IrcFJZaUhvMnVVdHlabFArYzZldTZKd0JtUVZHSHpUK0o1WjJkZGs0d3MrdTZQcDhQXFxcXG4zMWZiV3VOYjdWVFdVNlBqS1M2TnZ2dUZibjEzOXhVQkVmMk5ZaE0rS240YWRXWjkraklGbFdBWmdINXVZeGwyNmJFZXFsZUlhYi9mXFxcXG5iMVVrczRsWXZZS3Y4M2dhYmhZQXhyb3lFVUt5S1d1c3Eyd0xiUzZ5SGoxWE42Q1hxRXowdzl5V1cwa2c1WmdtbjdMbFZSR1dXUTRrXFxcXG5nQy9Ub0NaejNsMTRscW1VamVvSHk3Tjk3REYyY1Zyck9QMmNpRWtwTW9aWnpZaDFHYU4ycHFnNVJ0bVBQdmJ6K1pqWjhUck5ESWJZXFxcXG4wZ2dxa3RyOUNxOWRKWDJNRVpZUDNkdTZZMHBxVmFzUSswcFJaU2lsQzR5VlVmU284eEpaczlLK3ZTaU03b0hxR1dURkdiVmxpUVdEXFxcXG5abUpaUS9LUVJVTkZhaXJsUE43djk0L3NCbXUyK0xTUStXTDFqZHAvZ2tBN21lYllkTjg3SmRrMlZnZVl4Q0ZzbmIxUm8rWmdJaDZHXFxcXG5nSXBCWGJycDdtYWgxZXBrNGM5OThla2dIYk5KQmJVTHJyK2VhQzVBeUY5TFAyT2RNbGVKYklWdjlQZHQ1TXpoZUltWFNueXkvOVBLXFxcXG4vcjZ4aHMvOFg3UDVVOCttdHJudmxJNDJ4S2QvMVRsNjlXTXBjU2lVZUh0RzNGbWx1ZTlvcmYzOC9Nd3RpRWY2cm1sM0wzUWNmWDBYXFxcXG5ZVTVjYTd3UmE1eExMSnRaUHZtN2t3ejNiKy9CbGNTNEhJNjc5M2Z3ZkdNUERsbHRkRG9iL3NiQy8xZjlaS1dpamMwTzhodFNTazUyXFxcXG51SiswREtEdEMwMFRiV2tQQUNJc1gvUjBucWNqeklJckxtZzkyVElMQzYwMWk3a28yL3BEaE9COWJWMHVRaEV3Zk5UdnBiZmRnY2Q0XFxcXG54eEhFZkR0SlBpMzNmK1Q3RXJFeU1sbExHKytRSWp2bkE2cXNZSkI1bTZ6ZklPdHBXMnFQKzJrdTlZZUNvSXhxMnJwb1JGK1FIWkpyXFxcXG5xREUxcVlpeUR5NjF0NGdhejlFNXF5M3VTTXlDcW1SU1ZsclRXKytSeGo3WU9aQlVwRDVDVWhabVVPY1Jwa09sVzJEaEg0REpVN1E1XFxcXG5pd2poMmQ1K2g5UnhYWTg3WHE5WmtpN1VuUFRRcjJvNXc5QmF1OXV5T08zSVpTazZLaXFTUGJUMUJZRzhoYTBzakxHK25ZNUhkY1BuXFxcXG5FbFVzRU9MbFFTeVNBLzE1NHJvNjk3a3ZrOVo3YjhxOW0yeENvLzVLWVZ2UVIzTkxmNnN6Zm5NTXl2Y0FBQVl4U1VSQlZDYnJvN1VQXFxcXG5PckRQNTNZLzA0WFFGV3RzU2x6dldOYk9GTkJwa041YXU5NmZkai9GbXN2b3RCSDJoTit2Y0FFQVZ5eExqWGhxV0xWRXpJNXdhdEZFXFxcXG40alRwVGFWRFMreXpNMjFLbWZWb004c3BOQjJiemhuMkRzaHJZV01yenJFdkFISldrNDlZVXpvaEVRS0g2Wks0SmVhdTYzcXVXL2ZiXFxcXG53K0ptRmlGbVQ3b1l4MjVqaXJiSXdyOWFYUGxjN3RHZk1odnIxZW5sOVJ4MUlIb24yZ1JybmxoSmpjSlNQOE0rSkNCK2ZuNncwb0thXFxcXG5MUW5OQnVFZTY1YVVXTzJkWHk0Qjc3QUo3c3lDRmFkNkZVZkVBTmVrTEVHRXVicmdYSjFFOVdwY0ltRHBiK3ZNRFpXNDFrVmxhcXVQXFxcXG5VaDFFV0Y0b3Y4NzFUWVBmbjlTMTloWEFlVHJRMEtZZ0ZFMXRISGtYQVBjOTl1YmEzakpVVkp1SDd2M0Evbjgrbi80dXhIV0FKazdTXFxcXG4zWHZvbmQ4UEhyZXh4cU0vS1ZOd1N1ZnVrbGlydUVNU3hYbW5GVjhtQlpkQlNsMDYrODZ3MUxRT2dCTEVXZ1IvWkJ1dGtKaEVvUm9SXFxcXG4xelZ6SHhVclpSMXJRVU5ER2xzTExKeVJjWmxkMUErS1ZOVmM4UWVPTlk3Uk1GbE5uaDNDbUVES3A3aDRWNFZZZmtoeXpDU1FXYTl0XFxcXG5SVTRmaVdKcmNHZGcwTXo2b3hqc2E3SmNrWFhPeUF3MElOWVhTWnRaak1xeVFsVTFwQVp1YTBRTDRMN3YzOTlmUHZXbGVpWHN1RjdwXFxcXG5lZVo4azFuZlVxRnJpRmV5TnhTWjFod29mZUlkM2VFc0JVelY0ZmpzcmZYTkRoVDRlaSs5aXJXaE5LOWMra1FjcUgvWG52UDdMTkVvXFxcXG5mUlhjeFJyL3BsdldWUSsyUlFIUDgyVGxXbnZPL3RCa2xVKzBlOTNFUzRlQTVYVU9ORjd1V1dEaXJDaEU5WFZxTWxSeU1nWlFRL3JNXFxcXG5ER213U2JQSDhjcXRMUFIyWXhpNUxyQTl6NVZ4UllTc1dZNzVBcnQ5NUFWUHR1MWNyNklvMkgrLy8veisvclByTEdTS1F3T2t5UkNJXFxcXG5YSVZkeTZUVW9jbkJQN1ZNb1dSQ3JLa2pEWm1IVnZKU1VBOGxBYXN4bWhsMW96OFJjY04vOUZYUCtUNmJVaWt0Yks3Qk5XVERkbUV3XFxcXG5UaGJQYUdjTThQam5uNDhkcCs2UVJqbjRtT2tuODBCaUVtT2h3OVp0UkRJTXBQR09BS01iVjVQS0p4WVN1RVhodlFSSUxGTWZyVFYzXFxcXG5aTGhDUVR4UDVNMlR6V043YWpNaUFEK09WOGJwT1VlZUhpSm5vUE54ZHA2L0h3WFgrOU9vVFZZdHIvZk5lbkk3RG52LytYMnVtMDlpXFxcXG5FZFFVOGRkYjV6NEw4NmxTOVFENXpYM2ZYT0N0eGtMS2h4QS8yWU9vMUVWTTJvL24yeTdLYlN5TmdNd09rLzU4Yks2cW91UnBER1lLXFxcXG5uTXNIaUJsUmtaREloK2F2TnBmakl1Ly8rZk9IMFlWTHZadWRvVWFKM1I2ZVV6cG0vVEU1N1lTdGU1UHlvRmJhTExrZWJjd0RQYzlTXFxcXG44RjBCQXNBanJMVWJzdFZqYTIyazF3Y0xKcXJPZFpYZU14YTdMaXRyeTFHZ2dIVnV3WmdUR3B1dHJzek1BRCtPUmU1Ly92eHA2OHRuXFxcXG5uK3ZPOTNlcWI2T1U3UEFuV3AzRHgwaDFJRkVIYzRGeXFQWnN2TU1uclhod0FsOWMwWHcrS0ZlOU04YWpvaEJYUTFBb3M3RS9BTEwwXFxcXG5vOXRYRlBBcTFmSXVYYmd5S0pJQVZpcGdFc3NXR0Jvb3JtMjRjVVl2MlRLNzJyMVg5TGF6UW13Y3MxSWtoSkZkMGtXZVFPTFBrWWU0XFxcXG43S0VoQi94WTVxaWNZVGhSUnZ2SXV2YVFkUWV2R1RlTU9hN3JpYkFTbHYzdEF5dnBwWWFWNDVvYitnckYvWXV0aE9GdXorOC9mNTVyXFxcXG4yZEZUVnpibE1JbnJTUkdFU1VSb0ZVYWxURVhwU0hoVmx1ZHpQeVkxcXliN25MZXhxSm1hYUxJdWg5MmxQWkh1bVNua3JYTXFSTE1TXFxcXG50WlVxbHdqSUFrbXBvTTJnWGp0c1krcVdicnlFcEhua3NoREZYMGdLd3RGaHNPdUliOXFzZVdxN3hRMFc4OFF3WjFveE5ja1BsQkVyXFxcXG5MeVVyNHl6SjBKOC96L0xrSWJFZkVSYU5FMXJZN0YxbDNVVndwRkFtTnJ0elBwWVpMMHFLcldrSVlHdEZJYU1PdUYzUC9mbDk1OVBoXFxcXG4zRWRTTzVQdjVlcmJPY1VJM1RWNnAwQ0xhSnBVcXRqTFozM0tpbDJIcFAvNVBkR2FMV2RGZ3BwVFhtb3lVYUlSYXk0TjBBbnNXUFBWXFxcXG53Z3h0WGU3ZWxocXM2ZER5RzUwZzV5aW9DVFdkSFA3bjg4a3VxVC9nL3hvK09RZFBwdjhxY2UwNkIybG1yQ3lUbUlvVGVOYXRCUFNjXFxcXG5ySVRrVTF6ODFiMC94cHVKSDYwcWVycDh1aXpUVjJJTmNReVRaKzlsbTdiWjg0QktoQXJnMWt1VHdkZUhBWGdWbWprT3MrUHp1Zk1aXFxcXG5tVmpkTytXV3EyVG5XZ1gxRDJwS2V1UUpmUVp6UUpKRXdSWUlILzJURWtuVnBtNjBjS2ptVDZYeUJHb1V3ZythMnZFdUliT2RwRUdkXFxcXG5rU3BZeVNNTFdQLzV6MzlzRFlxYXJFUlU0K1AvRWZINys1dlpXYXh6cEhsK092bi9BM09xa1IwNzBldy9BQUFBQUVsRlRrU3VRbUNDXFxcXG5cXFwiLFxcXCJxdWFudGl0eVxcXCI6MSxcXFwicGFydF93YXJyYW50eV9zdGF0dXNcXFwiOjEsXFxcInBhcnRzX25hbWVcXFwiOlxcXCJSRU1PVEUgQ09OVFJPTCBOT1JNQUxcXFwiLFxcXCJyZXF1ZXN0ZWRfaW52ZW50b3J5X2lkXFxcIjpcXFwiMzEyMFxcXCIsXFxcImRlZmVjdGl2ZV9iYWNrX3BhcnRzXFxcIjpcXFwiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUhnQUFBQjRDQUlBQUFDMkJxR0ZBQUFBQTNOQ1NWUUlDQWpiNFUvZ0FBQWdBRWxFUVZSNFxcXFxubkgxOWJaTGp1bzVzQXBMcnpzeHlaZ3R2RTIvL2l6aGR0aVJpZm9CTUprSDNVWFIwdUd5SklvRkU0b01VWmYvLy8vMnZCZkk0ZjE3SFxcXFxuY1ZnZ0lzeXN0ZFlRWnVidUFOcURpREFQaHdHSUNMaVo5YzhXeU0rdHRXd3RyMFY0Uk1CYS91cnVGbWl0d1ExQU5Jc0l0K2lObUlVaFxcXFxuSWdDWVdYYk1EbSt0bVZsMktUL2tDZTRlY3JqN2NSelpnZncvVCtqOWFVMy8xQy9OYk41MGpDSS9aOHNBc3VYOEpzL0o4M25yMHIzblxcXFxuZVNnNk0zTnQvYnF1NTNteTNXeU9jblQzdkVhUHZBZlB5YWJZQTM3V2svTzBiSXFYY1BCNkkxNmVQZFlMZWJLMjM1SFJHdFhBNy9QRFxcXFxuY1J6YWlJMkR2ZEptVmZUWkpaV3Z0a3pGZEtCOEcyTkVPSUNHZmhzTDNKK0xrSXdJaHpuR0FEeU8weUxpaWZaRTQxMWJ1ODBDYmsrMFxcXFxuaHE1YjlzWXREdSs5aVdidFdkUmdIckFXaGlkYUdNSTZsQndSRCtEV0VBaHZEMmdRRUtOSldLaVk4aHVLZ09NbkVpT0NsNmYwdjZwY1xcXFxuTmFRSDRaL3RLTHl5V1lXZGFxNkNGTUI5MzlRSjFhNk5zdCs5b1hhMHh6bXdvbW9kdGlxZlpvZ1YvcTIxNTNrSUIvMmVQeFcwRmpQU1xcXFxuUG1CWVVwRXN2eWVmOERTZXJJTG1UNlFhSGM1WCthcTVkRVFEQ0FOOFhueGRWMElNQTllZFdFV2xhUWZKMnJEbXNOTVBBRTkwdkZpQVxcXFxuYkc0QnREQ1B2RmNZQ2hHWjJYRWNrK0FDeDlGNzJWSGZyRDFkU1dyN1JaZnBBOUM2YTFFc3ExNzExcnhjVFJuYm9hY3BNdlptT1RUdFxcXFxuWWYrS2dKMnF2aCswQ1RlMVdiMGVncVBXR3ZHaUtGYjlVOGtwV2NLVGdPSmd5TFpsR094blFhNmVuSmREbUVGNVkyOUtlNmpRVHJIRVxcXFxuNm9mS3RZVzdpWHIrUkFGV1pJV2hJVnByOTMwcll4em1qRStXYmozTkFubFZpdStLTm5uUXJTSFNZZ0NZOXdHakJkckFaaUF0Wm1IYlxcXFxuYUZSd3Y5QkRwWVkxdEppS05JVGhlUjdDM3diMVVlN3VydHlGWVEwcUw4cG9sL1V1WENXb3Ivcnc3Q2cxMEgyUk80RG5lZTc3THNxa1xcXFxuQkFzS0NIazFLM1pSNGR6bCtEekVIVmJBOHZ4aVp6eEhDWVFJNVFjZkIvR29Ib3dSSGp1VGZTalMrZG9maUtWKy9aOEhxWnc0OEdUU1xcXFxuTGk5REdLS1o0ZWlSUUVUNm54elZkRVF0RW9ZT2d4dmMwTUpoOGJSNDJvOGZwWXZKOGp6TXJFY1VMU3dBN3c1aDBoeHM4dnVJV0JCZVxcXFxuRkVhMDV2bkxIZGY0NUcvQ0lxVlExa29nKzVtTEVIUTRLMXZ1Q1BnU3EyTUVIbWxvOTMxZjE0ejVlR1doVHJYTmhhUUNtUUZoUGZaeFxcXFxubHU3U2tQZGZwME1lQnNUelE2STNua1Brc2lsRkhNV3E3ZXVYU2lQNi9kZERhWTFtRitrTXpTd1IwYU9MdU0zSEdZWXdKRmwzckxrZlxcXFxuNWcyUm5Fc04rWGtrczA5K2NBdFJ2Q3A4MnBTaElkelA1TitwTmdTaklJY2Q1aGw3UU9CTVpyVGhWMnpFZHBBd2hxb3FHV0Q4SlF2alxcXFxuVHd2dkQ1RkJITU5YMENneXlNT1dtV0U1TWhoUUZVWEVkVjJLUG9YYjVIdDNSZ3VGR2N0SW51ZmhKYVJPN2FJSm0rdGd5S2NjbFdZb1xcXFxuV0JNSzVYRU5RdmFlRjZpcXJQZVJxcmJZZnY2cVdYNyttbW10TVFXbkdSN0hvZnpZMFdRV0VaLzd1ak94ODU2VjJ1RTlsZ2hZNEREM1xcXFxuODBod3NXUUJOenRHMkp1MDdwN1pzT3FNTVc4ZmVYUmFUeDhRMWxsYkZWQWNiMUdHUm1ZNWVJcGJvVmRvZ2UxUTJjcVppZ1lTVVFmc1xcXFxuTUE2MWFVb2ZnRWRFZ3FLRXdGZ3RJdEY2WFZjWmxXb1lxM21XWHhXRC9KN2lUczNyVFRXTzNva1lnTU15TWVHWVZYT2xmY3FheXZpYlxcXFxuWkxYekpYSW9ScVo2MGthb1draTI3RTlEaXc0NnZXc0NhaGtBREMzdXo1VWhjQTZ5RDh5bmREcllBd3QyYlA1cGdYZ2FYUUxCbXpiUlxcXFxuTzNENHRJbk15MGVtYXNMajZSVVNLeHg4SC9ub0pOcUM1U0lkWHZVVkpkZ29hOWVIRWhkV1dtc0E1ZUNtcGJ5TktMRWR6L09RcjltSlxcXFxuNGxMU0MrVTVGSUhxdk9UUUtqNGFGdEhFMDJpazdLUU9sZCtRRnJGaUhIOHZHL0dFWGRhN1ZrcTRvcUxEUnVWa2VYK2Q3aFlNY29zelxcXFxuWmV6UkVHRXQ0R0c0MjlOZFVDQVpuSlo0K3BHbGh2TThaNkRkSW8yakRES1JPNk9Yd3hzcTNKUTMwZzRzY1ByQk1DbFBTOHpTWXRBaVxcXFxubVQzL21YQm9TQ3pCQTBBbUFaUysvcVI2TFpyREdqV1d1eHhtbVlzZ09WckRVZ2pINlExS3Q2N3J1dThiSzdzcEZpTGlQTS9TZ2lwY1xcXFxuMlZQQmd0V1ErYWM2bG5JVjc2ajk1N2dnamhFQzZxOFVvZWZ3LzNJNzdYYUlZMVFrc2ZJemkrQzhUV3JqNitBUGM0ZFpPSXNkMTkxK1xcXFxuM3hkeFRXU05heXlMRzM3T2d0ejhQcnM3S2hJV1NFYldBUy9udDVGQU1uY2RQUGlWYmJ2OUtibzNnZExJT0dSbUJvVWwyS3hMTFREV1xcXFxuR053MlpsZDl6UFBMMmV6OW5tdGlBQ2RqN2MvblF3bzI4ZjVzclR2R2I0MVEvd1RwWGlwakg5U0VkOU1wZHEyd1lndHFKY1cyVkpvbVxcXFxuUHVNNzF3MVozL2ZOaEVpMW9wY3duSXNJVjhQVVRpaUJMS0o4Mm1GK0h1WVdZZmpjbDNya2JyL3A3dlBMWkdFM2VJODNPbllVcDMvSlxcXFxuYmpRYVU3SHlqdXBVaXlmdkRRNExnSENMb21yUGdPWXhSbUVqWEN0MHFoTVUybHVLc2NuOFRvVXpOY1pvRjhKZlpuYWVwMEtndGZaK1xcXFxudjdGTmcycEpURWxjL2J1eWNBbHM5VkNVVVIrRk1kaG15S0hhNHNtbHpMU3JTdTliU3Q0aHZPK2owRW9yb1JHenRleFBuNlhWMjZUK1xcXFxuc1JxT21iV0crMjRBVXNvcWZRQU44ZnQ1aDhIUGcxRUV1VHRqajE1YXNwNVZBcDEvVlNMa2VzcGxvVFdiYzV2a2VxV1JpTWdLSXUrZVxcXFxuV2VoVUxZd0cxR3VIMzVRNnRlSm14OHhUK0Q5Rm1aR29adUdLMTJJQmRkNkV3eTZCb1JabzlCd2J5ZDc3L1M3a3c1bFRWWGk1UGM5WFxcXFxublBJblJiRWlUakdPemV4MjhYMzFFOW9samxSUFVPSlM4V0hBV1UrenpXMlU0RzJaU2NvNUZKVkY1aWJuNlN3bkx3SEpxSVJBWmdrU1xcXFxuUkp5bTZ1YWNXQjZSYnhsMloxNUV6aVVhWjY4RDhTd3p6U29SenRyb0NZbnJ0SjZjVXdmQU9TREdNR2h4ckVzdEZMWkZpd29GRXYzK1xcXFxucThvYUF0L0VxR01rY3BCNWdUWU95a3VUdmFLci9rMzQ1MzFyMHNoMjJPOFNBTGpQS0g0M0Yyd1V2NHRBaWQ0MmtnMnB2ZW0xeGJhS1xcXFxueVBhVGZTMlpRc0N1UnN4UjZ3bHo3S291ZHJlMTlqeFB4dHNxbXNTZFdxS1paZTRIYTdEMitYMjNlNVFkeE9QcnNWeCtlRVBuVXhzUlxcXFxuYnFLKzJHYmVKVzJPbHBSaCtHR2VmUTZESFY0a01rVXBmcUpuaklFTXRPZmFxeTExTE1TeW01ZFdJRXlvdVdReFM4S1N4SnBBWmw2blxcXFxubHBYTG9sZzVXalEyL3Z4OFBvVi9JNWI0RkNQTUtFTmlhK2tTTkl6UjRmbGE4TjJSem05SzRiOGNlNFg2NnhHalVyWkhJUHkvcmZPOFxcXFxuT2lKK09QZEdPY2pka00zczlJTWx6YlhqNGJCd1BOSCsrZjN6UC8vMTM5YWF3ZlA2ZUpwWkR4VU12YllBb0QzTjNadEZJTXdzbmhhOVxcXFxuOTJZQkRPK2ZWWWc1aHNPZjFxd1prcWtqRURBS05QUFhwMFY2TFhIZEVlSEg1SUZ1Tkc0QkdCWXdVa1BNb1cxTWdLbEFDb2JpV3pKRlxcXFxuZlBTUU93UG44enhONGtFVk1YdFFNblVTR1FRN0JkZThXZm1tNko4bkZEV2JIQkFEc3BXbXExY1V1MWFHWk10SlBzVG12NlRVYklmZ1xcXFxucFFSTXBrMUtuN1dGS1dVYnlVaU9Sd3MwN0lmcTRLdGp6UFZLRG51ZTU3cWVhdnVqNGd3eXVPR0oxcm1TQzFBeGx6aEY5TUwzTWdhWlxcXFxudWUrZ0JnQWM1a25pWkh5Q2dOTXViS0V2VmQzaW42TFJIcjFsRFgxYnFLWTZLNmxRckJVSXp3bnZETWhNdUh6bmZxN3FWRmxUL3lSdVxcXFxuOXBVek1qdlZzZ2ZGcnhiNDh5ZjFDaXJCWFpxYTlhcnNOUExkcitWZEZNdE5wckUxL1ZQRlVGWUZ5SlMxRGNJNTRaWmVXMlhLRDZWL1xcXFxuaFlQVVhzN3pMQUVtUm5COW5tZFlYNm5IZ1JibFI0d1YxcUtWa2pTNWUwTUVJcGR3ZUNvNHU5MExiOE0zUm0vNWlZWUlOL2ZEb1l0MVxcXFxuQkNKVXpMUWVTUm83akJEbVMzMjFvSWVIU3B5TlI0UnpKUWJXUXdtTGtLRkZrS0ZLQ2R1M1dzUjkzL2Q5YTVtSmgwYlEyaTBGbWdLelxcXFxuQktlcTE4TG0yTks1a0RVbjZZM1U1TnRZbEtLWXRaV3Zpa3BpTFQyV2d5WStRWk1GQVdCWjk2YXlMalk0MHkwSlVkZ3o5ZGVVV29hTVxcXFxuN3Q3cnpxTnVaNEV5TUVpK3B6ZWRQdWQrZFAwZmhHMi9OT0ttdi9acWpKeWd1U2pQMGRYaWFLRVRZLy8rUDFadVpPZTdNRldtQmZhN1xcXFxuclBsTk9tdk55aFNZRElsNCs3TFNMclk0V2s4dWZJZlZxdFFtRkJheFJscWtQdDZPL1MvcFlvbTcyRGlMR0RydHFXSWhoNVFPaDB3V1xcXFxuc3pQMGFmNzFtaTlkeDFoNjgvZEtEWUF5bUlpNHJndnRZVHpRTTdTMVBtVm1tcjl4MW9OSTZib2NnSjNEa0RsMVZVelBGUWMycDJSYlxcXFxuTC9YbCtlNSttS05OU2dWNkFwblhhdFdYdkZlMHE0TmREak1MVEJKUmhWQnFoVFNwcTlmclZhN0NDa3hxZ3FLUGlPdDZ6SmJwODEycFxcXFxuZWo3SHZDdXZXRXpSdEVLZVZFN1hRakVWaHJWUnpPS05lSzBDV2M4dmY5THMxTmFES2JqK3JONk0rays5c3hQNVU2WTJQTGtJdmFncVxcXFxuUDF6WDljOC92NTEyWVZ4eGtmRjFqSnBjR0lndmpQVWJHWEVueWpvTHRRb09NcXgxRUEyRkhaNTh6VFoxN3JGamNNeVhrOVlTOG4xeFxcXFxudDh4bVFMaW9rQjRFemxUVllRWTNMNmZhRnR0Q01xanlVM0x4TGx6OTAyVTVWcnIxeitlakZYRHRON3RSQ0ZjRmF1dmpCenhURFZFQlxcXFxueGZyTVRveStyajlpSGxBR29yZmcrVjlIVFZScFFOVUJPczZjNjg5dExkWkVSR3RnSlUvRnA1Y1ExR3JJMUdyV0FpbWd6K2ZUMmowdlxcXFxueWJXZ01zUFNlNi81MjZpeFVTSlorY3NWVE1Zb2VDd2c0V3dSME5lQmRNdDcycXhIKzZJaDhnTzV1NmhReFVvNWZ1Vm9mcUF1ejZHdVxcXFxuSlhoVTJla01RbUhNblcxSkl4cm5BY2hhSUdUaTUza0F1RVp5L1dUN2EwS2gzY01hVFVLQW42SmVPb3hKY2RyUDdFK3VUVmdrS0NzbFxcXFxucys3SzgwdlJRM3UrOTVheWJxMHhCRDVFaUoyTE9Wdk9NRU5yS0UyV1U2clFGZW5wT2JVY3lKN2RkOHRFaHRGQ2pIcklaTkxCNXZHMFxcXFxuK1JRTWh6MW1TVGc4V2daamlUNWFneDJERm55NnlyeEV0ZGdaWmtRMTZRLytacW04UlAvRWluR1M1RW5sYUpyWEduSmVxaWhIZFZ2WVxcXFxuclRob2pObDRaUnZ0VUl4S0ZnWlo3VmtXTFVtYm5aMFpGbERHMmNlL3hsSFQrQ0tjL1cvTExHVjhDOXEwQmYyL3RLdzJFWkpKOEpIcFxcXFxuRTh1UzFqQkRhOHV6TG16TFJ2NE5jUXNsMDZHSUkwSkRRQ3BET3dTQTA0eWxCVFg4ckRPMFlSenpjZ05JZWNxejBTT05nZ2xMamVwOVxcXFxuV3NDUWZxcUFtclVrRmJycXNtQkxGUk5idFNCeWNwYjZiQTJ0Z1hTaDUzMWxDVDJvbUx6SDYvVXE5dzRKV3RRYXNueEk0dEtyZEF6cFxcXFxuaWt0UXBWYXZMWmdzbTlvUnQwdE5rY1FQc1JKOUFRR3RuMEJSRWJkMU1ZbGxac2kvTlFncmZkTDc1U1VjT1RzSjlGQ1hzd2NFQlJ2UlxcXFxubGdrY1BoUTlmOUw1UmxreGhDMUxZc3M4VTA5b3JlWGt6Z0x0Z3BKeEZjVmRBQVN4U3lKR0NZMnlWdVpKLzBSb3ppaU5RR1prcm5oUlxcXFxudE81UW9qSlBQMTdIbkd5MGpXMG9BdnJWYkRhbno1V09GR2pscGpwYTNraGo1eTg2V0FWWHNsWVZZcXhzQ3pIV0hYemF6Ni9BbXZlRlxcXFxuVnRmV2UrdkE1TXFaOVRQUXVlOTd4Tm9WRVJEa1F2Qm9RczJwLzF3SG5ERkhYMmV0cTA5VkJDTXk2WVkwMW92MnRSeVpTWVo4T1FJTVxcXFxuZUtlVUhyMGg1bnFsRnFXYWlLMlVRZm5vOXdwcW5xYVYrcnpkM0hPRWd0WVl6dVFoc3Z5MWhEc3BvemJXQWhNMUJRNjdZYko2UitlVFxcXFxuQ2xOYzc1eWpSM0U0S2dnSXo0UlVDb3NjaS9vMVlLVXQ3c2FrMXNNTHRUV1hUVks0RVBKVVZaUlJoVXhRU1ZYVElwcFpMNkszMXBLUlxcXFxueDFBUHMrNU9zZUpYcVVQWmhxT0tPVUhzTEZsRTlIQ0JsNWhaVHBsN0FDM3k2WnUrV0QrUUlZZWJRWjFrc3JCWDhyRUc3NVB5UTl3WlxcXFxuaHhnZzFGRSs4eHNJMnhDamJleDFRYmhRaGd1UVRSeXVTbWVQZ3B2c25sSFlUWGxRNWN0RG5ZWWlCUUNmOU5leHFaUUxFalhHS3JMUVxcXFxuRHBjZ2hLUGJ6K1JwNWRZcVh3ajc1VEM1K0ZhTlFNZnVIVFI1WXdQdGhWK21RSXZ4NW1Nc3hIS3hRUXh2cThyVFhyYXhlRVUxVDZGZlxcXFxuMThWNjhWeGZHbURSdVhkbWxLU1pjUFVLOGlwRUcxVnBqQ29kczc0aTZ6bkFFZWVvS0lyME9VWUtYV1d0RFdZTGN4MUZYcGttYjBKQVxcXFxuSm1Wb000dXc1d2wzUDgrelVJRkozU05XRjJFU0F0TmlGRjhjYllvK2w0VW8vTFhmdGxZNXFwaldRMFVaYS94YlZLSkJ1dHBITVlMWVxcXFxuTW5JbFcwV2tJc3c1bTVWMVlSMVA2YWo2NjlQbm5pWkZqZXh4eGlkRkVERnFUQlFpQlYzQU5hdXBZelVJUzUySjdoaTFFVWZmem1uYVxcXFxuNVhqU2xwM1VwMnl5a2VNNGRKMTFvajZrV3MwdUZXSmt6S002eTlOMDJyZFE3aEt4RmhaVEtDV3BmejZmNHpoZXI5ZE8zTXJtU3AwK1xcXFxuVm95WXhQQTdGbFNwR2pYdXFySVJEeFJTNXBvamRtWTNCWlhhYmhQYStPNlQ5aVFGNjlKeUUvY09NV0tNQURmSjY0bDRLS0RvOGZLeVxcXFxuU1VvWXpwOFhMeXRqVU4yTVRsUlFjSTNPYm11YWdISDhmSGgwVXROWUNKcUxXZ0hrN0VrK043WWt2bTZzY1NmTTZUTXc0cVVlN1k2VlxcXFxucFdpemltMWJCWVlEeWJuOHY1WEFTcW1FUDgyL09XQ1ZRcDZYamI0T1A4U2dzSElUVmtyaWVJaTdyOCthSzBFVkRza0MyUHY5dnE1TFxcXFxuV2JLY1AvbGtZSW9mU3E5S0JxQTZaclBFR1hNSU5ZSVk0WnF1UVcyeXZpbmI0ZGFDazIzNERJc0NhdlRnQUR6R2MxN0Q5Ymw3OVd4elxcXFxuTWs0T3lpV0I0K1BSR3Q1WVZVTEo2cGhqYkg2VGZVaHdMUFl1NjVyNVJFSE9RNnFzelhvSDlXbWEzZzJwWEdjTHZDckdveUhaUHFNZFxcXFxuQXRtM2lxTkNSMG15YTRqb29QYlVxRlBLK2tpQXRzNTJTVStxNXhqT2dWWmk0djEyK0t2Kzg5YTU2REkvNis1T3FnK0ZpSnFMUm1ibFxcXFxuZ1VDOW8ySkNNYWNBMSs3bEpXMmRQeW9tYmtMV3pCTEowWFB0ZHdJZ1pmVHo4ME9KdUxNbTEzVE1BTEw5RWsybmFBcGpVTGlxYlRVMFxcXFxuRzVHN0xpTnZyWDArTi9PalJHTGZPSExzdDBjMUU1VXpsY2hWUzFJWFREaHozeWcxZkg1WXpCRXg0NU14d2NUdUZTMVNTZW5NTzE4UFxcXFxuV1hockdOazJNbEl1YTlGMERHeHhyMGJ4ZTUwbkxKaFZZSWFFS0pSWEtXZW5HdDd2ZDVtVTRUaUwya2h1REdCTVNvYUthelVzRlptZVxcXFxuejNvRmhPdG1sclN1d2g2Z25FUHJQZVFOT0dCOWVnVkwvaE5BY3o4am1ORzJpRWVqQ3d4NmVyMWVlV0hFbDlLZ0JuL2FPYzVTRmdWelxcXFxuRFBtTXpKQVF1RzlxdDFDcDI1bnNkUmNTSFRPOWhIQjBxUXJ0UkJTeWNReS96eEtZZ2kvRXBWTUhDYW5sZWFNTXAzNStmblFEVDQxWFxcXFxuSUFSWDRwdkNESVVpTlBCU1F0Q2kxZWZ6T2M4ejdXQVhOQy9NUklhL2FoTFBlMm53UUtHYk9McUNaZTM1TG10ZVZhVFAwelFSMTFzc1xcXFxuc3VhS3RFUVQ3VDJ2SEJMUDZjVEp5N0tDWmE0aVRMcytqc05NKy9SbDdsRk5HQ1BBS00vMjJMck5Gd0hSV251LzMvU055YjlacW1VOVxcXFxuaENzM2JEcWl2dDFIcjN1TXg5TTVzNTdxQ2ZIUElabG5TSWJSNXFUU09xRysxWEtWWithVFdGbSt3T1pxWFo3V1VqVXE2Q0xtOGxZVlxcXFxuVmtHS2RvV3k1aDU3L0VtalY5NkkxcEJDS2NXUUFrK1ZDTVR3YWVCTUtIWlBpTTB1dFgyZXFjT25EV2s3ck1SMUpvbUk2N295c1hiL1xcXFxuYmtkMm5HWkhqRkRUKzR4a0w5MFZVNGdJUmJId083TDZNWnNWbDZXQ3RtOVJZQm5iZmQ5OEhtbUNmYXpTWTBTYzY1aWU1M21pYjVUV1xcXFxuZDhTK0gzMUdXTlU1ZlpLczNtT2dwbDZYSGRNK3NFdlVRUWRXYSszMWVsSDh4VjN1T3h6RmVtaWtqTDhjdG5wMmZpRFYrTHJEWEp1VFxcXFxuREpOdzFFbkVDQi8zWGN2VVlueXR2dFBBc1pYWHRXV1ZvUGEySUxxY1UrUysvK1FaU0ZsZnhwaEQybkRkUWdXUm1JMFprOWZiNjVpSFxcXFxuL3JKY2w2c1llbXhES1p2TUltdlFSdmtXTEp0Wkd0QjFYZHkxTEd0MXZEQngzVU9PZkFiU3dHVktmYXF3UlQ3d0VCSVJ4Sm9RcVV3aFxcXFxud05jVGlBL3lPSFZNZ2JpS0wyYzNmRHd5RDYycHIxbFRHOU1yTG5WT3ZYM0JWK2xXdWo1V3RHTU5mbTA0dlYxaHFnd2JRWWl1TU45RFxcXFxuTk1LWjZJNXZ1eThwejhaZlFrd2VoVUFvVUNxcHlRTXNIVEhzSDRmNlBNOElNM29zRWZGa05VT3dyOCt6VjlEcFFidWorRnJEZVo3SFxcXFxuY1ZpYnRxeEdhdCtDUWhvUW5RRy9uMlQ5dEVPMnRhVTBjOTlVaktxSUhlNnlxSk03ZTZoMlN6eXFUemIyeFlMeWF4L3EyR01QcTJVSFxcXFxubzQ0cDlhRnQvWktIL2tUSXg4cjlYOFhOKzZYRmxHbDFObzQxYzFNT29hb1V5OFJIUk9SdUlYcEhXOU0yemh6RkxCc3N4V3ZlWGZ0alxcXFxuVWhzb0xCd1NqSnNVRWFsZHJic0Y5K3RnbzhkeFJGaHJXYjQ0a3EvVGtXTmtmV255c2ZvcmxjNDRXdEp4RGtCTEg3MkxJNFpWTmpBSlxcXFxuTTNSSXFwNmkzZnlzc3FZbStLdjZSbjJTQndDZjM5TG5MZDFkWXhnSTl2bHlqcEFkVHR5ZHU5cW8rYzdPRkVWbGg5bzRLQ1pkWkVObFxcXFxuN3NoVjNQSExMSytvbzFPOHFPQjRPZFBSV0tzS0laNnFpRFhUMmlZMTB2STBsZTVUeEM5VloyVmMxSTNpbWhjeTFkUUdpVjltdkpPN1xcXFxuMldtaGM3RDR5enBHeU1wSE1iUmdpSkszVUhFRHpvcTJlNFkzTXptTWVHeU5sNGs0eWpvMzk2WGFLUGR5RllZcDNQZm51dDZKelgxL1xcXFxuQ0xLVzJaaXBHZFZxQytUREEwMnErS3JGWlI1OVpJemxpY2YrT2FDUHJyS1RTODJwU2JuWkJpa25URmhPbzg2VnlvazFYa3ZCTWJjT1xcXFxuU2M4S25Xbm9RcVVTWXZUak5xSTZvQWJDUStMbjcrL2NCVWVwZzdMNGx3MDZRb3B0VGVhRzlDNHFWajJubUZlNUZvazRBTzZRYWthbVxcXFxuVmpQb2NVYytjc0tZMTVZTUluR2Q1RHVyMVcwczNtRFBJblRMb0RsL09HdUpnMGx5d2lIWFMyb2tBRW1PRk5mbzluZTc5MFNHZ0lxWVxcXFxuVCtsbW4rZVNDcmQ4UzFLK2JZQTczNUI4aWdKMEgvaXlvOTRNZk5lOTRqRVljcTdtS25wSTNzaUF2NDI1S01Vc2htOGQzVXJnekt3UFxcXFxuUUQ2SlR5VXpQa3RCS0ZnVUdpUTRDbGRsVFdWb1dNS2ZVZzNYZGVXK2J5b3NydS9YKzg3UGdqN3RzOFk1dGoxSWtWY0ZGc3RXUStjM1xcXFxuak9mTTdNZzRJV1BubFBJWXNMTjgwVmVUMnJScmRvOUZPMlo5SWRVaUhkVytQMnpoRFpQcFpOM2lEcEpONkhqMHFhOVUvL1grY0ZVMVxcXFxuZHl0bEkxL21mWHg1bmdYZmFrbjYzSmp1OWV0ZVl3cUttTmZPUElWZzRhaDRtMmtYOGdZSUtwejRjdmNJKzN6dXpFZlVheGZXTnBtaVxcXFxuNVArc3J2RDhXTU1Bem5Tb3l5TFBsQmc4Y2MyZ0RhUEV5Q0dvRjFVVVUwYVVESzh0UGtuL1ZBYmZnWVVzS25IWUdUNUhQQ2xZVlZGRVxcXFxuWkp6UVo3OXlJeGsvZ2d1WTRhMGg0c2wzWEhsLzNuYStXQ0UxbFdMa1RVbjNPUjZ1WUJvZHpZSTNKVy82WEx5TlZkWEU4b1RuTVBQUFxcXFxuNTRNMVZPZXZKa0diQnZMOHYvaUcyWW1NTjN3dU1sbmFISGxqYTJObm5WNktrZXlMeEtyQXNXMDVjRGFxdWRaeEhNL3phQVdEWVRoeFxcXFxub2NGRE1SbytNbFJNejRRZktLd3lmdmFXRmtESnBqNTBpOGtTWmUzUUM0bFBZdXlUSVZCYnJpb0dGK05nYXhyRmRTaWxtRlpmMTNwRlxcXFxuTjFqQTF2bU92bk0wQVBmenV1YkdWd0RjRWZHNFp4WDc0YXFQL0NZUjFGY1NDYnJObGdBV1FGYjdWTWNwYXpLQVBpeER3R21haytpNVxcXFxuUDlmY1YyL3pkY1hHMVgveUhCcGxhNjJZS2VISWZSbkk5VjBhNXhFMkVtdE95Q2JQa2xlTHJwUndsU0t4dnIzRlpjbXdXZ3gvQXZxY1xcXFxuVXk3ZTREUGxLbWdUeXRQT2NDTVpYc1dmK0tGRWZzL3prRU5zcFJlVnN0b3VCdmxvR3IzZnk5WmoxeGI3YzJxMEd6TDlBOHlVWWZXTlxcXFxuR2Q5NHlqL3Q0RHpQUkc0K2dSdlJCdTc0aEVUYXpZeVcyanF4QURGYnZXbkVSRDMxZXJ6T2M3eGZFU3VsbWhBSW0rSVV3Yy9QRDdjcVxcXFxuc09FYmJIMkszN2RGVllTYXV3Y1FEZTdqVWQ4eGxlT2U3K0sxR0N0ZzgySUE3WDU2U2xZZWc0QndZZ0YxMFI3dFFNTUFYa0s3MXF2eVxcXFxuSEZaT3VPcFI0TkF3OWgxU1dlZHZxZGQ4c3c2ZFcyRkcyeXBLaWFUcnVsTGNpbXRHaEpBVVgvdXN3S1FtZUNOMXZCREhRekh5dEdYbFxcXFxuT1RIQ2NiSkY2ekZBb3FadnpLQjAwUm9HbkpmQ3BvS1JjeXVaYmFLdk9CMWswcHR5UnZTNnNCT0FCaGp4TkVhUURDSXA5T3dlYlo5MlxcXFxuOC9sOCtFSk1EcTNFRzZwalNrT0RGaTVuelJXcVNsOGxQK1RlZmkzZkpVMUUyRXBZS25UOW5KSXFXNlBybmRTRWZid3ZpcEMwVWJMUVxcXFxuckkrMmlZMDZNY0pZaHRnODh6aDByNEM2OGxvRGRncjA5L2RYZGE5a1RiWFo1cGJ6VUJ2U2ZuSWcxRGZKZ0FOWm5wemxnRXZyZzBZT1xcXFxud0QrZk80YTd6NVZLdkNWbmVDT01DL1dPNCtWK0p0NlRvd1c1Sk9MSExMTCtPMTZzZFJ6SGk5T0F6L084WGkrcGt6QkhiVXVCZTRWaFxcXFxuU0Q2bDM3L2ZiKzQyMXZMUldyNmFhNnp0eTgwb2JRMXQrNStqYmtlWGx2czhLazlDT0szUDRDZ0UxQjJweGdwRnFzN3AzMlBNdk9XWlxcXFxuTEl4UXlkZDE4VUtGSWYvTTdVdFUzMmFXa3pJNmZWVmFZQWM0Q3Y1ZnpJdVNpdlVaR2NYV2JrbjhyQXF6RVRqd3A2S1BJa0RnMjZNVlxcXFxuako5VUZrMTJsSTZJL2k1d09GWlZxUWtucmdkcDNxd084bzcwTFdQUlNLb29hTzkzNnl0R1NvWTkxR1BBakhBNTJ1Rm1aM1Z3ZDVzOVxcXFxuNEJ0N3B6L1I3dmJRSmZROW1MYlV2S2Q1SXdPWVE4NXlYWXY1WkkwYWxnRnVqbFdOTWRJaFZRdGR5aUdiS08ycVU4QXlNU085YW9xbFxcXFxuMnVWZ2RJbElETy9QYVRQMjA3NWxxcnkxVnY0S0t4WTEzL2VkNzlzb2JGUHN1QkJDYVUxeFhTeURsM2R6dDNId1c1UDZWa1Rra2kzTlxcXFxuK2lEVmVuWFo3Q2d0TnpWMG5xZlo0WDVtcHNiK3BSWWlIbzJ1VXR5WmxQK2M2ZXU2SndCbVFWR0h6VCtKNVoyZGRrNHdzK3U2UHA4UFxcXFxuMzFmYld1TmI3VlRXVTZQaktTNk52dnVGYm4xMzl4VUJFZjJOWWhNK0tuNGFkV1o5K2pJRmxXQVpnSDV1WXhsMjZiRWVxbGVJYWIvZlxcXFxuYjFVa3M0bFl2WUt2ODNnYWJoWUF4cm95RVVLeUtXdXNxMndMYlM2eUhqMVhONkNYcUV6MHc5eVdXMGtnNVpnbW43TGxWUkdXV1E0a1xcXFxuZ0MvVG9DWnozbDE0bHFtVWplb0h5N045N0RGMmNWcnJPUDJjaUVrcE1vWlp6WWgxR2FOMnBxZzVSdG1QUHZieitaalo4VHJOREliWVxcXFxuMGdncWt0cjlDcTlkSlgyTUVaWVAzZHU2WTBwcVZhc1ErMHBSWlNpbEM0eVZVZlNvOHhKWnM5Syt2U2lNN29IcUdXVEZHYlZsaVFXRFxcXFxuWm1KWlEvS1FSVU5GYWlybFBON3Y5NC9zQm11MitMU1ErV0wxamRwL2drQTdtZWJZZE44N0pkazJWZ2VZeENGc25iMVJvK1pnSWg2R1xcXFxuZ0lwQlhicnA3bWFoMWVwazRjOTk4ZWtnSGJOSkJiVUxycitlYUM1QXlGOUxQMk9kTWxlSmJJVnY5UGR0NU16aGVJbVhTbnl5LzlQS1xcXFxuL3I2eGhzLzhYN1A1VTgrbXRybnZsSTQyeEtkLzFUbDY5V01wY1NpVWVIdEczRm1sdWU5b3JmMzgvTXd0aUVmNnJtbDNMM1FjZlgwWFxcXFxuWVU1Y2E3d1JhNXhMTEp0WlB2bTdrd3ozYisvQmxjUzRISTY3OTNmd2ZHTVBEbGx0ZERvYi9zYkMvMWY5WktXaWpjME84aHRTU2s1MlxcXFxudUorMERLRHRDMDBUYldrUEFDSXNYL1IwbnFjanpJSXJMbWc5MlRJTEM2MDFpN2tvMi9wRGhPQjliVjB1UWhFd2ZOVHZwYmZkZ2NkNFxcXFxueHhIRWZEdEpQaTMzZitUN0VyRXlNbGxMRysrUUlqdm5BNnFzWUpCNW02emZJT3RwVzJxUCsya3U5WWVDb0l4cTJycG9SRitRSFpKclxcXFxucURFMXFZaXlEeTYxdDRnYXo5RTVxeTN1U015Q3FtUlNWbHJUVysrUnhqN1lPWkJVcEQ1Q1VoWm1VT2NScGtPbFcyRGhINERKVTdRNVxcXFxuaXdqaDJkNStoOVJ4WFk4N1hxOVpraTdVblBUUXIybzV3OUJhdTl1eU9PM0laU2s2S2lxU1BiVDFCWUc4aGEwc2pMRytuWTVIZGNQblxcXFxuRWxVc0VPTGxRU3lTQS8xNTRybzY5N2t2azlaN2I4cTltMnhDby81S1lWdlFSM05MZjZzemZuTU15dmNBQUFZeFNVUkJWQ2JybzdVUFxcXFxuT3JEUDUzWS8wNFhRRld0c1NsenZXTmJPRk5CcGtONWF1OTZmZGovRm1zdm90QkgyaE4rdmNBRUFWeXhMalhocVdMVkV6STV3YXRGRVxcXFxuNGpUcFRhVkRTK3l6TTIxS21mVm9NOHNwTkIyYnpobjJEc2hyWVdNcnpyRXZBSEpXazQ5WVV6b2hFUUtINlpLNEplYXU2M3F1Vy9mYlxcXFxudytKbUZpRm1UN29ZeDI1amlyYkl3cjlhWFBsYzd0R2ZNaHZyMWVubDlSeDFJSG9uMmdScm5saEpqY0pTUDhNK0pDQitmbjZ3MG9LYVxcXFxuTFFuTkJ1RWU2NWFVV08yZFh5NEI3N0FKN3N5Q0ZhZDZGVWZFQU5la0xFR0V1YnJnWEoxRTlXcGNJbURwYit2TURaVzQxa1ZsYXF1UFxcXFxuVWgxRVdGNG92ODcxVFlQZm45UzE5aFhBZVRyUTBLWWdGRTF0SEhrWEFQYzk5dWJhM2pKVVZKdUg3djNBL244K24vNHV4SFdBSms3U1xcXFxuM1h2b25kOFBIcmV4eHFNL0tWTndTdWZ1a2xpcnVFTVN4WG1uRlY4bUJaZEJTbDA2Kzg2dzFMUU9nQkxFV2dSL1pCdXRrSmhFb1JvUlxcXFxuMXpWekh4VXJaUjFyUVVOREdsc0xMSnlSY1psZDFBK0tWTlZjOFFlT05ZN1JNRmxObmgzQ21FREtwN2g0VjRWWWZraHl6Q1NRV2E5dFxcXFxuUlU0ZmlXSnJjR2RnME16Nm94anNhN0pja1hYT3lBdzBJTllYU1p0WmpNcXlRbFUxcEFadWEwUUw0TDd2Mzk5ZlB2V2xlaVhzdUY3cFxcXFxuZWVaOGsxbmZVcUZyaUZleU54U1oxaHdvZmVJZDNlRXNCVXpWNGZqc3JmWE5EaFQ0ZWkrOWlyV2hOSzljK2tRY3FIL1hudlA3TE5Fb1xcXFxuZlJYY3hSci9wbHZXVlErMlJRSFA4MlRsV252Ty90QmtsVSswZTkzRVM0ZUE1WFVPTkY3dVdXRGlyQ2hFOVhWcU1sUnlNZ1pRUS9yTVxcXFxuREdtd1NiUEg4Y3F0TFBSMll4aTVMckE5ejVWeFJZU3NXWTc1QXJ0OTVBVlB0dTFjcjZJbzJIKy8vL3orL3JQckxHU0tRd09reVJDSVxcXFxuWElWZHk2VFVvY25CUDdWTW9XUkNyS2tqRFptSFZ2SlNVQThsQWFzeG1obDFvejhSY2NOLzlGWFArVDZiVWlrdGJLN0JOV1REZG1Fd1xcXFxuVGhiUGFHY004UGpubjQ4ZHArNlFSam40bU9rbjgwQmlFbU9odzladFJESU1wUEdPQUtNYlY1UEtKeFlTdUVYaHZRUklMRk1mclRWM1xcXFxuWkxoQ1FUeFA1TTJUeldON2FqTWlBRCtPVjhicE9VZWVIaUpub1BOeGRwNi9Id1hYKzlPb1RWWXRyL2ZOZW5JN0Rudi8rWDJ1bTA5aVxcXFxuRWRRVThkZGI1ejRMODZsUzlRRDV6WDNmWE9DdHhrTEtoeEEvMllPbzFFVk0yby9uMnk3S2JTeU5nTXdPay81OGJLNnFvdVJwREdZS1xcXFxubk1zSGlCbFJrWkRJaCthdk5wZmpJdS8vK2ZPSDBZVkx2WnVkb1VhSjNSNmVVenBtL1RFNTdZU3RlNVB5b0ZiYUxMa2ViY3dEUGM5U1xcXFxuOEYwQkFzQWpyTFVic3RWamEyMmsxd2NMSnFyT2RaWGVNeGE3TGl0cnkxR2dnSFZ1d1pnVEdwdXRyc3pNQUQrT1JlNS8vdnhwNjh0blxcXFxubit2TzkzZXFiNk9VN1BBbldwM0R4MGgxSUZFSGM0RnlxUFpzdk1NbnJYaHdBbDljMFh3K0tGZTlNOGFqb2hCWFExQW9zN0UvQUxMMFxcXFxubzl0WEZQQXExZkl1WGJneUtKSUFWaXBnRXNzV0dCb29ybTI0Y1VZdjJUSzcycjFYOUxhelFtd2NzMUlraEpGZDBrV2VRT0xQa1llNFxcXFxuN0tFaEIveFk1cWljWVRoUlJ2dkl1dmFRZFFldkdUZU1PYTdyaWJBU2x2M3RBeXZwcFlhVjQ1b2IrZ3JGL1l1dGhPRnV6KzgvZjU1clxcXFxuMmRGVFZ6YmxNSW5yU1JHRVNVUm9GVWFsVEVYcFNIaFZsdWR6UHlZMXF5YjduTGV4cUptYWFMSXVoOTJsUFpIdW1TbmtyWE1xUkxNU1xcXFxudFpVcWx3aklBa21wb00yZ1hqdHNZK3FXYnJ5RXBIbmtzaERGWDBnS3d0RmhzT3VJYjlxc2VXcTd4UTBXODhRd1oxb3hOY2tQbEJFclxcXFxuTHlVcjR5ekowSjgvei9Ma0liRWZFUmFORTFyWTdGMWwzVVZ3cEZBbU5ydHpQcFlaTDBxS3JXa0lZR3RGSWFNT3VGM1AvZmw5NTlQaFxcXFxuM0VkU081UHY1ZXJiT2NVSTNUVjZwMENMYUpwVXF0akxaMzNLaWwySHBQLzVQZEdhTFdkRmdwcFRYbW95VWFJUmF5NE4wQW5zV1BQVlxcXFxud2d4dFhlN2VsaHFzNmREeUc1MGc1eWlvQ1RXZEhQN244OGt1cVQvZy94bytPUWRQcHY4cWNlMDZCMmxtckN5VG1Jb1RlTmF0QlBTY1xcXFxucklUa1UxejgxYjAveHB1Skg2MHFlcnA4dWl6VFYySU5jUXlUWis5bG03Ylo4NEJLaEFyZzFrdVR3ZGVIQVhnVm1qa09zK1B6dWZNWlxcXFxubVZqZE8rV1dxMlRuV2dYMUQycEtldVFKZlFaelFKSkV3UllJSC8yVEVrblZwbTYwY0tqbVQ2WHlCR29Vd2crYTJ2RXVJYk9kcEVHZFxcXFxua1NwWXlTTUxXUC81ejM5c0RZcWFyRVJVNCtQL0VmSDcrNXZaV2F4enBIbCtPdm4vQTNPcWtSMDcwZXcvQUFBQUFFbEZUa1N1UW1DQ1xcXFxuXFxcIixcXFwicGFydHNfdHlwZVxcXCI6XFxcIlJlbW90ZVxcXCJ9LHtcXFwiZGVmZWN0aXZlX2Zyb250X3BhcnRzXFxcIjpcXFwiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUhnQUFBQjRDQUlBQUFDMkJxR0ZBQUFBQTNOQ1NWUUlDQWpiNFUvZ0FBQWdBRWxFUVZSNFxcXFxubkgxOWJaTGp1bzVzQXBMcnpzeHlaZ3R2RTIvL2l6aGR0aVJpZm9CTUprSDNVWFIwdUd5SklvRkU0b01VWmYvLy8vMnZCZkk0ZjE3SFxcXFxuY1ZnZ0lzeXN0ZFlRWnVidUFOcURpREFQaHdHSUNMaVo5YzhXeU0rdHRXd3RyMFY0Uk1CYS91cnVGbWl0d1ExQU5Jc0l0K2lObUlVaFxcXFxuSWdDWVdYYk1EbSt0bVZsMktUL2tDZTRlY3JqN2NSelpnZncvVCtqOWFVMy8xQy9OYk41MGpDSS9aOHNBc3VYOEpzL0o4M25yMHIzblxcXFxuZVNnNk0zTnQvYnF1NTNteTNXeU9jblQzdkVhUHZBZlB5YWJZQTM3V2svTzBiSXFYY1BCNkkxNmVQZFlMZWJLMjM1SFJHdFhBNy9QRFxcXFxuY1J6YWlJMkR2ZEptVmZUWkpaV3Z0a3pGZEtCOEcyTkVPSUNHZmhzTDNKK0xrSXdJaHpuR0FEeU8weUxpaWZaRTQxMWJ1ODBDYmsrMFxcXFxuaHE1YjlzWXREdSs5aVdidFdkUmdIckFXaGlkYUdNSTZsQndSRCtEV0VBaHZEMmdRRUtOSldLaVk4aHVLZ09NbkVpT0NsNmYwdjZwY1xcXFxuTmFRSDRaL3RLTHl5V1lXZGFxNkNGTUI5MzlRSjFhNk5zdCs5b1hhMHh6bXdvbW9kdGlxZlpvZ1YvcTIxNTNrSUIvMmVQeFcwRmpQU1xcXFxuUG1CWVVwRXN2eWVmOERTZXJJTG1UNlFhSGM1WCthcTVkRVFEQ0FOOFhueGRWMElNQTllZFdFV2xhUWZKMnJEbXNOTVBBRTkwdkZpQVxcXFxuYkc0QnREQ1B2RmNZQ2hHWjJYRWNrK0FDeDlGNzJWSGZyRDFkU1dyN1JaZnBBOUM2YTFFc3ExNzExcnhjVFJuYm9hY3BNdlptT1RUdFxcXFxuWWYrS2dKMnF2aCswQ1RlMVdiMGVncVBXR3ZHaUtGYjlVOGtwV2NLVGdPSmd5TFpsR094blFhNmVuSmREbUVGNVkyOUtlNmpRVHJIRVxcXFxuNm9mS3RZVzdpWHIrUkFGV1pJV2hJVnByOTMwcll4em1qRStXYmozTkFubFZpdStLTm5uUXJTSFNZZ0NZOXdHakJkckFaaUF0Wm1IYlxcXFxuYUZSd3Y5QkRwWVkxdEppS05JVGhlUjdDM3diMVVlN3VydHlGWVEwcUw4cG9sL1V1WENXb3Ivcnc3Q2cxMEgyUk80RG5lZTc3THNxa1xcXFxuQkFzS0NIazFLM1pSNGR6bCtEekVIVmJBOHZ4aVp6eEhDWVFJNVFjZkIvR29Ib3dSSGp1VGZTalMrZG9maUtWKy9aOEhxWnc0OEdUU1xcXFxuTGk5REdLS1o0ZWlSUUVUNm54elZkRVF0RW9ZT2d4dmMwTUpoOGJSNDJvOGZwWXZKOGp6TXJFY1VMU3dBN3c1aDBoeHM4dnVJV0JCZVxcXFxuRkVhMDV2bkxIZGY0NUcvQ0lxVlExa29nKzVtTEVIUTRLMXZ1Q1BnU3EyTUVIbWxvOTMxZjE0ejVlR1doVHJYTmhhUUNtUUZoUGZaeFxcXFxubHU3U2tQZGZwME1lQnNUelE2STNua1Brc2lsRkhNV3E3ZXVYU2lQNi9kZERhWTFtRitrTXpTd1IwYU9MdU0zSEdZWXdKRmwzckxrZlxcXFxuNWcyUm5Fc04rWGtrczA5K2NBdFJ2Q3A4MnBTaElkelA1TitwTmdTaklJY2Q1aGw3UU9CTVpyVGhWMnpFZHBBd2hxb3FHV0Q4SlF2alxcXFxuVHd2dkQ1RkJITU5YMENneXlNT1dtV0U1TWhoUUZVWEVkVjJLUG9YYjVIdDNSZ3VGR2N0SW51ZmhKYVJPN2FJSm0rdGd5S2NjbFdZb1xcXFxuV0JNSzVYRU5RdmFlRjZpcXJQZVJxcmJZZnY2cVdYNyttbW10TVFXbkdSN0hvZnpZMFdRV0VaLzd1ak94ODU2VjJ1RTlsZ2hZNEREM1xcXFxuODBod3NXUUJOenRHMkp1MDdwN1pzT3FNTVc4ZmVYUmFUeDhRMWxsYkZWQWNiMUdHUm1ZNWVJcGJvVmRvZ2UxUTJjcVppZ1lTVVFmc1xcXFxuTUE2MWFVb2ZnRWRFZ3FLRXdGZ3RJdEY2WFZjWmxXb1lxM21XWHhXRC9KN2lUczNyVFRXTzNva1lnTU15TWVHWVZYT2xmY3FheXZpYlxcXFxuWkxYekpYSW9ScVo2MGthb1draTI3RTlEaXc0NnZXc0NhaGtBREMzdXo1VWhjQTZ5RDh5bmREcllBd3QyYlA1cGdYZ2FYUUxCbXpiUlxcXFxuTzNENHRJbk15MGVtYXNMajZSVVNLeHg4SC9ub0pOcUM1U0lkWHZVVkpkZ29hOWVIRWhkV1dtc0E1ZUNtcGJ5TktMRWR6L09RcjltSlxcXFxuNGxMU0MrVTVGSUhxdk9UUUtqNGFGdEhFMDJpazdLUU9sZCtRRnJGaUhIOHZHL0dFWGRhN1ZrcTRvcUxEUnVWa2VYK2Q3aFlNY29zelxcXFxuWmV6UkVHRXQ0R0c0MjlOZFVDQVpuSlo0K3BHbGh2TThaNkRkSW8yakRES1JPNk9Yd3hzcTNKUTMwZzRzY1ByQk1DbFBTOHpTWXRBaVxcXFxubVQzL21YQm9TQ3pCQTBBbUFaUysvcVI2TFpyREdqV1d1eHhtbVlzZ09WckRVZ2pINlExS3Q2N3J1dThiSzdzcEZpTGlQTS9TZ2lwY1xcXFxuMlZQQmd0V1ErYWM2bG5JVjc2ajk1N2dnamhFQzZxOFVvZWZ3LzNJNzdYYUlZMVFrc2ZJemkrQzhUV3JqNitBUGM0ZFpPSXNkMTkxK1xcXFxuM3hkeFRXU05heXlMRzM3T2d0ejhQcnM3S2hJV1NFYldBUy9udDVGQU1uY2RQUGlWYmJ2OUtibzNnZExJT0dSbUJvVWwyS3hMTFREV1xcXFxuR053MlpsZDl6UFBMMmV6OW5tdGlBQ2RqN2MvblF3bzI4ZjVzclR2R2I0MVEvd1RwWGlwakg5U0VkOU1wZHEyd1lndHFKY1cyVkpvbVxcXFxuUHVNNzF3MVozL2ZOaEVpMW9wY3duSXNJVjhQVVRpaUJMS0o4Mm1GK0h1WVdZZmpjbDNya2JyL3A3dlBMWkdFM2VJODNPbllVcDMvSlxcXFxuYmpRYVU3SHlqdXBVaXlmdkRRNExnSENMb21yUGdPWXhSbUVqWEN0MHFoTVUybHVLc2NuOFRvVXpOY1pvRjhKZlpuYWVwMEtndGZaK1xcXFxudjdGTmcycEpURWxjL2J1eWNBbHM5VkNVVVIrRk1kaG15S0hhNHNtbHpMU3JTdTliU3Q0aHZPK2owRW9yb1JHenRleFBuNlhWMjZUK1xcXFxuc1JxT21iV0crMjRBVXNvcWZRQU44ZnQ1aDhIUGcxRUV1VHRqajE1YXNwNVZBcDEvVlNMa2VzcGxvVFdiYzV2a2VxV1JpTWdLSXUrZVxcXFxuV2VoVUxZd0cxR3VIMzVRNnRlSm14OHhUK0Q5Rm1aR29adUdLMTJJQmRkNkV3eTZCb1JabzlCd2J5ZDc3L1M3a3c1bFRWWGk1UGM5WFxcXFxublBJblJiRWlUakdPemV4MjhYMzFFOW9samxSUFVPSlM4V0hBV1UrenpXMlU0RzJaU2NvNUZKVkY1aWJuNlN3bkx3SEpxSVJBWmdrU1xcXFxuUkp5bTZ1YWNXQjZSYnhsMloxNUV6aVVhWjY4RDhTd3p6U29SenRyb0NZbnJ0SjZjVXdmQU9TREdNR2h4ckVzdEZMWkZpd29GRXYzK1xcXFxucThvYUF0L0VxR01rY3BCNWdUWU95a3VUdmFLci9rMzQ1MzFyMHNoMjJPOFNBTGpQS0g0M0Yyd1V2NHRBaWQ0MmtnMnB2ZW0xeGJhS1xcXFxueVBhVGZTMlpRc0N1UnN4UjZ3bHo3S291ZHJlMTlqeFB4dHNxbXNTZFdxS1paZTRIYTdEMitYMjNlNVFkeE9QcnNWeCtlRVBuVXhzUlxcXFxuYnFLKzJHYmVKVzJPbHBSaCtHR2VmUTZESFY0a01rVXBmcUpuaklFTXRPZmFxeTExTE1TeW01ZFdJRXlvdVdReFM4S1N4SnBBWmw2blxcXFxubHBYTG9sZzVXalEyL3Z4OFBvVi9JNWI0RkNQTUtFTmlhK2tTTkl6UjRmbGE4TjJSem05SzRiOGNlNFg2NnhHalVyWkhJUHkvcmZPOFxcXFxuT2lKK09QZEdPY2pka00zczlJTWx6YlhqNGJCd1BOSCsrZjN6UC8vMTM5YWF3ZlA2ZUpwWkR4VU12YllBb0QzTjNadEZJTXdzbmhhOVxcXFxuOTJZQkRPK2ZWWWc1aHNPZjFxd1prcWtqRURBS05QUFhwMFY2TFhIZEVlSEg1SUZ1Tkc0QkdCWXdVa1BNb1cxTWdLbEFDb2JpV3pKRlxcXFxuZlBTUU93UG44enhONGtFVk1YdFFNblVTR1FRN0JkZThXZm1tNko4bkZEV2JIQkFEc3BXbXExY1V1MWFHWk10SlBzVG12NlRVYklmZ1xcXFxucFFSTXBrMUtuN1dGS1dVYnlVaU9Sd3MwN0lmcTRLdGp6UFZLRG51ZTU3cWVhdnVqNGd3eXVPR0oxcm1TQzFBeGx6aEY5TUwzTWdhWlxcXFxudWUrZ0JnQWM1a25pWkh5Q2dOTXViS0V2VmQzaW42TFJIcjFsRFgxYnFLWTZLNmxRckJVSXp3bnZETWhNdUh6bmZxN3FWRmxUL3lSdVxcXFxuOXBVek1qdlZzZ2ZGcnhiNDh5ZjFDaXJCWFpxYTlhcnNOUExkcitWZEZNdE5wckUxL1ZQRlVGWUZ5SlMxRGNJNTRaWmVXMlhLRDZWL1xcXFxuaFlQVVhzN3pMQUVtUm5COW5tZFlYNm5IZ1JibFI0d1YxcUtWa2pTNWUwTUVJcGR3ZUNvNHU5MExiOE0zUm0vNWlZWUlOL2ZEb1l0MVxcXFxuQkNKVXpMUWVTUm83akJEbVMzMjFvSWVIU3B5TlI0UnpKUWJXUXdtTGtLRkZrS0ZLQ2R1M1dzUjkzL2Q5YTVtSmgwYlEyaTBGbWdLelxcXFxuQktlcTE4TG0yTks1a0RVbjZZM1U1TnRZbEtLWXRaV3Zpa3BpTFQyV2d5WStRWk1GQVdCWjk2YXlMalk0MHkwSlVkZ3o5ZGVVV29hTVxcXFxuN3Q3cnpxTnVaNEV5TUVpK3B6ZWRQdWQrZFAwZmhHMi9OT0ttdi9acWpKeWd1U2pQMGRYaWFLRVRZLy8rUDFadVpPZTdNRldtQmZhN1xcXFxuclBsTk9tdk55aFNZRElsNCs3TFNMclk0V2s4dWZJZlZxdFFtRkJheFJscWtQdDZPL1MvcFlvbTcyRGlMR0RydHFXSWhoNVFPaDB3V1xcXFxuc3pQMGFmNzFtaTlkeDFoNjgvZEtEWUF5bUlpNHJndnRZVHpRTTdTMVBtVm1tcjl4MW9OSTZib2NnSjNEa0RsMVZVelBGUWMycDJSYlxcXFxuTC9YbCtlNSttS05OU2dWNkFwblhhdFdYdkZlMHE0TmREak1MVEJKUmhWQnFoVFNwcTlmclZhN0NDa3hxZ3FLUGlPdDZ6SmJwODEycFxcXFxuZWo3SHZDdXZXRXpSdEVLZVZFN1hRakVWaHJWUnpPS05lSzBDV2M4dmY5THMxTmFES2JqK3JONk0rays5c3hQNVU2WTJQTGtJdmFncVxcXFxuUDF6WDljOC92NTEyWVZ4eGtmRjFqSnBjR0lndmpQVWJHWEVueWpvTHRRb09NcXgxRUEyRkhaNTh6VFoxN3JGamNNeVhrOVlTOG4xeFxcXFxudDh4bVFMaW9rQjRFemxUVllRWTNMNmZhRnR0Q01xanlVM0x4TGx6OTAyVTVWcnIxeitlakZYRHRON3RSQ0ZjRmF1dmpCenhURFZFQlxcXFxueGZyTVRveStyajlpSGxBR29yZmcrVjlIVFZScFFOVUJPczZjNjg5dExkWkVSR3RnSlUvRnA1Y1ExR3JJMUdyV0FpbWd6K2ZUMmowdlxcXFxueWJXZ01zUFNlNi81MjZpeFVTSlorY3NWVE1Zb2VDd2c0V3dSME5lQmRNdDcycXhIKzZJaDhnTzV1NmhReFVvNWZ1Vm9mcUF1ejZHdVxcXFxuSlhoVTJla01RbUhNblcxSkl4cm5BY2hhSUdUaTUza0F1RVp5L1dUN2EwS2gzY01hVFVLQW42SmVPb3hKY2RyUDdFK3VUVmdrS0NzbFxcXFxucys3SzgwdlJRM3UrOTVheWJxMHhCRDVFaUoyTE9Wdk9NRU5yS0UyV1U2clFGZW5wT2JVY3lKN2RkOHRFaHRGQ2pIcklaTkxCNXZHMFxcXFxuK1JRTWh6MW1TVGc4V2daamlUNWFneDJERm55NnlyeEV0ZGdaWmtRMTZRLytacW04UlAvRWluR1M1RW5sYUpyWEduSmVxaWhIZFZ2WVxcXFxuclRob2pObDRaUnZ0VUl4S0ZnWlo3VmtXTFVtYm5aMFpGbERHMmNlL3hsSFQrQ0tjL1cvTExHVjhDOXEwQmYyL3RLdzJFWkpKOEpIcFxcXFxuRTh1UzFqQkRhOHV6TG16TFJ2NE5jUXNsMDZHSUkwSkRRQ3BET3dTQTA0eWxCVFg4ckRPMFlSenpjZ05JZWNxejBTT05nZ2xMamVwOVxcXFxuV3NDUWZxcUFtclVrRmJycXNtQkxGUk5idFNCeWNwYjZiQTJ0Z1hTaDUzMWxDVDJvbUx6SDYvVXE5dzRKV3RRYXNueEk0dEtyZEF6cFxcXFxuaWt0UXBWYXZMWmdzbTlvUnQwdE5rY1FQc1JKOUFRR3RuMEJSRWJkMU1ZbGxac2kvTlFncmZkTDc1U1VjT1RzSjlGQ1hzd2NFQlJ2UlxcXFxubGdrY1BoUTlmOUw1UmxreGhDMUxZc3M4VTA5b3JlWGt6Z0x0Z3BKeEZjVmRBQVN4U3lKR0NZMnlWdVpKLzBSb3ppaU5RR1prcm5oUlxcXFxudE81UW9qSlBQMTdIbkd5MGpXMG9BdnJWYkRhbno1V09GR2pscGpwYTNraGo1eTg2V0FWWHNsWVZZcXhzQ3pIV0hYemF6Ni9BbXZlRlxcXFxuVnRmV2UrdkE1TXFaOVRQUXVlOTd4Tm9WRVJEa1F2Qm9RczJwLzF3SG5ERkhYMmV0cTA5VkJDTXk2WVkwMW92MnRSeVpTWVo4T1FJTVxcXFxuZUtlVUhyMGg1bnFsRnFXYWlLMlVRZm5vOXdwcW5xYVYrcnpkM0hPRWd0WVl6dVFoc3Z5MWhEc3BvemJXQWhNMUJRNjdZYko2UitlVFxcXFxuQ2xOYzc1eWpSM0U0S2dnSXo0UlVDb3NjaS9vMVlLVXQ3c2FrMXNNTHRUV1hUVks0RVBKVVZaUlJoVXhRU1ZYVElwcFpMNkszMXBLUlxcXFxueDFBUHMrNU9zZUpYcVVQWmhxT0tPVUhzTEZsRTlIQ0JsNWhaVHBsN0FDM3k2WnUrV0QrUUlZZWJRWjFrc3JCWDhyRUc3NVB5UTl3WlxcXFxuaHhnZzFGRSs4eHNJMnhDamJleDFRYmhRaGd1UVRSeXVTbWVQZ3B2c25sSFlUWGxRNWN0RG5ZWWlCUUNmOU5leHFaUUxFalhHS3JMUVxcXFxuRHBjZ2hLUGJ6K1JwNWRZcVh3ajc1VEM1K0ZhTlFNZnVIVFI1WXdQdGhWK21RSXZ4NW1Nc3hIS3hRUXh2cThyVFhyYXhlRVUxVDZGZlxcXFxuMThWNjhWeGZHbURSdVhkbWxLU1pjUFVLOGlwRUcxVnBqQ29kczc0aTZ6bkFFZWVvS0lyME9VWUtYV1d0RFdZTGN4MUZYcGttYjBKQVxcXFxuSm1Wb000dXc1d2wzUDgrelVJRkozU05XRjJFU0F0TmlGRjhjYllvK2w0VW8vTFhmdGxZNXFwaldRMFVaYS94YlZLSkJ1dHBITVlMWVxcXFxuTW5JbFcwV2tJc3c1bTVWMVlSMVA2YWo2NjlQbm5pWkZqZXh4eGlkRkVERnFUQlFpQlYzQU5hdXBZelVJUzUySjdoaTFFVWZmem1uYVxcXFxuNVhqU2xwM1VwMnl5a2VNNGRKMTFvajZrV3MwdUZXSmt6S002eTlOMDJyZFE3aEt4RmhaVEtDV3BmejZmNHpoZXI5ZE8zTXJtU3AwK1xcXFxuVm95WXhQQTdGbFNwR2pYdXFySVJEeFJTNXBvamRtWTNCWlhhYmhQYStPNlQ5aVFGNjlKeUUvY09NV0tNQURmSjY0bDRLS0RvOGZLeVxcXFxuU1VvWXpwOFhMeXRqVU4yTVRsUlFjSTNPYm11YWdISDhmSGgwVXROWUNKcUxXZ0hrN0VrK043WWt2bTZzY1NmTTZUTXc0cVVlN1k2VlxcXFxucFdpemltMWJCWVlEeWJuOHY1WEFTcW1FUDgyL09XQ1ZRcDZYamI0T1A4U2dzSElUVmtyaWVJaTdyOCthSzBFVkRza0MyUHY5dnE1TFxcXFxuV2JLY1AvbGtZSW9mU3E5S0JxQTZaclBFR1hNSU5ZSVk0WnF1UVcyeXZpbmI0ZGFDazIzNERJc0NhdlRnQUR6R2MxN0Q5Ymw3OVd4elxcXFxuTWs0T3lpV0I0K1BSR3Q1WVZVTEo2cGhqYkg2VGZVaHdMUFl1NjVyNVJFSE9RNnFzelhvSDlXbWEzZzJwWEdjTHZDckdveUhaUHFNZFxcXFxuQXRtM2lxTkNSMG15YTRqb29QYlVxRlBLK2tpQXRzNTJTVStxNXhqT2dWWmk0djEyK0t2Kzg5YTU2REkvNis1T3FnK0ZpSnFMUm1ibFxcXFxuZ1VDOW8ySkNNYWNBMSs3bEpXMmRQeW9tYmtMV3pCTEowWFB0ZHdJZ1pmVHo4ME9KdUxNbTEzVE1BTEw5RWsybmFBcGpVTGlxYlRVMFxcXFxuRzVHN0xpTnZyWDArTi9PalJHTGZPSExzdDBjMUU1VXpsY2hWUzFJWFREaHozeWcxZkg1WXpCRXg0NU14d2NUdUZTMVNTZW5NTzE4UFxcXFxuV1hockdOazJNbEl1YTlGMERHeHhyMGJ4ZTUwbkxKaFZZSWFFS0pSWEtXZW5HdDd2ZDVtVTRUaUwya2h1REdCTVNvYUthelVzRlptZVxcXFxuejNvRmhPdG1sclN1d2g2Z25FUHJQZVFOT0dCOWVnVkwvaE5BY3o4am1ORzJpRWVqQ3d4NmVyMWVlV0hFbDlLZ0JuL2FPYzVTRmdWelxcXFxuRFBtTXpKQVF1RzlxdDFDcDI1bnNkUmNTSFRPOWhIQjBxUXJ0UkJTeWNReS96eEtZZ2kvRXBWTUhDYW5sZWFNTXAzNStmblFEVDQxWFxcXFxuSUFSWDRwdkNESVVpTlBCU1F0Q2kxZWZ6T2M4ejdXQVhOQy9NUklhL2FoTFBlMm53UUtHYk9McUNaZTM1TG10ZVZhVFAwelFSMTFzc1xcXFxuc3VhS3RFUVQ3VDJ2SEJMUDZjVEp5N0tDWmE0aVRMcytqc05NKy9SbDdsRk5HQ1BBS00vMjJMck5Gd0hSV251LzMvU055YjlacW1VOVxcXFxuaENzM2JEcWl2dDFIcjN1TXg5TTVzNTdxQ2ZIUElabG5TSWJSNXFUU09xRysxWEtWWithVFdGbSt3T1pxWFo3V1VqVXE2Q0xtOGxZVlxcXFxuVmtHS2RvV3k1aDU3L0VtalY5NkkxcEJDS2NXUUFrK1ZDTVR3YWVCTUtIWlBpTTB1dFgyZXFjT25EV2s3ck1SMUpvbUk2N295c1hiL1xcXFxuYmtkMm5HWkhqRkRUKzR4a0w5MFZVNGdJUmJId083TDZNWnNWbDZXQ3RtOVJZQm5iZmQ5OEhtbUNmYXpTWTBTYzY1aWU1M21pYjVUV1xcXFxuZDhTK0gzMUdXTlU1ZlpLczNtT2dwbDZYSGRNK3NFdlVRUWRXYSszMWVsSDh4VjN1T3h6RmVtaWtqTDhjdG5wMmZpRFYrTHJEWEp1VFxcXFxuREpOdzFFbkVDQi8zWGN2VVlueXR2dFBBc1pYWHRXV1ZvUGEySUxxY1UrUysvK1FaU0ZsZnhwaEQybkRkUWdXUm1JMFprOWZiNjVpSFxcXFxuL3JKY2w2c1llbXhES1p2TUltdlFSdmtXTEp0Wkd0QjFYZHkxTEd0MXZEQngzVU9PZkFiU3dHVktmYXF3UlQ3d0VCSVJ4Sm9RcVV3aFxcXFxud05jVGlBL3lPSFZNZ2JpS0wyYzNmRHd5RDYycHIxbFRHOU1yTG5WT3ZYM0JWK2xXdWo1V3RHTU5mbTA0dlYxaHFnd2JRWWl1TU45RFxcXFxuTk1LWjZJNXZ1eThwejhaZlFrd2VoVUFvVUNxcHlRTXNIVEhzSDRmNlBNOElNM29zRWZGa05VT3dyOCt6VjlEcFFidWorRnJEZVo3SFxcXFxuY1ZpYnRxeEdhdCtDUWhvUW5RRy9uMlQ5dEVPMnRhVTBjOTlVaktxSUhlNnlxSk03ZTZoMlN6eXFUemIyeFlMeWF4L3EyR01QcTJVSFxcXFxubzQ0cDlhRnQvWktIL2tUSXg4cjlYOFhOKzZYRmxHbDFObzQxYzFNT29hb1V5OFJIUk9SdUlYcEhXOU0yemh6RkxCc3N4V3ZlWGZ0alxcXFxuVWhzb0xCd1NqSnNVRWFsZHJic0Y5K3RnbzhkeFJGaHJXYjQ0a3EvVGtXTmtmV255c2ZvcmxjNDRXdEp4RGtCTEg3MkxJNFpWTmpBSlxcXFxuTTNSSXFwNmkzZnlzc3FZbStLdjZSbjJTQndDZjM5TG5MZDFkWXhnSTl2bHlqcEFkVHR5ZHU5cW8rYzdPRkVWbGg5bzRLQ1pkWkVObFxcXFxuN3NoVjNQSExMSytvbzFPOHFPQjRPZFBSV0tzS0laNnFpRFhUMmlZMTB2STBsZTVUeEM5VloyVmMxSTNpbWhjeTFkUUdpVjltdkpPN1xcXFxuMldtaGM3RDR5enBHeU1wSE1iUmdpSkszVUhFRHpvcTJlNFkzTXptTWVHeU5sNGs0eWpvMzk2WGFLUGR5RllZcDNQZm51dDZKelgxL1xcXFxuQ0xLVzJaaXBHZFZxQytUREEwMnErS3JGWlI1OVpJemxpY2YrT2FDUHJyS1RTODJwU2JuWkJpa25URmhPbzg2VnlvazFYa3ZCTWJjT1xcXFxuU2M4S25Xbm9RcVVTWXZUak5xSTZvQWJDUStMbjcrL2NCVWVwZzdMNGx3MDZRb3B0VGVhRzlDNHFWajJubUZlNUZvazRBTzZRYWthbVxcXFxuVmpQb2NVYytjc0tZMTVZTUluR2Q1RHVyMVcwczNtRFBJblRMb0RsL09HdUpnMGx5d2lIWFMyb2tBRW1PRk5mbzluZTc5MFNHZ0lxWVxcXFxuVCtsbW4rZVNDcmQ4UzFLK2JZQTczNUI4aWdKMEgvaXlvOTRNZk5lOTRqRVljcTdtS25wSTNzaUF2NDI1S01Vc2htOGQzVXJnekt3UFxcXFxuUUQ2SlR5VXpQa3RCS0ZnVUdpUTRDbGRsVFdWb1dNS2ZVZzNYZGVXK2J5b3NydS9YKzg3UGdqN3RzOFk1dGoxSWtWY0ZGc3RXUStjM1xcXFxuak9mTTdNZzRJV1BubFBJWXNMTjgwVmVUMnJScmRvOUZPMlo5SWRVaUhkVytQMnpoRFpQcFpOM2lEcEpONkhqMHFhOVUvL1grY0ZVMVxcXFxuZHl0bEkxL21mWHg1bmdYZmFrbjYzSmp1OWV0ZVl3cUttTmZPUElWZzRhaDRtMmtYOGdZSUtwejRjdmNJKzN6dXpFZlVheGZXTnBtaVxcXFxuNVArc3J2RDhXTU1Bem5Tb3l5TFBsQmc4Y2MyZ0RhUEV5Q0dvRjFVVVUwYVVESzh0UGtuL1ZBYmZnWVVzS25IWUdUNUhQQ2xZVlZGRVxcXFxuWkp6UVo3OXlJeGsvZ2d1WTRhMGg0c2wzWEhsLzNuYStXQ0UxbFdMa1RVbjNPUjZ1WUJvZHpZSTNKVy82WEx5TlZkWEU4b1RuTVBQUFxcXFxuNTRNMVZPZXZKa0diQnZMOHYvaUcyWW1NTjN3dU1sbmFISGxqYTJObm5WNktrZXlMeEtyQXNXMDVjRGFxdWRaeEhNL3phQVdEWVRoeFxcXFxub2NGRE1SbytNbFJNejRRZktLd3lmdmFXRmtESnBqNTBpOGtTWmUzUUM0bFBZdXlUSVZCYnJpb0dGK05nYXhyRmRTaWxtRlpmMTNwRlxcXFxuTjFqQTF2bU92bk0wQVBmenV1YkdWd0RjRWZHNFp4WDc0YXFQL0NZUjFGY1NDYnJObGdBV1FGYjdWTWNwYXpLQVBpeER3R21haytpNVxcXFxuUDlmY1YyL3pkY1hHMVgveUhCcGxhNjJZS2VISWZSbkk5VjBhNXhFMkVtdE95Q2JQa2xlTHJwUndsU0t4dnIzRlpjbXdXZ3gvQXZxY1xcXFxuVXk3ZTREUGxLbWdUeXRQT2NDTVpYc1dmK0tGRWZzL3prRU5zcFJlVnN0b3VCdmxvR3IzZnk5WmoxeGI3YzJxMEd6TDlBOHlVWWZXTlxcXFxuR2Q5NHlqL3Q0RHpQUkc0K2dSdlJCdTc0aEVUYXpZeVcyanF4QURGYnZXbkVSRDMxZXJ6T2M3eGZFU3VsbWhBSW0rSVV3Yy9QRDdjcVxcXFxuc09FYmJIMkszN2RGVllTYXV3Y1FEZTdqVWQ4eGxlT2U3K0sxR0N0ZzgySUE3WDU2U2xZZWc0QndZZ0YxMFI3dFFNTUFYa0s3MXF2eVxcXFxuSEZaT3VPcFI0TkF3OWgxU1dlZHZxZGQ4c3c2ZFcyRkcyeXBLaWFUcnVsTGNpbXRHaEpBVVgvdXN3S1FtZUNOMXZCREhRekh5dEdYbFxcXFxuT1RIQ2NiSkY2ekZBb3FadnpLQjAwUm9HbkpmQ3BvS1JjeXVaYmFLdk9CMWswcHR5UnZTNnNCT0FCaGp4TkVhUURDSXA5T3dlYlo5MlxcXFxuOC9sOCtFSk1EcTNFRzZwalNrT0RGaTVuelJXcVNsOGxQK1RlZmkzZkpVMUUyRXBZS25UOW5KSXFXNlBybmRTRWZid3ZpcEMwVWJMUVxcXFxuckkrMmlZMDZNY0pZaHRnODh6aDByNEM2OGxvRGRncjA5L2RYZGE5a1RiWFo1cGJ6VUJ2U2ZuSWcxRGZKZ0FOWm5wemxnRXZyZzBZT1xcXFxud0QrZk80YTd6NVZLdkNWbmVDT01DL1dPNCtWK0p0NlRvd1c1Sk9MSExMTCtPMTZzZFJ6SGk5T0F6L084WGkrcGt6QkhiVXVCZTRWaFxcXFxuU0Q2bDM3L2ZiKzQyMXZMUldyNmFhNnp0eTgwb2JRMXQrNStqYmtlWGx2czhLazlDT0szUDRDZ0UxQjJweGdwRnFzN3AzMlBNdk9XWlxcXFxuTEl4UXlkZDE4VUtGSWYvTTdVdFUzMmFXa3pJNmZWVmFZQWM0Q3Y1ZnpJdVNpdlVaR2NYV2JrbjhyQXF6RVRqd3A2S1BJa0RnMjZNVlxcXFxuako5VUZrMTJsSTZJL2k1d09GWlZxUWtucmdkcDNxd084bzcwTFdQUlNLb29hTzkzNnl0R1NvWTkxR1BBakhBNTJ1Rm1aM1Z3ZDVzOVxcXFxuNEJ0N3B6L1I3dmJRSmZROW1MYlV2S2Q1SXdPWVE4NXlYWXY1WkkwYWxnRnVqbFdOTWRJaFZRdGR5aUdiS08ycVU4QXlNU085YW9xbFxcXFxuMnVWZ2RJbElETy9QYVRQMjA3NWxxcnkxVnY0S0t4WTEzL2VkNzlzb2JGUHN1QkJDYVUxeFhTeURsM2R6dDNId1c1UDZWa1Rra2kzTlxcXFxuK2lEVmVuWFo3Q2d0TnpWMG5xZlo0WDVtcHNiK3BSWWlIbzJ1VXR5WmxQK2M2ZXU2SndCbVFWR0h6VCtKNVoyZGRrNHdzK3U2UHA4UFxcXFxuMzFmYld1TmI3VlRXVTZQaktTNk52dnVGYm4xMzl4VUJFZjJOWWhNK0tuNGFkV1o5K2pJRmxXQVpnSDV1WXhsMjZiRWVxbGVJYWIvZlxcXFxuYjFVa3M0bFl2WUt2ODNnYWJoWUF4cm95RVVLeUtXdXNxMndMYlM2eUhqMVhONkNYcUV6MHc5eVdXMGtnNVpnbW43TGxWUkdXV1E0a1xcXFxuZ0MvVG9DWnozbDE0bHFtVWplb0h5N045N0RGMmNWcnJPUDJjaUVrcE1vWlp6WWgxR2FOMnBxZzVSdG1QUHZieitaalo4VHJOREliWVxcXFxuMGdncWt0cjlDcTlkSlgyTUVaWVAzZHU2WTBwcVZhc1ErMHBSWlNpbEM0eVZVZlNvOHhKWnM5Syt2U2lNN29IcUdXVEZHYlZsaVFXRFxcXFxuWm1KWlEvS1FSVU5GYWlybFBON3Y5NC9zQm11MitMU1ErV0wxamRwL2drQTdtZWJZZE44N0pkazJWZ2VZeENGc25iMVJvK1pnSWg2R1xcXFxuZ0lwQlhicnA3bWFoMWVwazRjOTk4ZWtnSGJOSkJiVUxycitlYUM1QXlGOUxQMk9kTWxlSmJJVnY5UGR0NU16aGVJbVhTbnl5LzlQS1xcXFxuL3I2eGhzLzhYN1A1VTgrbXRybnZsSTQyeEtkLzFUbDY5V01wY1NpVWVIdEczRm1sdWU5b3JmMzgvTXd0aUVmNnJtbDNMM1FjZlgwWFxcXFxuWVU1Y2E3d1JhNXhMTEp0WlB2bTdrd3ozYisvQmxjUzRISTY3OTNmd2ZHTVBEbGx0ZERvYi9zYkMvMWY5WktXaWpjME84aHRTU2s1MlxcXFxudUorMERLRHRDMDBUYldrUEFDSXNYL1IwbnFjanpJSXJMbWc5MlRJTEM2MDFpN2tvMi9wRGhPQjliVjB1UWhFd2ZOVHZwYmZkZ2NkNFxcXFxueHhIRWZEdEpQaTMzZitUN0VyRXlNbGxMRysrUUlqdm5BNnFzWUpCNW02emZJT3RwVzJxUCsya3U5WWVDb0l4cTJycG9SRitRSFpKclxcXFxucURFMXFZaXlEeTYxdDRnYXo5RTVxeTN1U015Q3FtUlNWbHJUVysrUnhqN1lPWkJVcEQ1Q1VoWm1VT2NScGtPbFcyRGhINERKVTdRNVxcXFxuaXdqaDJkNStoOVJ4WFk4N1hxOVpraTdVblBUUXIybzV3OUJhdTl1eU9PM0laU2s2S2lxU1BiVDFCWUc4aGEwc2pMRytuWTVIZGNQblxcXFxuRWxVc0VPTGxRU3lTQS8xNTRybzY5N2t2azlaN2I4cTltMnhDby81S1lWdlFSM05MZjZzemZuTU15dmNBQUFZeFNVUkJWQ2JybzdVUFxcXFxuT3JEUDUzWS8wNFhRRld0c1NsenZXTmJPRk5CcGtONWF1OTZmZGovRm1zdm90QkgyaE4rdmNBRUFWeXhMalhocVdMVkV6STV3YXRGRVxcXFxuNGpUcFRhVkRTK3l6TTIxS21mVm9NOHNwTkIyYnpobjJEc2hyWVdNcnpyRXZBSEpXazQ5WVV6b2hFUUtINlpLNEplYXU2M3F1Vy9mYlxcXFxudytKbUZpRm1UN29ZeDI1amlyYkl3cjlhWFBsYzd0R2ZNaHZyMWVubDlSeDFJSG9uMmdScm5saEpqY0pTUDhNK0pDQitmbjZ3MG9LYVxcXFxuTFFuTkJ1RWU2NWFVV08yZFh5NEI3N0FKN3N5Q0ZhZDZGVWZFQU5la0xFR0V1YnJnWEoxRTlXcGNJbURwYit2TURaVzQxa1ZsYXF1UFxcXFxuVWgxRVdGNG92ODcxVFlQZm45UzE5aFhBZVRyUTBLWWdGRTF0SEhrWEFQYzk5dWJhM2pKVVZKdUg3djNBL244K24vNHV4SFdBSms3U1xcXFxuM1h2b25kOFBIcmV4eHFNL0tWTndTdWZ1a2xpcnVFTVN4WG1uRlY4bUJaZEJTbDA2Kzg2dzFMUU9nQkxFV2dSL1pCdXRrSmhFb1JvUlxcXFxuMXpWekh4VXJaUjFyUVVOREdsc0xMSnlSY1psZDFBK0tWTlZjOFFlT05ZN1JNRmxObmgzQ21FREtwN2g0VjRWWWZraHl6Q1NRV2E5dFxcXFxuUlU0ZmlXSnJjR2RnME16Nm94anNhN0pja1hYT3lBdzBJTllYU1p0WmpNcXlRbFUxcEFadWEwUUw0TDd2Mzk5ZlB2V2xlaVhzdUY3cFxcXFxuZWVaOGsxbmZVcUZyaUZleU54U1oxaHdvZmVJZDNlRXNCVXpWNGZqc3JmWE5EaFQ0ZWkrOWlyV2hOSzljK2tRY3FIL1hudlA3TE5Fb1xcXFxuZlJYY3hSci9wbHZXVlErMlJRSFA4MlRsV252Ty90QmtsVSswZTkzRVM0ZUE1WFVPTkY3dVdXRGlyQ2hFOVhWcU1sUnlNZ1pRUS9yTVxcXFxuREdtd1NiUEg4Y3F0TFBSMll4aTVMckE5ejVWeFJZU3NXWTc1QXJ0OTVBVlB0dTFjcjZJbzJIKy8vL3orL3JQckxHU0tRd09reVJDSVxcXFxuWElWZHk2VFVvY25CUDdWTW9XUkNyS2tqRFptSFZ2SlNVQThsQWFzeG1obDFvejhSY2NOLzlGWFArVDZiVWlrdGJLN0JOV1REZG1Fd1xcXFxuVGhiUGFHY004UGpubjQ4ZHArNlFSam40bU9rbjgwQmlFbU9odzladFJESU1wUEdPQUtNYlY1UEtKeFlTdUVYaHZRUklMRk1mclRWM1xcXFxuWkxoQ1FUeFA1TTJUeldON2FqTWlBRCtPVjhicE9VZWVIaUpub1BOeGRwNi9Id1hYKzlPb1RWWXRyL2ZOZW5JN0Rudi8rWDJ1bTA5aVxcXFxuRWRRVThkZGI1ejRMODZsUzlRRDV6WDNmWE9DdHhrTEtoeEEvMllPbzFFVk0yby9uMnk3S2JTeU5nTXdPay81OGJLNnFvdVJwREdZS1xcXFxubk1zSGlCbFJrWkRJaCthdk5wZmpJdS8vK2ZPSDBZVkx2WnVkb1VhSjNSNmVVenBtL1RFNTdZU3RlNVB5b0ZiYUxMa2ViY3dEUGM5U1xcXFxuOEYwQkFzQWpyTFVic3RWamEyMmsxd2NMSnFyT2RaWGVNeGE3TGl0cnkxR2dnSFZ1d1pnVEdwdXRyc3pNQUQrT1JlNS8vdnhwNjh0blxcXFxubit2TzkzZXFiNk9VN1BBbldwM0R4MGgxSUZFSGM0RnlxUFpzdk1NbnJYaHdBbDljMFh3K0tGZTlNOGFqb2hCWFExQW9zN0UvQUxMMFxcXFxubzl0WEZQQXExZkl1WGJneUtKSUFWaXBnRXNzV0dCb29ybTI0Y1VZdjJUSzcycjFYOUxhelFtd2NzMUlraEpGZDBrV2VRT0xQa1llNFxcXFxuN0tFaEIveFk1cWljWVRoUlJ2dkl1dmFRZFFldkdUZU1PYTdyaWJBU2x2M3RBeXZwcFlhVjQ1b2IrZ3JGL1l1dGhPRnV6KzgvZjU1clxcXFxuMmRGVFZ6YmxNSW5yU1JHRVNVUm9GVWFsVEVYcFNIaFZsdWR6UHlZMXF5YjduTGV4cUptYWFMSXVoOTJsUFpIdW1TbmtyWE1xUkxNU1xcXFxudFpVcWx3aklBa21wb00yZ1hqdHNZK3FXYnJ5RXBIbmtzaERGWDBnS3d0RmhzT3VJYjlxc2VXcTd4UTBXODhRd1oxb3hOY2tQbEJFclxcXFxuTHlVcjR5ekowSjgvei9Ma0liRWZFUmFORTFyWTdGMWwzVVZ3cEZBbU5ydHpQcFlaTDBxS3JXa0lZR3RGSWFNT3VGM1AvZmw5NTlQaFxcXFxuM0VkU081UHY1ZXJiT2NVSTNUVjZwMENMYUpwVXF0akxaMzNLaWwySHBQLzVQZEdhTFdkRmdwcFRYbW95VWFJUmF5NE4wQW5zV1BQVlxcXFxud2d4dFhlN2VsaHFzNmREeUc1MGc1eWlvQ1RXZEhQN244OGt1cVQvZy94bytPUWRQcHY4cWNlMDZCMmxtckN5VG1Jb1RlTmF0QlBTY1xcXFxucklUa1UxejgxYjAveHB1Skg2MHFlcnA4dWl6VFYySU5jUXlUWis5bG03Ylo4NEJLaEFyZzFrdVR3ZGVIQVhnVm1qa09zK1B6dWZNWlxcXFxubVZqZE8rV1dxMlRuV2dYMUQycEtldVFKZlFaelFKSkV3UllJSC8yVEVrblZwbTYwY0tqbVQ2WHlCR29Vd2crYTJ2RXVJYk9kcEVHZFxcXFxua1NwWXlTTUxXUC81ejM5c0RZcWFyRVJVNCtQL0VmSDcrNXZaV2F4enBIbCtPdm4vQTNPcWtSMDcwZXcvQUFBQUFFbEZUa1N1UW1DQ1xcXFxuXFxcIixcXFwicXVhbnRpdHlcXFwiOjEsXFxcInBhcnRfd2FycmFudHlfc3RhdHVzXFxcIjoxLFxcXCJwYXJ0c19uYW1lXFxcIjpcXFwiUkVNT1RFIENPTlRST0wgTk9STUFMXFxcIixcXFwicmVxdWVzdGVkX2ludmVudG9yeV9pZFxcXCI6XFxcIjMxMjBcXFwiLFxcXCJkZWZlY3RpdmVfYmFja19wYXJ0c1xcXCI6XFxcImlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFIZ0FBQUI0Q0FJQUFBQzJCcUdGQUFBQUEzTkNTVlFJQ0FqYjRVL2dBQUFnQUVsRVFWUjRcXFxcbm5IMTliWkxqdW81c0FwTHJ6c3h5Wmd0dkUyLy9pemhkdGlSaWZvQk1Ka0gzVVhSMHVHeUpJb0ZFNG9NVVpmLy8vLzJ2QmZJNGYxN0hcXFxcbmNWZ2dJc3lzdGRZUVp1YnVBTnFEaURBUGh3R0lDTGlaOWM4V3lNK3R0V3d0cjBWNFJNQmEvdXJ1Rm1pdHdRMUFOSXNJdCtpTm1JVWhcXFxcbklnQ1lXWGJNRG0rdG1WbDJLVC9rQ2U0ZWNyajdjUnpaZ2Z3L1QrajlhVTMvMUMvTmJONTBqQ0kvWjhzQXN1WDhKcy9KODNucjByM25cXFxcbmVTZzZNM050L2JxdTUzbXkzV3lPY25UM3ZFYVB2QWZQeWFiWUEzN1drL08wYklxWGNQQjZJMTZlUGRZTGViSzIzNUhSR3RYQTcvUERcXFxcbmNSemFpSTJEdmRKbVZmVFpKWld2dGt6RmRLQjhHMk5FT0lDR2Zoc0wzSitMa0l3SWh6bkdBRHlPMHlMaWlmWkU0MTFidTgwQ2JrKzBcXFxcbmhxNWI5c1l0RHUrOWlXYnRXZFJnSHJBV2hpZGFHTUk2bEJ3UkQrRFdFQWh2RDJnUUVLTkpXS2lZOGh1S2dPTW5FaU9DbDZmMHY2cGNcXFxcbk5hUUg0Wi90S0x5eVdZV2RhcTZDRk1COTM5UUoxYTZOc3QrOW9YYTB4em13b21vZHRpcWZab2dWL3EyMTUza0lCLzJlUHhXMEZqUFNcXFxcblBtQllVcEVzdnllZjhEU2VySUxtVDZRYUhjNVgrYXE1ZEVRRENBTjhYbnhkVjBJTUE5ZWRXRVdsYVFmSjJyRG1zTk1QQUU5MHZGaUFcXFxcbmJHNEJ0RENQdkZjWUNoR1oyWEVjaytBQ3g5RjcyVkhmckQxZFNXcjdSWmZwQTlDNmExRXNxMTcxMXJ4Y1RSbmJvYWNwTXZabU9UVHRcXFxcbllmK0tnSjJxdmgrMENUZTFXYjBlZ3FQV0d2R2lLRmI5VThrcFdjS1RnT0pneUxabEdPeG5RYTZlbkpkRG1FRjVZMjlLZTZqUVRySEVcXFxcbjZvZkt0WVc3aVhyK1JBRldaSVdoSVZwcjkzMHJZeHptakUrV2JqM05BbmxWaXUrS05ublFyU0hTWWdDWTl3R2pCZHJBWmlBdFptSGJcXFxcbmFGUnd2OUJEcFlZMXRKaUtOSVRoZVI3QzN3YjFVZTd1cnR5RllRMHFMOHBvbC9VdVhDV29yL3J3N0NnMTBIMlJPNERuZWU3N0xzcWtcXFxcbkJBc0tDSGsxSzNaUjRkemwrRHpFSFZiQTh2eGlaenhIQ1lRSTVRY2ZCL0dvSG93UkhqdVRmU2pTK2RvZmlLVisvWjhIcVp3NDhHVFNcXFxcbkxpOURHS0taNGVpUlFFVDZueHpWZEVRdEVvWU9neHZjME1KaDhiUjQybzhmcFl2Sjhqek1yRWNVTFN3QTd3NWgwaHhzOHZ1SVdCQmVcXFxcbkZFYTA1dm5MSGRmNDVHL0NJcVZRMWtvZys1bUxFSFE0SzF2dUNQZ1NxMk1FSG1sbzkzMWYxNHo1ZUdXaFRyWE5oYVFDbVFGaFBmWnhcXFxcbmx1N1NrUGRmcDBNZUJzVHpRNkkzbmtQa3NpbEZITVdxN2V1WFNpUDYvZGREYVkxbUYra016U3dSMGFPTHVNM0hHWVl3SkZsM3JMa2ZcXFxcbjVnMlJuRXNOK1hra3MwOStjQXRSdkNwODJwU2hJZHpQNU4rcE5nU2pJSWNkNWhsN1FPQk1aclRoVjJ6RWRwQXdocW9xR1dEOEpRdmpcXFxcblR3dnZENUZCSE1OWDBDZ3l5TU9XbVdFNU1oaFFGVVhFZFYyS1BvWGI1SHQzUmd1RkdjdEludWZoSmFSTzdhSUptK3RneUtjY2xXWW9cXFxcbldCTUs1WEVOUXZhZUY2aXFyUGVScXJiWWZ2NnFXWDcrbW1tdE1RV25HUjdIb2Z6WTBXUVdFWi83dWpPeDg1NlYydUU5bGdoWTRERDNcXFxcbjgwaHdzV1FCTnp0RzJKdTA3cDdac09xTU1XOGZlWFJhVHg4UTFsbGJGVkFjYjFHR1JtWTVlSXBib1Zkb2dlMVEyY3FaaWdZU1VRZnNcXFxcbk1BNjFhVW9mZ0VkRWdxS0V3Rmd0SXRGNlhWY1psV29ZcTNtV1h4V0QvSjdpVHMzclRUV08zb2tZZ01NeU1lR1lWWE9sZmNxYXl2aWJcXFxcblpMWHpKWElvUnFaNjBrYW9Xa2kyN0U5RGl3NDZ2V3NDYWhrQURDM3V6NVVoY0E2eUQ4eW5kRHJZQXd0MmJQNXBnWGdhWFFMQm16YlJcXFxcbk8zRDR0SW5NeTBlbWFzTGo2UlVTS3h4OEgvbm9KTnFDNVNJZFh2VVZKZGdvYTllSEVoZFdXbXNBNWVDbXBieU5LTEVkei9PUXI5bUpcXFxcbjRsTFNDK1U1RklIcXZPVFFLajRhRnRIRTAyaWs3S1FPbGQrUUZyRmlISDh2Ry9HRVhkYTdWa3E0b3FMRFJ1VmtlWCtkN2hZTWNvc3pcXFxcblplelJFR0V0NEdHNDI5TmRVQ0FabkpaNCtwR2xodk04WjZEZElvMmpEREtSTzZPWHd4c3EzSlEzMGc0c2NQckJNQ2xQUzh6U1l0QWlcXFxcbm1UMy9tWEJvU0N6QkEwQW1BWlMrL3FSNkxackRHaldXdXh4bW1Zc2dPVnJEVWdqSDZRMUt0NjdydXU4Yks3c3BGaUxpUE0vU2dpcGNcXFxcbjJWUEJndFdRK2FjNmxuSVY3Nmo5NTdnZ2poRUM2cThVb2Vmdy8zSTc3WGFJWTFRa3NmSXppK0M4VFdyajYrQVBjNGRaT0lzZDE5MStcXFxcbjN4ZHhUV1NOYXl5TEczN09ndHo4UHJzN0toSVdTRWJXQVMvbnQ1RkFNbmNkUFBpVmJidjlLYm8zZ2RMSU9HUm1Cb1VsMkt4TExURFdcXFxcbkdOdzJabGQ5elBQTDJlejlubXRpQUNkajdjL25Rd28yOGY1c3JUdkdiNDFRL3dUcFhpcGpIOVNFZDlNcGRxMndZZ3RxSmNXMlZKb21cXFxcblB1TTcxdzFaMy9mTmhFaTFvcGN3bklzSVY4UFVUaWlCTEtKODJtRitIdVlXWWZqY2wzcmtici9wN3ZQTFpHRTNlSTgzT25ZVXAzL0pcXFxcbmJqUWFVN0h5anVwVWl5ZnZEUTRMZ0hDTG9tclBnT1l4Um1FalhDdDBxaE1VMmx1S3NjbjhUb1V6TmNab0Y4SmZabmFlcDBLZ3RmWitcXFxcbnY3Rk5nMnBKVEVsYy9idXljQWxzOVZDVVVSK0ZNZGhteUtIYTRzbWx6TFNyU3U5YlN0NGh2TytqMEVvcm9SR3p0ZXhQbjZYVjI2VCtcXFxcbnNScU9tYldHKzI0QVVzb3FmUUFOOGZ0NWg4SFBnMUVFdVR0amoxNWFzcDVWQXAxL1ZTTGtlc3Bsb1RXYmM1dmtlcVdSaU1nS0l1K2VcXFxcbldlaFVMWXdHMUd1SDM1UTZ0ZUpteDh4VCtEOUZtWkdvWnVHSzEySUJkZDZFd3k2Qm9SWm85QndieWQ3Ny9TN2t3NWxUVlhpNVBjOVhcXFxcbm5QSW5SYkVpVGpHT3pleDI4WDMxRTlvbGpsUlBVT0pTOFdIQVdVK3p6VzJVNEcyWlNjbzVGSlZGNWlibjZTd25Md0hKcUlSQVpna1NcXFxcblJKeW02dWFjV0I2UmJ4bDJaMTVFemlVYVo2OEQ4U3d6elNvUnp0cm9DWW5ydEo2Y1V3ZkFPU0RHTUdoeHJFc3RGTFpGaXdvRkV2MytcXFxcbnE4b2FBdC9FcUdNa2NwQjVnVFlPeWt1VHZhS3IvazM0NTMxcjBzaDIyTzhTQUxqUEtINDNGMndVdjR0QWlkNDJrZzJwdmVtMXhiYUtcXFxcbnlQYVRmUzJaUXNDdVJzeFI2d2x6N0tvdWRyZTE5anhQeHRzcW1zU2RXcUtaWmU0SGE3RDIrWDIzZTVRZHhPUHJzVngrZUVQblV4c1JcXFxcbmJxSysyR2JlSlcyT2xwUmgrR0dlZlE2REhWNGtNa1VwZnFKbmpJRU10T2ZhcXkxMUxNU3ltNWRXSUV5b3VXUXhTOEtTeEpwQVpsNm5cXFxcbmxwWExvbGc1V2pRMi92eDhQb1YvSTViNEZDUE1LRU5pYStrU05JelI0ZmxhOE4yUnptOUs0YjhjZTRYNjZ4R2pVclpISVB5L3JmTzhcXFxcbk9pSitPUGRHT2NqZGtNM3M5SU1semJYajRiQndQTkgrK2YzelAvLzEzOWFhd2ZQNmVKcFpEeFVNdmJZQW9EM04zWnRGSU13c25oYTlcXFxcbjkyWUJETytmVllnNWhzT2YxcXdaa3FrakVEQUtOUFBYcDBWNkxYSGRFZUhINUlGdU5HNEJHQll3VWtQTW9XMU1nS2xBQ29iaVd6SkZcXFxcbmZQU1FPd1BuOHp4TjRrRVZNWHRRTW5VU0dRUTdCZGU4V2ZtbTZKOG5GRFdiSEJBRHNwV21xMWNVdTFhR1pNdEpQc1RtdjZUVWJJZmdcXFxcbnBRUk1wazFLbjdXRktXVWJ5VWlPUndzMDdJZnE0S3RqelBWS0RudWU1N3FlYXZ1ajRnd3l1T0dKMXJtU0MxQXhsemhGOU1MM01nYVpcXFxcbnVlK2dCZ0FjNWtuaVpIeUNnTk11YktFdlZkM2luNkxSSHIxbERYMWJxS1k2SzZsUXJCVUl6d252RE1oTXVIem5mcTdxVkZsVC95UnVcXFxcbjlwVXpNanZWc2dmRnJ4YjQ4eWYxQ2lyQlhacWE5YXJzTlBMZHIrVmRGTXROcHJFMS9WUEZVRllGeUpTMURjSTU0WlplVzJYS0Q2Vi9cXFxcbmhZUFVYczd6TEFFbVJuQjlubWRZWDZuSGdSYmxSNHdWMXFLVmtqUzVlME1FSXBkd2VDbzR1OTBMYjhNM1JtLzVpWVlJTi9mRG9ZdDFcXFxcbkJDSlV6TFFlU1JvN2pCRG1TMzIxb0llSFNweU5SNFJ6SlFiV1F3bUxrS0ZGa0tGS0NkdTNXc1I5My9kOWE1bUpoMGJRMmkwRm1nS3pcXFxcbkJLZXExOExtMk5LNWtEVW42WTNVNU50WWxLS1l0Wld2aWtwaUxUMldneVkrUVpNRkFXQlo5NmF5TGpZNDB5MEpVZGd6OWRlVVdvYU1cXFxcbjd0N3J6cU51WjRFeU1FaStwemVkUHVkK2RQMGZoRzIvTk9LbXYvWnFqSnlndVNqUDBkWGlhS0VUWS8vK1AxWnVaT2U3TUZXbUJmYTdcXFxcbnJQbE5PbXZOeWhTWURJbDQrN0xTTHJZNFdrOHVmSWZWcXRRbUZCYXhSbHFrUHQ2Ty9TL3BZb203MkRpTEdEcnRxV0loaDVRT2gwd1dcXFxcbnN6UDBhZjcxbWk5ZHgxaDY4L2RLRFlBeW1JaTRyZ3Z0WVR6UU03UzFQbVZtbXI5eDFvTkk2Ym9jZ0ozRGtEbDFWVXpQRlFjMnAyUmJcXFxcbkwvWGwrZTUrbUtOTlNnVjZBcG5YYXRXWHZGZTBxNE5kRGpNTFRCSlJoVkJxaFRTcHE5ZnJWYTdDQ2t4cWdxS1BpT3Q2ekpicDgxMnBcXFxcbmVqN0h2Q3V2V0V6UnRFS2VWRTdYUWpFVmhyVlJ6T0tOZUswQ1djOHZmOUxzMU5hREtiaityTjZNK2srOXN4UDVVNlkyUExrSXZhZ3FcXFxcblAxelg5YzgvdjUxMllWeHhrZkYxakpwY0dJZ3ZqUFViR1hFbnlqb0x0UW9PTXF4MUVBMkZIWjU4elRaMTdyRmpjTXlYazlZUzhuMXhcXFxcbnQ4eG1RTGlva0I0RXpsVFZZUVkzTDZmYUZ0dENNcWp5VTNMeExsejkwMlU1VnJyMXorZWpGWER0Tjd0UkNGY0ZhdXZqQnp4VERWRUJcXFxcbnhmck1Ub3krcmo5aUhsQUdvcmZnK1Y5SFRWUnBRTlVCT3M2YzY4OXRMZFpFUkd0Z0pVL0ZwNWNRMUdySTFHcldBaW1neitmVDJqMHZcXFxcbnliV2dNc1BTZTYvNTI2aXhVU0paK2NzVlRNWW9lQ3dnNFd3UjBOZUJkTXQ3MnF4SCs2SWg4Z081dTZoUXhVbzVmdVZvZnFBdXo2R3VcXFxcbkpYaFUyZWtNUW1ITW5XMUpJeHJuQWNoYUlHVGk1M2tBdUVaeS9XVDdhMEtoM2NNYVRVS0FuNkplT294SmNkclA3RSt1VFZna0tDc2xcXFxcbnMrN0s4MHZSUTN1Kzk1YXlicTB4QkQ1RWlKMkxPVnZPTUVOcktFMldVNnJRRmVucE9iVWN5SjdkZDh0RWh0RkNqSHJJWk5MQjV2RzBcXFxcbitSUU1oejFtU1RnOFdnWmppVDVhZ3gyREZueTZ5cnhFdGRnWlprUTE2US8rWnFtOFJQL0VpbkdTNUVubGFKclhHbkplcWloSGRWdllcXFxcbnJUaG9qTmw0WlJ2dFVJeEtGZ1paN1ZrV0xVbWJuWjBaRmxERzJjZS94bEhUK0NLYy9XL0xMR1Y4QzlxMEJmMi90S3cyRVpKSjhKSHBcXFxcbkU4dVMxakJEYTh1ekxtekxSdjROY1FzbDA2R0lJMEpEUUNwRE93U0EwNHlsQlRYOHJETzBZUnp6Y2dOSWVjcXowU09OZ2dsTGplcDlcXFxcbldzQ1FmcXFBbXJVa0ZicnFzbUJMRlJOYnRTQnljcGI2YkEydGdYU2g1MzFsQ1Qyb21Mekg2L1VxOXc0Sld0UWFzbnhJNHRLcmRBenBcXFxcbmlrdFFwVmF2TFpnc205b1J0MHROa2NRUHNSSjlBUUd0bjBCUkViZDFNWWxsWnNpL05RZ3JmZEw3NVNVY09Uc0o5RkNYc3djRUJSdlJcXFxcbmxna2NQaFE5ZjlMNVJsa3hoQzFMWXNzOFUwOW9yZVhremdMdGdwSnhGY1ZkQUFTeFN5SkdDWTJ5VnVaSi8wUm96aWlOUUdaa3JuaFJcXFxcbnRPNVFvakpQUDE3SG5HeTBqVzBvQXZyVmJEYW56NVdPRkdqbHBqcGEza2hqNXk4NldBVlhzbFlWWXF4c0N6SFdIWHphejYvQW12ZUZcXFxcblZ0ZldlK3ZBNU1xWjlUUFF1ZTk3eE5vVkVSRGtRdkJvUXMycC8xd0huREZIWDJldHEwOVZCQ015NllZMDFvdjJ0UnlaU1laOE9RSU1cXFxcbmVLZVVIcjBoNW5xbEZxV2FpSzJVUWZubzl3cHFucWFWK3J6ZDNIT0VndFlZenVRaHN2eTFoRHNwb3piV0FoTTFCUTY3WWJKNlIrZVRcXFxcbkNsTmM3NXlqUjNFNEtnZ0l6NFJVQ29zY2kvbzFZS1V0N3NhazFzTUx0VFdYVFZLNEVQSlVWWlJSaFV4UVNWWFRJcHBaTDZLMzFwS1JcXFxcbngxQVBzKzVPc2VKWHFVUFpocU9LT1VIc0xGbEU5SENCbDVoWlRwbDdBQzN5Nlp1K1dEK1FJWWViUVoxa3NyQlg4ckVHNzVQeVE5d1pcXFxcbmh4Z2cxRkUrOHhzSTJ4Q2piZXgxUWJoUWhndVFUUnl1U21lUGdwdnNubEhZVFhsUTVjdERuWVlpQlFDZjlOZXhxWlFMRWpYR0tyTFFcXFxcbkRwY2doS1BieitScDVkWXFYd2o3NVRDNStGYU5RTWZ1SFRSNVl3UHRoVittUUl2eDVtTXN4SEt4UVF4dnE4clRYcmF4ZUVVMVQ2RmZcXFxcbjE4VjY4VnhmR21EUnVYZG1sS1NaY1BVSzhpcEVHMVZwakNvZHM3NGk2em5BRWVlb0tJcjBPVVlLWFdXdERXWUxjeDFGWHBrbWIwSkFcXFxcbkptVm9NNHV3NXdsM1A4K3pVSUZKM1NOV0YyRVNBdE5pRkY4Y2JZbytsNFVvL0xYZnRsWTVxcGpXUTBVWmEveGJWS0pCdXRwSE1ZTFlcXFxcbk1uSWxXMFdrSXN3NW01VjFZUjFQNmFqNjY5UG5uaVpGamV4eHhpZEZFREZxVEJRaUJWM0FOYXVwWXpVSVM1Mko3aGkxRVVmZnptbmFcXFxcbjVYalNscDNVcDJ5eWtlTTRkSjExb2o2a1dzMHVGV0prektNNnk5TjAycmRRN2hLeEZoWlRLQ1dwZno2ZjR6aGVyOWRPM01ybVNwMCtcXFxcblZveVl4UEE3RmxTcEdqWHVxcklSRHhSUzVwb2pkbVkzQlpYYWJoUGErTzZUOWlRRjY5SnlFL2NPTVdLTUFEZko2NGw0S0tEbzhmS3lcXFxcblNVb1l6cDhYTHl0alVOMk1UbFJRY0kzT2JtdWFnSEg4ZkhoMFV0TllDSnFMV2dIazdFaytON1lrdm02c2NTZk02VE13NHFVZTdZNlZcXFxcbnBXaXppbTFiQllZRHlibjh2NVhBU3FtRVA4Mi9PV0NWUXA2WGpiNE9QOFNnc0hJVFZrcmllSWk3cjgrYUswRVZEc2tDMlB2OXZxNUxcXFxcbldiS2NQL2xrWUlvZlNxOUtCcUE2WnJQRUdYTUlOWUlZNFpxdVFXMnl2aW5iNGRhQ2syMzRESXNDYXZUZ0FEekdjMTdEOWJsNzlXeHpcXFxcbk1rNE95aVdCNCtQUkd0NVlWVUxKNnBoamJINlRmVWh3TFBZdTY1cjVSRUhPUTZxc3pYb0g5V21hM2cycFhHY0x2Q3JHb3lIWlBxTWRcXFxcbkF0bTNpcU5DUjBteWE0am9vUGJVcUZQSytraUF0czUyU1UrcTV4ak9nVlppNHYxMitLdis4OWE1NkRJLzYrNU9xZytGaUpxTFJtYmxcXFxcbmdVQzlvMkpDTWFjQTErN2xKVzJkUHlvbWJrTFd6QkxKMFhQdGR3SWdaZlR6ODBPSnVMTW0xM1RNQUxMOUVrMm5hQXBqVUxpcWJUVTBcXFxcbkc1RzdMaU52clgwK04vT2pSR0xmT0hMc3QwYzFFNVV6bGNoVlMxSVhURGh6M3lnMWZINVl6QkV4NDVNeHdjVHVGUzFTU2VuTU8xOFBcXFxcbldYaHJHTmsyTWxJdWE5RjBER3h4cjBieGU1MG5MSmhWWUlhRUtKUlhLV2VuR3Q3dmQ1bVU0VGlMMmtodURHQk1Tb2FLYXpVc0ZabWVcXFxcbnozb0ZoT3RtbHJTdXdoNmduRVByUGVRTk9HQjllZ1ZML2hOQWN6OGptTkcyaUVlakN3eDZlcjFlZVdIRWw5S2dCbi9hT2M1U0ZnVnpcXFxcbkRQbU16SkFRdUc5cXQxQ3AyNW5zZFJjU0hUTzloSEIwcVFydFJCU3ljUXkvenhLWWdpL0VwVk1IQ2FubGVhTU1wMzUrZm5RRFQ0MVhcXFxcbklBUlg0cHZDRElVaU5QQlNRdENpMWVmek9jOHo3V0FYTkMvTVJJYS9haExQZTJud1FLR2JPTHFDWmUzNUxtdGVWYVRQMHpRUjExc3NcXFxcbnN1YUt0RVFUN1QydkhCTFA2Y1RKeTdLQ1phNGlUTHMranNOTSsvUmw3bEZOR0NQQUtNLzIyTHJORndIUldudS8zL1NOeWI5WnFtVTlcXFxcbmhDczNiRHFpdnQxSHIzdU14OU01czU3cUNmSFBJWmxuU0liUjVxVFNPcUcrMVhLVlorYVRXRm0rd09acVhaN1dValVxNkNMbThsWVZcXFxcblZrR0tkb1d5NWg1Ny9FbWpWOTZJMXBCQ0tjV1FBaytWQ01Ud2FlQk1LSFpQaU0wdXRYMmVxY09uRFdrN3JNUjFKb21JNjdveXNYYi9cXFxcbmJrZDJuR1pIakZEVCs0eGtMOTBWVTRnSVJiSHdPN0w2TVpzVmw2V0N0bTlSWUJuYmZkOThIbW1DZmF6U1kwU2M2NWllNTNtaWI1VFdcXFxcbmQ4UytIMzFHV05VNWZaS3MzbU9ncGw2WEhkTStzRXZVUVFkV2ErMzFlbEg4eFYzdU94ekZlbWlrakw4Y3RucDJmaURWK0xyRFhKdVRcXFxcbkRKTncxRW5FQ0IvM1hjdlVZbnl0dnRQQXNaWFh0V1dWb1BhMklMcWNVK1MrLytRWlNGbGZ4cGhEMm5EZFFnV1JtSTBaazlmYjY1aUhcXFxcbi9ySmNsNnNZZW14REtadk1JbXZRUnZrV0xKdFpHdEIxWGR5MUxHdDF2REJ4M1VPT2ZBYlN3R1ZLZmFxd1JUN3dFQklSeEpvUXFVd2hcXFxcbndOY1RpQS95T0hWTWdiaUtMMmMzZkR3eUQ2MnByMWxURzlNckxuVk92WDNCVitsV3VqNVd0R01OZm0wNHZWMWhxZ3diUVlpdU1OOURcXFxcbk5NS1o2STV2dXk4cHo4WmZRa3dlaFVBb1VDcXB5UU1zSFRIc0g0ZjZQTThJTTNvc0VmRmtOVU93cjgrelY5RHBRYnVqK0ZyRGVaN0hcXFxcbmNWaWJ0cXhHYXQrQ1Fob1FuUUcvbjJUOXRFTzJ0YVUwYzk5VWpLcUlIZTZ5cUpNN2U2aDJTenlxVHpiMnhZTHlheC9xMkdNUHEyVUhcXFxcbm80NHA5YUZ0L1pLSC9rVEl4OHI5WDhYTis2WEZsR2wxTm80MWMxTU9vYW9VeThSSFJPUnVJWHBIVzlNMnpoekZMQnNzeFd2ZVhmdGpcXFxcblVoc29MQndTakpzVUVhbGRyYnNGOSt0Z284ZHhSRmhyV2I0NGtxL1RrV05rZldueXNmb3JsYzQ0V3RKeERrQkxINzJMSTRaVk5qQUpcXFxcbk0zUklxcDZpM2Z5c3NxWW0rS3Y2Um4yU0J3Q2YzOUxuTGQxZFl4Z0k5dmx5anBBZFR0eWR1OXFvK2M3T0ZFVmxoOW80S0NaZFpFTmxcXFxcbjdzaFYzUEhMTEsrb28xTzhxT0I0T2RQUldLc0tJWjZxaURYVDJpWTEwdkkwbGU1VHhDOVZaMlZjMUkzaW1oY3kxZFFHaVY5bXZKTzdcXFxcbjJXbWhjN0Q0eXpwR3lNcEhNYlJnaUpLM1VIRUR6b3EyZTRZM016bU1lR3lObDRrNHlqbzM5NlhhS1BkeUZZWXAzUGZudXQ2SnpYMS9cXFxcbkNMS1cyWmlwR2RWcUMrVERBMDJxK0tyRlpSNTlaSXpsaWNmK09hQ1BycktUUzgycFNiblpCaWtuVEZoT284NlZ5b2sxWGt2Qk1iY09cXFxcblNjOEtuV25vUXFVU1l2VGpOcUk2b0FiQ1ErTG43Ky9jQlVlcGc3TDRsdzA2UW9wdFRlYUc5QzRxVmoybm1GZTVGb2s0QU82UWFrYW1cXFxcblZqUG9jVWMrY3NLWTE1WU1JbkdkNUR1cjFXMHMzbURQSW5UTG9EbC9PR3VKZzBseXdpSFhTMm9rQUVtT0ZOZm85bmU3OTBTR2dJcVlcXFxcblQrbG1uK2VTQ3JkOFMxSytiWUE3MzVCOGlnSjBIL2l5bzk0TWZOZTk0akVZY3E3bUtucEkzc2lBdjQyNUtNVXNobThkM1VyZ3pLd1BcXFxcblFENkpUeVV6UGt0QktGZ1VHaVE0Q2xkbFRXVm9XTUtmVWczWGRlVytieW9zcnUvWCs4N1Bnajd0czhZNXRqMUlrVmNGRnN0V1ErYzNcXFxcbmpPZk03TWc0SVdQbmxQSVlzTE44MFZlVDJyUnJkbzlGTzJaOUlkVWlIZFcrUDJ6aERaUHBaTjNpRHBKTjZIajBxYTlVLy9YK2NGVTFcXFxcbmR5dGxJMS9tZlh4NW5nWGZha242M0pqdTlldGVZd3FLbU5mT1BJVmc0YWg0bTJrWDhnWUlLcHo0Y3ZjSSszenV6RWZVYXhmV05wbWlcXFxcbjVQK3NydkQ4V01NQXpuU295eUxQbEJnOGNjMmdEYVBFeUNHb0YxVVVVMGFVREs4dFBrbi9WQWJmZ1lVc0tuSFlHVDVIUENsWVZWRkVcXFxcblpKelFaNzl5SXhrL2dndVk0YTBoNHNsM1hIbC8zbmErV0NFMWxXTGtUVW4zT1I2dVlCb2R6WUkzSlcvNlhMeU5WZFhFOG9Ubk1QUFBcXFxcbjU0TTFWT2V2SmtHYkJ2TDh2L2lHMlltTU4zd3VNbG5hSEhsamEyTm5uVjZLa2V5THhLckFzVzA1Y0RhcXVkWnhITS96YUFXRFlUaHhcXFxcbm9jRkRNUm8rTWxSTXo0UWZLS3d5ZnZhV0ZrREpwajUwaThrU1plM1FDNGxQWXV5VElWQmJyaW9HRitOZ2F4ckZkU2lsbUZaZjEzcEZcXFxcbk4xakExdm1Pdm5NMEFQZnp1dWJHVndEY0VmRzRaeFg3NGFxUC9DWVIxRmNTQ2JyTmxnQVdRRmI3Vk1jcGF6S0FQaXhEd0dtYWsraTVcXFxcblA5ZmNWMi96ZGNYRzFYL3lIQnBsYTYyWUtlSElmUm5JOVYwYTV4RTJFbXRPeUNiUGtsZUxycFJ3bFNLeHZyM0ZaY213V2d4L0F2cWNcXFxcblV5N2U0RFBsS21nVHl0UE9jQ01aWHNXZitLRkVmcy96a0VOc3BSZVZzdG91QnZsb0dyM2Z5OVpqMXhiN2MycTBHekw5QTh5VVlmV05cXFxcbkdkOTR5ai90NER6UFJHNCtnUnZSQnU3NGhFVGF6WXlXMmpxeEFERmJ2V25FUkQzMWVyek9jN3hmRVN1bG1oQUltK0lVd2MvUEQ3Y3FcXFxcbnNPRWJiSDJLMzdkRlZZU2F1d2NRRGU3alVkOHhsZU9lNytLMUdDdGc4MklBN1g1NlNsWWVnNEJ3WWdGMTBSN3RRTU1BWGtLNzFxdnlcXFxcbkhGWk91T3BSNE5BdzloMVNXZWR2cWRkOHN3NmRXMkZHMnlwS2lhVHJ1bExjaW10R2hKQVVYL3Vzd0tRbWVDTjF2QkRIUXpIeXRHWGxcXFxcbk9USENjYkpGNnpGQW9xWnZ6S0IwMFJvR25KZkNwb0tSY3l1WmJhS3ZPQjFrMHB0eVJ2UzZzQk9BQmhqeE5FYVFEQ0lwOU93ZWJaOTJcXFxcbjgvbDgrRUpNRHEzRUc2cGpTa09ERmk1bnpSV3FTbDhsUCtUZWZpM2ZKVTFFMkVwWUtuVDluSklxVzZQcm5kU0VmYnd2aXBDMFViTFFcXFxcbnJJKzJpWTA2TWNKWWh0Zzg4emgwcjRDNjhsb0RkZ3IwOS9kWGRhOWtUYlhaNXBielVCdlNmbklnMURmSmdBTlpucHpsZ0V2cmcwWU9cXFxcbndEK2ZPNGE3ejVWS3ZDVm5lQ09NQy9XTzQrVitKdDZUb3dXNUpPTEhMTEwrTzE2c2RSekhpOU9Bei9POFhpK3BrekJIYlV1QmU0VmhcXFxcblNENmwzNy9mYis0MjF2TFJXcjZhYTZ6dHk4MG9iUTF0KzUramJrZVhsdnM4S2s5Q09LM1A0Q2dFMUIycHhncEZxczdwMzJQTXZPV1pcXFxcbkxJeFF5ZGQxOFVLRklmL003VXRVMzJhV2t6STZmVlZhWUFjNEN2NWZ6SXVTaXZVWkdjWFdia244ckFxekVUandwNktQSWtEZzI2TVZcXFxcbmpKOVVGazEybEk2SS9pNXdPRlpWcVFrbnJnZHAzcXdPOG83MExXUFJTS29vYU85MzZ5dEdTb1k5MUdQQWpIQTUydUZtWjNWd2Q1czlcXFxcbjRCdDdwei9SN3ZiUUpmUTltTGJVdktkNUl3T1lRODV5WFl2NVpJMGFsZ0Z1amxXTk1kSWhWUXRkeWlHYktPMnFVOEF5TVNPOWFvcWxcXFxcbjJ1VmdkSWxJRE8vUGFUUDIwNzVscXJ5MVZ2NEtLeFkxMy9lZDc5c29iRlBzdUJCQ2FVMXhYU3lEbDNkenQzSHdXNVA2VmtUa2tpM05cXFxcbitpRFZlblhaN0NndE56VjBucWZaNFg1bXBzYitwUllpSG8ydVV0eVpsUCtjNmV1Nkp3Qm1RVkdIelQrSjVaMmRkazR3cyt1NlBwOFBcXFxcbjMxZmJXdU5iN1ZUV1U2UGpLUzZOdnZ1RmJuMTM5eFVCRWYyTlloTStLbjRhZFdaOStqSUZsV0FaZ0g1dVl4bDI2YkVlcWxlSWFiL2ZcXFxcbmIxVWtzNGxZdllLdjgzZ2FiaFlBeHJveUVVS3lLV3VzcTJ3TGJTNnlIajFYTjZDWHFFejB3OXlXVzBrZzVaZ21uN0xsVlJHV1dRNGtcXFxcbmdDL1RvQ1p6M2wxNGxxbVVqZW9IeTdOOTdERjJjVnJyT1AyY2lFa3BNb1paelloMUdhTjJwcWc1UnRtUFB2YnorWmpaOFRyTkRJYllcXFxcbjBnZ3FrdHI5Q3E5ZEpYMk1FWllQM2R1NlkwcHFWYXNRKzBwUlpTaWxDNHlWVWZTbzh4SlpzOUsrdlNpTTdvSHFHV1RGR2JWbGlRV0RcXFxcblptSlpRL0tRUlVORmFpcmxQTjd2OTQvc0JtdTIrTFNRK1dMMWpkcC9na0E3bWViWWROODdKZGsyVmdlWXhDRnNuYjFSbytaZ0loNkdcXFxcbmdJcEJYYnJwN21haDFlcGs0Yzk5OGVrZ0hiTkpCYlVMcnIrZWFDNUF5RjlMUDJPZE1sZUpiSVZ2OVBkdDVNemhlSW1YU255eS85UEtcXFxcbi9yNnhocy84WDdQNVU4K210cm52bEk0MnhLZC8xVGw2OVdNcGNTaVVlSHRHM0ZtbHVlOW9yZjM4L013dGlFZjZybWwzTDNRY2ZYMFhcXFxcbllVNWNhN3dSYTV4TExKdFpQdm03a3d6M2IrL0JsY1M0SEk2NzkzZndmR01QRGxsdGREb2Ivc2JDLzFmOVpLV2lqYzBPOGh0U1NrNTJcXFxcbnVKKzBES0R0QzAwVGJXa1BBQ0lzWC9SMG5xY2p6SUlyTG1nOTJUSUxDNjAxaTdrbzIvcERoT0I5YlYwdVFoRXdmTlR2cGJmZGdjZDRcXFxcbnh4SEVmRHRKUGkzM2YrVDdFckV5TWxsTEcrK1FJanZuQTZxc1lKQjVtNnpmSU90cFcycVArMmt1OVllQ29JeHEycnBvUkYrUUhaSnJcXFxcbnFERTFxWWl5RHk2MXQ0Z2F6OUU1cXkzdVNNeUNxbVJTVmxyVFcrK1J4ajdZT1pCVXBENUNVaFptVU9jUnBrT2xXMkRoSDRESlU3UTVcXFxcbml3amgyZDUraDlSeFhZODdYcTlaa2k3VW5QVFFyMm81dzlCYXU5dXlPTzNJWlNrNktpcVNQYlQxQllHOGhhMHNqTEcrblk1SGRjUG5cXFxcbkVsVXNFT0xsUVN5U0EvMTU0cm82OTdrdms5WjdiOHE5bTJ4Q28vNUtZVnZRUjNOTGY2c3pmbk1NeXZjQUFBWXhTVVJCVkNicm83VVBcXFxcbk9yRFA1M1kvMDRYUUZXdHNTbHp2V05iT0ZOQnBrTjVhdTk2ZmRqL0Ztc3ZvdEJIMmhOK3ZjQUVBVnl4TGpYaHFXTFZFekk1d2F0RkVcXFxcbjRqVHBUYVZEUyt5ek0yMUttZlZvTThzcE5CMmJ6aG4yRHNocllXTXJ6ckV2QUhKV2s0OVlVem9oRVFLSDZaSzRKZWF1NjNxdVcvZmJcXFxcbncrSm1GaUZtVDdvWXgyNWppcmJJd3I5YVhQbGM3dEdmTWh2cjFlbmw5UngxSUhvbjJnUnJubGhKamNKU1A4TStKQ0IrZm42dzBvS2FcXFxcbkxRbk5CdUVlNjVhVVdPMmRYeTRCNzdBSjdzeUNGYWQ2RlVmRUFOZWtMRUdFdWJyZ1hKMUU5V3BjSW1EcGIrdk1EWlc0MWtWbGFxdVBcXFxcblVoMUVXRjRvdjg3MVRZUGZuOVMxOWhYQWVUclEwS1lnRkUxdEhIa1hBUGM5OXViYTNqSlVWSnVIN3YzQS9uOCtuLzR1eEhXQUprN1NcXFxcbjNYdm9uZDhQSHJleHhxTS9LVk53U3VmdWtsaXJ1RU1TeFhtbkZWOG1CWmRCU2wwNis4NncxTFFPZ0JMRVdnUi9aQnV0a0poRW9Sb1JcXFxcbjF6VnpIeFVyWlIxclFVTkRHbHNMTEp5UmNabGQxQStLVk5WYzhRZU9OWTdSTUZsTm5oM0NtRURLcDdoNFY0Vllma2h5ekNTUVdhOXRcXFxcblJVNGZpV0pyY0dkZzBNejZveGpzYTdKY2tYWE95QXcwSU5ZWFNadFpqTXF5UWxVMXBBWnVhMFFMNEw3djM5OWZQdldsZWlYc3VGN3BcXFxcbmVlWjhrMW5mVXFGcmlGZXlOeFNaMWh3b2ZlSWQzZUVzQlV6VjRmanNyZlhORGhUNGVpKzlpcldoTks5YytrUWNxSC9YbnZQN0xORW9cXFxcbmZSWGN4UnIvcGx2V1ZRKzJSUUhQODJUbFdudk8vdEJrbFUrMGU5M0VTNGVBNVhVT05GN3VXV0RpckNoRTlYVnFNbFJ5TWdaUVEvck1cXFxcbkRHbXdTYlBIOGNxdExQUjJZeGk1THJBOXo1VnhSWVNzV1k3NUFydDk1QVZQdHUxY3I2SW8ySCsvLy96Ky9yUHJMR1NLUXdPa3lSQ0lcXFxcblhJVmR5NlRVb2NuQlA3Vk1vV1JDcktrakRabUhWdkpTVUE4bEFhc3htaGwxb3o4UmNjTi85RlhQK1Q2YlVpa3RiSzdCTldURGRtRXdcXFxcblRoYlBhR2NNOFBqbm40OGRwKzZRUmpuNG1Pa244MEJpRW1PaHc5WnRSRElNcFBHT0FLTWJWNVBLSnhZU3VFWGh2UVJJTEZNZnJUVjNcXFxcblpMaENRVHhQNU0yVHpXTjdhak1pQUQrT1Y4YnBPVWVlSGlKbm9QTnhkcDYvSHdYWCs5T29UVll0ci9mTmVuSTdEbnYvK1gydW0wOWlcXFxcbkVkUVU4ZGRiNXo0TDg2bFM5UUQ1elgzZlhPQ3R4a0xLaHhBLzJZT28xRVZNMm8vbjJ5N0tiU3lOZ013T2svNThiSzZxb3VScERHWUtcXFxcbm5Nc0hpQmxSa1pESWgrYXZOcGZqSXUvLytmT0gwWVZMdlp1ZG9VYUozUjZlVXpwbS9URTU3WVN0ZTVQeW9GYmFMTGtlYmN3RFBjOVNcXFxcbjhGMEJBc0FqckxVYnN0VmphMjJrMXdjTEpxck9kWlhlTXhhN0xpdHJ5MUdnZ0hWdXdaZ1RHcHV0cnN6TUFEK09SZTUvL3Z4cDY4dG5cXFxcbm4rdk85M2VxYjZPVTdQQW5XcDNEeDBoMUlGRUhjNEZ5cVBac3ZNTW5yWGh3QWw5YzBYdytLRmU5TThham9oQlhRMUFvczdFL0FMTDBcXFxcbm85dFhGUEFxMWZJdVhiZ3lLSklBVmlwZ0Vzc1dHQm9vcm0yNGNVWXYyVEs3MnIxWDlMYXpRbXdjczFJa2hKRmQwa1dlUU9MUGtZZTRcXFxcbjdLRWhCL3hZNXFpY1lUaFJSdnZJdXZhUWRRZXZHVGVNT2E3cmliQVNsdjN0QXl2cHBZYVY0NW9iK2dyRi9ZdXRoT0Z1eis4L2Y1NXJcXFxcbjJkRlRWemJsTUluclNSR0VTVVJvRlVhbFRFWHBTSGhWbHVkelB5WTFxeWI3bkxleHFKbWFhTEl1aDkybFBaSHVtU25rclhNcVJMTVNcXFxcbnRaVXFsd2pJQWttcG9NMmdYanRzWStxV2JyeUVwSG5rc2hERlgwZ0t3dEZoc091SWI5cXNlV3E3eFEwVzg4UXdaMW94TmNrUGxCRXJcXFxcbkx5VXI0eXpKMEo4L3ovTGtJYkVmRVJhTkUxclk3RjFsM1VWd3BGQW1OcnR6UHBZWkwwcUtyV2tJWUd0RklhTU91RjNQL2ZsOTU5UGhcXFxcbjNFZFNPNVB2NWVyYk9jVUkzVFY2cDBDTGFKcFVxdGpMWjMzS2lsMkhwUC81UGRHYUxXZEZncHBUWG1veVVhSVJheTROMEFuc1dQUFZcXFxcbndneHRYZTdlbGhxczZkRHlHNTBnNXlpb0NUV2RIUDduODhrdXFUL2cveG8rT1FkUHB2OHFjZTA2QjJsbXJDeVRtSW9UZU5hdEJQU2NcXFxcbnJJVGtVMXo4MWIwL3hwdUpINjBxZXJwOHVpelRWMklOY1F5VForOWxtN2JaODRCS2hBcmcxa3VUd2RlSEFYZ1ZtamtPcytQenVmTVpcXFxcbm1WamRPK1dXcTJUbldnWDFEMnBLZXVRSmZRWnpRSkpFd1JZSUgvMlRFa25WcG02MGNLam1UNlh5QkdvVXdnK2EydkV1SWJPZHBFR2RcXFxcbmtTcFl5U01MV1AvNXozOXNEWXFhckVSVTQrUC9FZkg3KzV2WldheHpwSGwrT3ZuL0EzT3FrUjA3MGV3L0FBQUFBRWxGVGtTdVFtQ0NcXFxcblxcXCIsXFxcInBhcnRzX3R5cGVcXFwiOlxcXCJSZW1vdGVcXFwifSx7XFxcImRlZmVjdGl2ZV9mcm9udF9wYXJ0c1xcXCI6XFxcImlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFIZ0FBQUI0Q0FJQUFBQzJCcUdGQUFBQUEzTkNTVlFJQ0FqYjRVL2dBQUFnQUVsRVFWUjRcXFxcbm5IMTliWkxqdW81c0FwTHJ6c3h5Wmd0dkUyLy9pemhkdGlSaWZvQk1Ka0gzVVhSMHVHeUpJb0ZFNG9NVVpmLy8vLzJ2QmZJNGYxN0hcXFxcbmNWZ2dJc3lzdGRZUVp1YnVBTnFEaURBUGh3R0lDTGlaOWM4V3lNK3R0V3d0cjBWNFJNQmEvdXJ1Rm1pdHdRMUFOSXNJdCtpTm1JVWhcXFxcbklnQ1lXWGJNRG0rdG1WbDJLVC9rQ2U0ZWNyajdjUnpaZ2Z3L1QrajlhVTMvMUMvTmJONTBqQ0kvWjhzQXN1WDhKcy9KODNucjByM25cXFxcbmVTZzZNM050L2JxdTUzbXkzV3lPY25UM3ZFYVB2QWZQeWFiWUEzN1drL08wYklxWGNQQjZJMTZlUGRZTGViSzIzNUhSR3RYQTcvUERcXFxcbmNSemFpSTJEdmRKbVZmVFpKWld2dGt6RmRLQjhHMk5FT0lDR2Zoc0wzSitMa0l3SWh6bkdBRHlPMHlMaWlmWkU0MTFidTgwQ2JrKzBcXFxcbmhxNWI5c1l0RHUrOWlXYnRXZFJnSHJBV2hpZGFHTUk2bEJ3UkQrRFdFQWh2RDJnUUVLTkpXS2lZOGh1S2dPTW5FaU9DbDZmMHY2cGNcXFxcbk5hUUg0Wi90S0x5eVdZV2RhcTZDRk1COTM5UUoxYTZOc3QrOW9YYTB4em13b21vZHRpcWZab2dWL3EyMTUza0lCLzJlUHhXMEZqUFNcXFxcblBtQllVcEVzdnllZjhEU2VySUxtVDZRYUhjNVgrYXE1ZEVRRENBTjhYbnhkVjBJTUE5ZWRXRVdsYVFmSjJyRG1zTk1QQUU5MHZGaUFcXFxcbmJHNEJ0RENQdkZjWUNoR1oyWEVjaytBQ3g5RjcyVkhmckQxZFNXcjdSWmZwQTlDNmExRXNxMTcxMXJ4Y1RSbmJvYWNwTXZabU9UVHRcXFxcbllmK0tnSjJxdmgrMENUZTFXYjBlZ3FQV0d2R2lLRmI5VThrcFdjS1RnT0pneUxabEdPeG5RYTZlbkpkRG1FRjVZMjlLZTZqUVRySEVcXFxcbjZvZkt0WVc3aVhyK1JBRldaSVdoSVZwcjkzMHJZeHptakUrV2JqM05BbmxWaXUrS05ublFyU0hTWWdDWTl3R2pCZHJBWmlBdFptSGJcXFxcbmFGUnd2OUJEcFlZMXRKaUtOSVRoZVI3QzN3YjFVZTd1cnR5RllRMHFMOHBvbC9VdVhDV29yL3J3N0NnMTBIMlJPNERuZWU3N0xzcWtcXFxcbkJBc0tDSGsxSzNaUjRkemwrRHpFSFZiQTh2eGlaenhIQ1lRSTVRY2ZCL0dvSG93UkhqdVRmU2pTK2RvZmlLVisvWjhIcVp3NDhHVFNcXFxcbkxpOURHS0taNGVpUlFFVDZueHpWZEVRdEVvWU9neHZjME1KaDhiUjQybzhmcFl2Sjhqek1yRWNVTFN3QTd3NWgwaHhzOHZ1SVdCQmVcXFxcbkZFYTA1dm5MSGRmNDVHL0NJcVZRMWtvZys1bUxFSFE0SzF2dUNQZ1NxMk1FSG1sbzkzMWYxNHo1ZUdXaFRyWE5oYVFDbVFGaFBmWnhcXFxcbmx1N1NrUGRmcDBNZUJzVHpRNkkzbmtQa3NpbEZITVdxN2V1WFNpUDYvZGREYVkxbUYra016U3dSMGFPTHVNM0hHWVl3SkZsM3JMa2ZcXFxcbjVnMlJuRXNOK1hra3MwOStjQXRSdkNwODJwU2hJZHpQNU4rcE5nU2pJSWNkNWhsN1FPQk1aclRoVjJ6RWRwQXdocW9xR1dEOEpRdmpcXFxcblR3dnZENUZCSE1OWDBDZ3l5TU9XbVdFNU1oaFFGVVhFZFYyS1BvWGI1SHQzUmd1RkdjdEludWZoSmFSTzdhSUptK3RneUtjY2xXWW9cXFxcbldCTUs1WEVOUXZhZUY2aXFyUGVScXJiWWZ2NnFXWDcrbW1tdE1RV25HUjdIb2Z6WTBXUVdFWi83dWpPeDg1NlYydUU5bGdoWTRERDNcXFxcbjgwaHdzV1FCTnp0RzJKdTA3cDdac09xTU1XOGZlWFJhVHg4UTFsbGJGVkFjYjFHR1JtWTVlSXBib1Zkb2dlMVEyY3FaaWdZU1VRZnNcXFxcbk1BNjFhVW9mZ0VkRWdxS0V3Rmd0SXRGNlhWY1psV29ZcTNtV1h4V0QvSjdpVHMzclRUV08zb2tZZ01NeU1lR1lWWE9sZmNxYXl2aWJcXFxcblpMWHpKWElvUnFaNjBrYW9Xa2kyN0U5RGl3NDZ2V3NDYWhrQURDM3V6NVVoY0E2eUQ4eW5kRHJZQXd0MmJQNXBnWGdhWFFMQm16YlJcXFxcbk8zRDR0SW5NeTBlbWFzTGo2UlVTS3h4OEgvbm9KTnFDNVNJZFh2VVZKZGdvYTllSEVoZFdXbXNBNWVDbXBieU5LTEVkei9PUXI5bUpcXFxcbjRsTFNDK1U1RklIcXZPVFFLajRhRnRIRTAyaWs3S1FPbGQrUUZyRmlISDh2Ry9HRVhkYTdWa3E0b3FMRFJ1VmtlWCtkN2hZTWNvc3pcXFxcblplelJFR0V0NEdHNDI5TmRVQ0FabkpaNCtwR2xodk04WjZEZElvMmpEREtSTzZPWHd4c3EzSlEzMGc0c2NQckJNQ2xQUzh6U1l0QWlcXFxcbm1UMy9tWEJvU0N6QkEwQW1BWlMrL3FSNkxackRHaldXdXh4bW1Zc2dPVnJEVWdqSDZRMUt0NjdydXU4Yks3c3BGaUxpUE0vU2dpcGNcXFxcbjJWUEJndFdRK2FjNmxuSVY3Nmo5NTdnZ2poRUM2cThVb2Vmdy8zSTc3WGFJWTFRa3NmSXppK0M4VFdyajYrQVBjNGRaT0lzZDE5MStcXFxcbjN4ZHhUV1NOYXl5TEczN09ndHo4UHJzN0toSVdTRWJXQVMvbnQ1RkFNbmNkUFBpVmJidjlLYm8zZ2RMSU9HUm1Cb1VsMkt4TExURFdcXFxcbkdOdzJabGQ5elBQTDJlejlubXRpQUNkajdjL25Rd28yOGY1c3JUdkdiNDFRL3dUcFhpcGpIOVNFZDlNcGRxMndZZ3RxSmNXMlZKb21cXFxcblB1TTcxdzFaMy9mTmhFaTFvcGN3bklzSVY4UFVUaWlCTEtKODJtRitIdVlXWWZqY2wzcmtici9wN3ZQTFpHRTNlSTgzT25ZVXAzL0pcXFxcbmJqUWFVN0h5anVwVWl5ZnZEUTRMZ0hDTG9tclBnT1l4Um1FalhDdDBxaE1VMmx1S3NjbjhUb1V6TmNab0Y4SmZabmFlcDBLZ3RmWitcXFxcbnY3Rk5nMnBKVEVsYy9idXljQWxzOVZDVVVSK0ZNZGhteUtIYTRzbWx6TFNyU3U5YlN0NGh2TytqMEVvcm9SR3p0ZXhQbjZYVjI2VCtcXFxcbnNScU9tYldHKzI0QVVzb3FmUUFOOGZ0NWg4SFBnMUVFdVR0amoxNWFzcDVWQXAxL1ZTTGtlc3Bsb1RXYmM1dmtlcVdSaU1nS0l1K2VcXFxcbldlaFVMWXdHMUd1SDM1UTZ0ZUpteDh4VCtEOUZtWkdvWnVHSzEySUJkZDZFd3k2Qm9SWm85QndieWQ3Ny9TN2t3NWxUVlhpNVBjOVhcXFxcbm5QSW5SYkVpVGpHT3pleDI4WDMxRTlvbGpsUlBVT0pTOFdIQVdVK3p6VzJVNEcyWlNjbzVGSlZGNWlibjZTd25Md0hKcUlSQVpna1NcXFxcblJKeW02dWFjV0I2UmJ4bDJaMTVFemlVYVo2OEQ4U3d6elNvUnp0cm9DWW5ydEo2Y1V3ZkFPU0RHTUdoeHJFc3RGTFpGaXdvRkV2MytcXFxcbnE4b2FBdC9FcUdNa2NwQjVnVFlPeWt1VHZhS3IvazM0NTMxcjBzaDIyTzhTQUxqUEtINDNGMndVdjR0QWlkNDJrZzJwdmVtMXhiYUtcXFxcbnlQYVRmUzJaUXNDdVJzeFI2d2x6N0tvdWRyZTE5anhQeHRzcW1zU2RXcUtaWmU0SGE3RDIrWDIzZTVRZHhPUHJzVngrZUVQblV4c1JcXFxcbmJxSysyR2JlSlcyT2xwUmgrR0dlZlE2REhWNGtNa1VwZnFKbmpJRU10T2ZhcXkxMUxNU3ltNWRXSUV5b3VXUXhTOEtTeEpwQVpsNm5cXFxcbmxwWExvbGc1V2pRMi92eDhQb1YvSTViNEZDUE1LRU5pYStrU05JelI0ZmxhOE4yUnptOUs0YjhjZTRYNjZ4R2pVclpISVB5L3JmTzhcXFxcbk9pSitPUGRHT2NqZGtNM3M5SU1semJYajRiQndQTkgrK2YzelAvLzEzOWFhd2ZQNmVKcFpEeFVNdmJZQW9EM04zWnRGSU13c25oYTlcXFxcbjkyWUJETytmVllnNWhzT2YxcXdaa3FrakVEQUtOUFBYcDBWNkxYSGRFZUhINUlGdU5HNEJHQll3VWtQTW9XMU1nS2xBQ29iaVd6SkZcXFxcbmZQU1FPd1BuOHp4TjRrRVZNWHRRTW5VU0dRUTdCZGU4V2ZtbTZKOG5GRFdiSEJBRHNwV21xMWNVdTFhR1pNdEpQc1RtdjZUVWJJZmdcXFxcbnBRUk1wazFLbjdXRktXVWJ5VWlPUndzMDdJZnE0S3RqelBWS0RudWU1N3FlYXZ1ajRnd3l1T0dKMXJtU0MxQXhsemhGOU1MM01nYVpcXFxcbnVlK2dCZ0FjNWtuaVpIeUNnTk11YktFdlZkM2luNkxSSHIxbERYMWJxS1k2SzZsUXJCVUl6d252RE1oTXVIem5mcTdxVkZsVC95UnVcXFxcbjlwVXpNanZWc2dmRnJ4YjQ4eWYxQ2lyQlhacWE5YXJzTlBMZHIrVmRGTXROcHJFMS9WUEZVRllGeUpTMURjSTU0WlplVzJYS0Q2Vi9cXFxcbmhZUFVYczd6TEFFbVJuQjlubWRZWDZuSGdSYmxSNHdWMXFLVmtqUzVlME1FSXBkd2VDbzR1OTBMYjhNM1JtLzVpWVlJTi9mRG9ZdDFcXFxcbkJDSlV6TFFlU1JvN2pCRG1TMzIxb0llSFNweU5SNFJ6SlFiV1F3bUxrS0ZGa0tGS0NkdTNXc1I5My9kOWE1bUpoMGJRMmkwRm1nS3pcXFxcbkJLZXExOExtMk5LNWtEVW42WTNVNU50WWxLS1l0Wld2aWtwaUxUMldneVkrUVpNRkFXQlo5NmF5TGpZNDB5MEpVZGd6OWRlVVdvYU1cXFxcbjd0N3J6cU51WjRFeU1FaStwemVkUHVkK2RQMGZoRzIvTk9LbXYvWnFqSnlndVNqUDBkWGlhS0VUWS8vK1AxWnVaT2U3TUZXbUJmYTdcXFxcbnJQbE5PbXZOeWhTWURJbDQrN0xTTHJZNFdrOHVmSWZWcXRRbUZCYXhSbHFrUHQ2Ty9TL3BZb203MkRpTEdEcnRxV0loaDVRT2gwd1dcXFxcbnN6UDBhZjcxbWk5ZHgxaDY4L2RLRFlBeW1JaTRyZ3Z0WVR6UU03UzFQbVZtbXI5eDFvTkk2Ym9jZ0ozRGtEbDFWVXpQRlFjMnAyUmJcXFxcbkwvWGwrZTUrbUtOTlNnVjZBcG5YYXRXWHZGZTBxNE5kRGpNTFRCSlJoVkJxaFRTcHE5ZnJWYTdDQ2t4cWdxS1BpT3Q2ekpicDgxMnBcXFxcbmVqN0h2Q3V2V0V6UnRFS2VWRTdYUWpFVmhyVlJ6T0tOZUswQ1djOHZmOUxzMU5hREtiaityTjZNK2srOXN4UDVVNlkyUExrSXZhZ3FcXFxcblAxelg5YzgvdjUxMllWeHhrZkYxakpwY0dJZ3ZqUFViR1hFbnlqb0x0UW9PTXF4MUVBMkZIWjU4elRaMTdyRmpjTXlYazlZUzhuMXhcXFxcbnQ4eG1RTGlva0I0RXpsVFZZUVkzTDZmYUZ0dENNcWp5VTNMeExsejkwMlU1VnJyMXorZWpGWER0Tjd0UkNGY0ZhdXZqQnp4VERWRUJcXFxcbnhmck1Ub3krcmo5aUhsQUdvcmZnK1Y5SFRWUnBRTlVCT3M2YzY4OXRMZFpFUkd0Z0pVL0ZwNWNRMUdySTFHcldBaW1neitmVDJqMHZcXFxcbnliV2dNc1BTZTYvNTI2aXhVU0paK2NzVlRNWW9lQ3dnNFd3UjBOZUJkTXQ3MnF4SCs2SWg4Z081dTZoUXhVbzVmdVZvZnFBdXo2R3VcXFxcbkpYaFUyZWtNUW1ITW5XMUpJeHJuQWNoYUlHVGk1M2tBdUVaeS9XVDdhMEtoM2NNYVRVS0FuNkplT294SmNkclA3RSt1VFZna0tDc2xcXFxcbnMrN0s4MHZSUTN1Kzk1YXlicTB4QkQ1RWlKMkxPVnZPTUVOcktFMldVNnJRRmVucE9iVWN5SjdkZDh0RWh0RkNqSHJJWk5MQjV2RzBcXFxcbitSUU1oejFtU1RnOFdnWmppVDVhZ3gyREZueTZ5cnhFdGRnWlprUTE2US8rWnFtOFJQL0VpbkdTNUVubGFKclhHbkplcWloSGRWdllcXFxcbnJUaG9qTmw0WlJ2dFVJeEtGZ1paN1ZrV0xVbWJuWjBaRmxERzJjZS94bEhUK0NLYy9XL0xMR1Y4QzlxMEJmMi90S3cyRVpKSjhKSHBcXFxcbkU4dVMxakJEYTh1ekxtekxSdjROY1FzbDA2R0lJMEpEUUNwRE93U0EwNHlsQlRYOHJETzBZUnp6Y2dOSWVjcXowU09OZ2dsTGplcDlcXFxcbldzQ1FmcXFBbXJVa0ZicnFzbUJMRlJOYnRTQnljcGI2YkEydGdYU2g1MzFsQ1Qyb21Mekg2L1VxOXc0Sld0UWFzbnhJNHRLcmRBenBcXFxcbmlrdFFwVmF2TFpnc205b1J0MHROa2NRUHNSSjlBUUd0bjBCUkViZDFNWWxsWnNpL05RZ3JmZEw3NVNVY09Uc0o5RkNYc3djRUJSdlJcXFxcbmxna2NQaFE5ZjlMNVJsa3hoQzFMWXNzOFUwOW9yZVhremdMdGdwSnhGY1ZkQUFTeFN5SkdDWTJ5VnVaSi8wUm96aWlOUUdaa3JuaFJcXFxcbnRPNVFvakpQUDE3SG5HeTBqVzBvQXZyVmJEYW56NVdPRkdqbHBqcGEza2hqNXk4NldBVlhzbFlWWXF4c0N6SFdIWHphejYvQW12ZUZcXFxcblZ0ZldlK3ZBNU1xWjlUUFF1ZTk3eE5vVkVSRGtRdkJvUXMycC8xd0huREZIWDJldHEwOVZCQ015NllZMDFvdjJ0UnlaU1laOE9RSU1cXFxcbmVLZVVIcjBoNW5xbEZxV2FpSzJVUWZubzl3cHFucWFWK3J6ZDNIT0VndFlZenVRaHN2eTFoRHNwb3piV0FoTTFCUTY3WWJKNlIrZVRcXFxcbkNsTmM3NXlqUjNFNEtnZ0l6NFJVQ29zY2kvbzFZS1V0N3NhazFzTUx0VFdYVFZLNEVQSlVWWlJSaFV4UVNWWFRJcHBaTDZLMzFwS1JcXFxcbngxQVBzKzVPc2VKWHFVUFpocU9LT1VIc0xGbEU5SENCbDVoWlRwbDdBQzN5Nlp1K1dEK1FJWWViUVoxa3NyQlg4ckVHNzVQeVE5d1pcXFxcbmh4Z2cxRkUrOHhzSTJ4Q2piZXgxUWJoUWhndVFUUnl1U21lUGdwdnNubEhZVFhsUTVjdERuWVlpQlFDZjlOZXhxWlFMRWpYR0tyTFFcXFxcbkRwY2doS1BieitScDVkWXFYd2o3NVRDNStGYU5RTWZ1SFRSNVl3UHRoVittUUl2eDVtTXN4SEt4UVF4dnE4clRYcmF4ZUVVMVQ2RmZcXFxcbjE4VjY4VnhmR21EUnVYZG1sS1NaY1BVSzhpcEVHMVZwakNvZHM3NGk2em5BRWVlb0tJcjBPVVlLWFdXdERXWUxjeDFGWHBrbWIwSkFcXFxcbkptVm9NNHV3NXdsM1A4K3pVSUZKM1NOV0YyRVNBdE5pRkY4Y2JZbytsNFVvL0xYZnRsWTVxcGpXUTBVWmEveGJWS0pCdXRwSE1ZTFlcXFxcbk1uSWxXMFdrSXN3NW01VjFZUjFQNmFqNjY5UG5uaVpGamV4eHhpZEZFREZxVEJRaUJWM0FOYXVwWXpVSVM1Mko3aGkxRVVmZnptbmFcXFxcbjVYalNscDNVcDJ5eWtlTTRkSjExb2o2a1dzMHVGV0prektNNnk5TjAycmRRN2hLeEZoWlRLQ1dwZno2ZjR6aGVyOWRPM01ybVNwMCtcXFxcblZveVl4UEE3RmxTcEdqWHVxcklSRHhSUzVwb2pkbVkzQlpYYWJoUGErTzZUOWlRRjY5SnlFL2NPTVdLTUFEZko2NGw0S0tEbzhmS3lcXFxcblNVb1l6cDhYTHl0alVOMk1UbFJRY0kzT2JtdWFnSEg4ZkhoMFV0TllDSnFMV2dIazdFaytON1lrdm02c2NTZk02VE13NHFVZTdZNlZcXFxcbnBXaXppbTFiQllZRHlibjh2NVhBU3FtRVA4Mi9PV0NWUXA2WGpiNE9QOFNnc0hJVFZrcmllSWk3cjgrYUswRVZEc2tDMlB2OXZxNUxcXFxcbldiS2NQL2xrWUlvZlNxOUtCcUE2WnJQRUdYTUlOWUlZNFpxdVFXMnl2aW5iNGRhQ2syMzRESXNDYXZUZ0FEekdjMTdEOWJsNzlXeHpcXFxcbk1rNE95aVdCNCtQUkd0NVlWVUxKNnBoamJINlRmVWh3TFBZdTY1cjVSRUhPUTZxc3pYb0g5V21hM2cycFhHY0x2Q3JHb3lIWlBxTWRcXFxcbkF0bTNpcU5DUjBteWE0am9vUGJVcUZQSytraUF0czUyU1UrcTV4ak9nVlppNHYxMitLdis4OWE1NkRJLzYrNU9xZytGaUpxTFJtYmxcXFxcbmdVQzlvMkpDTWFjQTErN2xKVzJkUHlvbWJrTFd6QkxKMFhQdGR3SWdaZlR6ODBPSnVMTW0xM1RNQUxMOUVrMm5hQXBqVUxpcWJUVTBcXFxcbkc1RzdMaU52clgwK04vT2pSR0xmT0hMc3QwYzFFNVV6bGNoVlMxSVhURGh6M3lnMWZINVl6QkV4NDVNeHdjVHVGUzFTU2VuTU8xOFBcXFxcbldYaHJHTmsyTWxJdWE5RjBER3h4cjBieGU1MG5MSmhWWUlhRUtKUlhLV2VuR3Q3dmQ1bVU0VGlMMmtodURHQk1Tb2FLYXpVc0ZabWVcXFxcbnozb0ZoT3RtbHJTdXdoNmduRVByUGVRTk9HQjllZ1ZML2hOQWN6OGptTkcyaUVlakN3eDZlcjFlZVdIRWw5S2dCbi9hT2M1U0ZnVnpcXFxcbkRQbU16SkFRdUc5cXQxQ3AyNW5zZFJjU0hUTzloSEIwcVFydFJCU3ljUXkvenhLWWdpL0VwVk1IQ2FubGVhTU1wMzUrZm5RRFQ0MVhcXFxcbklBUlg0cHZDRElVaU5QQlNRdENpMWVmek9jOHo3V0FYTkMvTVJJYS9haExQZTJud1FLR2JPTHFDWmUzNUxtdGVWYVRQMHpRUjExc3NcXFxcbnN1YUt0RVFUN1QydkhCTFA2Y1RKeTdLQ1phNGlUTHMranNOTSsvUmw3bEZOR0NQQUtNLzIyTHJORndIUldudS8zL1NOeWI5WnFtVTlcXFxcbmhDczNiRHFpdnQxSHIzdU14OU01czU3cUNmSFBJWmxuU0liUjVxVFNPcUcrMVhLVlorYVRXRm0rd09acVhaN1dValVxNkNMbThsWVZcXFxcblZrR0tkb1d5NWg1Ny9FbWpWOTZJMXBCQ0tjV1FBaytWQ01Ud2FlQk1LSFpQaU0wdXRYMmVxY09uRFdrN3JNUjFKb21JNjdveXNYYi9cXFxcbmJrZDJuR1pIakZEVCs0eGtMOTBWVTRnSVJiSHdPN0w2TVpzVmw2V0N0bTlSWUJuYmZkOThIbW1DZmF6U1kwU2M2NWllNTNtaWI1VFdcXFxcbmQ4UytIMzFHV05VNWZaS3MzbU9ncGw2WEhkTStzRXZVUVFkV2ErMzFlbEg4eFYzdU94ekZlbWlrakw4Y3RucDJmaURWK0xyRFhKdVRcXFxcbkRKTncxRW5FQ0IvM1hjdlVZbnl0dnRQQXNaWFh0V1dWb1BhMklMcWNVK1MrLytRWlNGbGZ4cGhEMm5EZFFnV1JtSTBaazlmYjY1aUhcXFxcbi9ySmNsNnNZZW14REtadk1JbXZRUnZrV0xKdFpHdEIxWGR5MUxHdDF2REJ4M1VPT2ZBYlN3R1ZLZmFxd1JUN3dFQklSeEpvUXFVd2hcXFxcbndOY1RpQS95T0hWTWdiaUtMMmMzZkR3eUQ2MnByMWxURzlNckxuVk92WDNCVitsV3VqNVd0R01OZm0wNHZWMWhxZ3diUVlpdU1OOURcXFxcbk5NS1o2STV2dXk4cHo4WmZRa3dlaFVBb1VDcXB5UU1zSFRIc0g0ZjZQTThJTTNvc0VmRmtOVU93cjgrelY5RHBRYnVqK0ZyRGVaN0hcXFxcbmNWaWJ0cXhHYXQrQ1Fob1FuUUcvbjJUOXRFTzJ0YVUwYzk5VWpLcUlIZTZ5cUpNN2U2aDJTenlxVHpiMnhZTHlheC9xMkdNUHEyVUhcXFxcbm80NHA5YUZ0L1pLSC9rVEl4OHI5WDhYTis2WEZsR2wxTm80MWMxTU9vYW9VeThSSFJPUnVJWHBIVzlNMnpoekZMQnNzeFd2ZVhmdGpcXFxcblVoc29MQndTakpzVUVhbGRyYnNGOSt0Z284ZHhSRmhyV2I0NGtxL1RrV05rZldueXNmb3JsYzQ0V3RKeERrQkxINzJMSTRaVk5qQUpcXFxcbk0zUklxcDZpM2Z5c3NxWW0rS3Y2Um4yU0J3Q2YzOUxuTGQxZFl4Z0k5dmx5anBBZFR0eWR1OXFvK2M3T0ZFVmxoOW80S0NaZFpFTmxcXFxcbjdzaFYzUEhMTEsrb28xTzhxT0I0T2RQUldLc0tJWjZxaURYVDJpWTEwdkkwbGU1VHhDOVZaMlZjMUkzaW1oY3kxZFFHaVY5bXZKTzdcXFxcbjJXbWhjN0Q0eXpwR3lNcEhNYlJnaUpLM1VIRUR6b3EyZTRZM016bU1lR3lObDRrNHlqbzM5NlhhS1BkeUZZWXAzUGZudXQ2SnpYMS9cXFxcbkNMS1cyWmlwR2RWcUMrVERBMDJxK0tyRlpSNTlaSXpsaWNmK09hQ1BycktUUzgycFNiblpCaWtuVEZoT284NlZ5b2sxWGt2Qk1iY09cXFxcblNjOEtuV25vUXFVU1l2VGpOcUk2b0FiQ1ErTG43Ky9jQlVlcGc3TDRsdzA2UW9wdFRlYUc5QzRxVmoybm1GZTVGb2s0QU82UWFrYW1cXFxcblZqUG9jVWMrY3NLWTE1WU1JbkdkNUR1cjFXMHMzbURQSW5UTG9EbC9PR3VKZzBseXdpSFhTMm9rQUVtT0ZOZm85bmU3OTBTR2dJcVlcXFxcblQrbG1uK2VTQ3JkOFMxSytiWUE3MzVCOGlnSjBIL2l5bzk0TWZOZTk0akVZY3E3bUtucEkzc2lBdjQyNUtNVXNobThkM1VyZ3pLd1BcXFxcblFENkpUeVV6UGt0QktGZ1VHaVE0Q2xkbFRXVm9XTUtmVWczWGRlVytieW9zcnUvWCs4N1Bnajd0czhZNXRqMUlrVmNGRnN0V1ErYzNcXFxcbmpPZk03TWc0SVdQbmxQSVlzTE44MFZlVDJyUnJkbzlGTzJaOUlkVWlIZFcrUDJ6aERaUHBaTjNpRHBKTjZIajBxYTlVLy9YK2NGVTFcXFxcbmR5dGxJMS9tZlh4NW5nWGZha242M0pqdTlldGVZd3FLbU5mT1BJVmc0YWg0bTJrWDhnWUlLcHo0Y3ZjSSszenV6RWZVYXhmV05wbWlcXFxcbjVQK3NydkQ4V01NQXpuU295eUxQbEJnOGNjMmdEYVBFeUNHb0YxVVVVMGFVREs4dFBrbi9WQWJmZ1lVc0tuSFlHVDVIUENsWVZWRkVcXFxcblpKelFaNzl5SXhrL2dndVk0YTBoNHNsM1hIbC8zbmErV0NFMWxXTGtUVW4zT1I2dVlCb2R6WUkzSlcvNlhMeU5WZFhFOG9Ubk1QUFBcXFxcbjU0TTFWT2V2SmtHYkJ2TDh2L2lHMlltTU4zd3VNbG5hSEhsamEyTm5uVjZLa2V5THhLckFzVzA1Y0RhcXVkWnhITS96YUFXRFlUaHhcXFxcbm9jRkRNUm8rTWxSTXo0UWZLS3d5ZnZhV0ZrREpwajUwaThrU1plM1FDNGxQWXV5VElWQmJyaW9HRitOZ2F4ckZkU2lsbUZaZjEzcEZcXFxcbk4xakExdm1Pdm5NMEFQZnp1dWJHVndEY0VmRzRaeFg3NGFxUC9DWVIxRmNTQ2JyTmxnQVdRRmI3Vk1jcGF6S0FQaXhEd0dtYWsraTVcXFxcblA5ZmNWMi96ZGNYRzFYL3lIQnBsYTYyWUtlSElmUm5JOVYwYTV4RTJFbXRPeUNiUGtsZUxycFJ3bFNLeHZyM0ZaY213V2d4L0F2cWNcXFxcblV5N2U0RFBsS21nVHl0UE9jQ01aWHNXZitLRkVmcy96a0VOc3BSZVZzdG91QnZsb0dyM2Z5OVpqMXhiN2MycTBHekw5QTh5VVlmV05cXFxcbkdkOTR5ai90NER6UFJHNCtnUnZSQnU3NGhFVGF6WXlXMmpxeEFERmJ2V25FUkQzMWVyek9jN3hmRVN1bG1oQUltK0lVd2MvUEQ3Y3FcXFxcbnNPRWJiSDJLMzdkRlZZU2F1d2NRRGU3alVkOHhsZU9lNytLMUdDdGc4MklBN1g1NlNsWWVnNEJ3WWdGMTBSN3RRTU1BWGtLNzFxdnlcXFxcbkhGWk91T3BSNE5BdzloMVNXZWR2cWRkOHN3NmRXMkZHMnlwS2lhVHJ1bExjaW10R2hKQVVYL3Vzd0tRbWVDTjF2QkRIUXpIeXRHWGxcXFxcbk9USENjYkpGNnpGQW9xWnZ6S0IwMFJvR25KZkNwb0tSY3l1WmJhS3ZPQjFrMHB0eVJ2UzZzQk9BQmhqeE5FYVFEQ0lwOU93ZWJaOTJcXFxcbjgvbDgrRUpNRHEzRUc2cGpTa09ERmk1bnpSV3FTbDhsUCtUZWZpM2ZKVTFFMkVwWUtuVDluSklxVzZQcm5kU0VmYnd2aXBDMFViTFFcXFxcbnJJKzJpWTA2TWNKWWh0Zzg4emgwcjRDNjhsb0RkZ3IwOS9kWGRhOWtUYlhaNXBielVCdlNmbklnMURmSmdBTlpucHpsZ0V2cmcwWU9cXFxcbndEK2ZPNGE3ejVWS3ZDVm5lQ09NQy9XTzQrVitKdDZUb3dXNUpPTEhMTEwrTzE2c2RSekhpOU9Bei9POFhpK3BrekJIYlV1QmU0VmhcXFxcblNENmwzNy9mYis0MjF2TFJXcjZhYTZ6dHk4MG9iUTF0KzUramJrZVhsdnM4S2s5Q09LM1A0Q2dFMUIycHhncEZxczdwMzJQTXZPV1pcXFxcbkxJeFF5ZGQxOFVLRklmL003VXRVMzJhV2t6STZmVlZhWUFjNEN2NWZ6SXVTaXZVWkdjWFdia244ckFxekVUandwNktQSWtEZzI2TVZcXFxcbmpKOVVGazEybEk2SS9pNXdPRlpWcVFrbnJnZHAzcXdPOG83MExXUFJTS29vYU85MzZ5dEdTb1k5MUdQQWpIQTUydUZtWjNWd2Q1czlcXFxcbjRCdDdwei9SN3ZiUUpmUTltTGJVdktkNUl3T1lRODV5WFl2NVpJMGFsZ0Z1amxXTk1kSWhWUXRkeWlHYktPMnFVOEF5TVNPOWFvcWxcXFxcbjJ1VmdkSWxJRE8vUGFUUDIwNzVscXJ5MVZ2NEtLeFkxMy9lZDc5c29iRlBzdUJCQ2FVMXhYU3lEbDNkenQzSHdXNVA2VmtUa2tpM05cXFxcbitpRFZlblhaN0NndE56VjBucWZaNFg1bXBzYitwUllpSG8ydVV0eVpsUCtjNmV1Nkp3Qm1RVkdIelQrSjVaMmRkazR3cyt1NlBwOFBcXFxcbjMxZmJXdU5iN1ZUV1U2UGpLUzZOdnZ1RmJuMTM5eFVCRWYyTlloTStLbjRhZFdaOStqSUZsV0FaZ0g1dVl4bDI2YkVlcWxlSWFiL2ZcXFxcbmIxVWtzNGxZdllLdjgzZ2FiaFlBeHJveUVVS3lLV3VzcTJ3TGJTNnlIajFYTjZDWHFFejB3OXlXVzBrZzVaZ21uN0xsVlJHV1dRNGtcXFxcbmdDL1RvQ1p6M2wxNGxxbVVqZW9IeTdOOTdERjJjVnJyT1AyY2lFa3BNb1paelloMUdhTjJwcWc1UnRtUFB2YnorWmpaOFRyTkRJYllcXFxcbjBnZ3FrdHI5Q3E5ZEpYMk1FWllQM2R1NlkwcHFWYXNRKzBwUlpTaWxDNHlWVWZTbzh4SlpzOUsrdlNpTTdvSHFHV1RGR2JWbGlRV0RcXFxcblptSlpRL0tRUlVORmFpcmxQTjd2OTQvc0JtdTIrTFNRK1dMMWpkcC9na0E3bWViWWROODdKZGsyVmdlWXhDRnNuYjFSbytaZ0loNkdcXFxcbmdJcEJYYnJwN21haDFlcGs0Yzk5OGVrZ0hiTkpCYlVMcnIrZWFDNUF5RjlMUDJPZE1sZUpiSVZ2OVBkdDVNemhlSW1YU255eS85UEtcXFxcbi9yNnhocy84WDdQNVU4K210cm52bEk0MnhLZC8xVGw2OVdNcGNTaVVlSHRHM0ZtbHVlOW9yZjM4L013dGlFZjZybWwzTDNRY2ZYMFhcXFxcbllVNWNhN3dSYTV4TExKdFpQdm03a3d6M2IrL0JsY1M0SEk2NzkzZndmR01QRGxsdGREb2Ivc2JDLzFmOVpLV2lqYzBPOGh0U1NrNTJcXFxcbnVKKzBES0R0QzAwVGJXa1BBQ0lzWC9SMG5xY2p6SUlyTG1nOTJUSUxDNjAxaTdrbzIvcERoT0I5YlYwdVFoRXdmTlR2cGJmZGdjZDRcXFxcbnh4SEVmRHRKUGkzM2YrVDdFckV5TWxsTEcrK1FJanZuQTZxc1lKQjVtNnpmSU90cFcycVArMmt1OVllQ29JeHEycnBvUkYrUUhaSnJcXFxcbnFERTFxWWl5RHk2MXQ0Z2F6OUU1cXkzdVNNeUNxbVJTVmxyVFcrK1J4ajdZT1pCVXBENUNVaFptVU9jUnBrT2xXMkRoSDRESlU3UTVcXFxcbml3amgyZDUraDlSeFhZODdYcTlaa2k3VW5QVFFyMm81dzlCYXU5dXlPTzNJWlNrNktpcVNQYlQxQllHOGhhMHNqTEcrblk1SGRjUG5cXFxcbkVsVXNFT0xsUVN5U0EvMTU0cm82OTdrdms5WjdiOHE5bTJ4Q28vNUtZVnZRUjNOTGY2c3pmbk1NeXZjQUFBWXhTVVJCVkNicm83VVBcXFxcbk9yRFA1M1kvMDRYUUZXdHNTbHp2V05iT0ZOQnBrTjVhdTk2ZmRqL0Ztc3ZvdEJIMmhOK3ZjQUVBVnl4TGpYaHFXTFZFekk1d2F0RkVcXFxcbjRqVHBUYVZEUyt5ek0yMUttZlZvTThzcE5CMmJ6aG4yRHNocllXTXJ6ckV2QUhKV2s0OVlVem9oRVFLSDZaSzRKZWF1NjNxdVcvZmJcXFxcbncrSm1GaUZtVDdvWXgyNWppcmJJd3I5YVhQbGM3dEdmTWh2cjFlbmw5UngxSUhvbjJnUnJubGhKamNKU1A4TStKQ0IrZm42dzBvS2FcXFxcbkxRbk5CdUVlNjVhVVdPMmRYeTRCNzdBSjdzeUNGYWQ2RlVmRUFOZWtMRUdFdWJyZ1hKMUU5V3BjSW1EcGIrdk1EWlc0MWtWbGFxdVBcXFxcblVoMUVXRjRvdjg3MVRZUGZuOVMxOWhYQWVUclEwS1lnRkUxdEhIa1hBUGM5OXViYTNqSlVWSnVIN3YzQS9uOCtuLzR1eEhXQUprN1NcXFxcbjNYdm9uZDhQSHJleHhxTS9LVk53U3VmdWtsaXJ1RU1TeFhtbkZWOG1CWmRCU2wwNis4NncxTFFPZ0JMRVdnUi9aQnV0a0poRW9Sb1JcXFxcbjF6VnpIeFVyWlIxclFVTkRHbHNMTEp5UmNabGQxQStLVk5WYzhRZU9OWTdSTUZsTm5oM0NtRURLcDdoNFY0Vllma2h5ekNTUVdhOXRcXFxcblJVNGZpV0pyY0dkZzBNejZveGpzYTdKY2tYWE95QXcwSU5ZWFNadFpqTXF5UWxVMXBBWnVhMFFMNEw3djM5OWZQdldsZWlYc3VGN3BcXFxcbmVlWjhrMW5mVXFGcmlGZXlOeFNaMWh3b2ZlSWQzZUVzQlV6VjRmanNyZlhORGhUNGVpKzlpcldoTks5YytrUWNxSC9YbnZQN0xORW9cXFxcbmZSWGN4UnIvcGx2V1ZRKzJSUUhQODJUbFdudk8vdEJrbFUrMGU5M0VTNGVBNVhVT05GN3VXV0RpckNoRTlYVnFNbFJ5TWdaUVEvck1cXFxcbkRHbXdTYlBIOGNxdExQUjJZeGk1THJBOXo1VnhSWVNzV1k3NUFydDk1QVZQdHUxY3I2SW8ySCsvLy96Ky9yUHJMR1NLUXdPa3lSQ0lcXFxcblhJVmR5NlRVb2NuQlA3Vk1vV1JDcktrakRabUhWdkpTVUE4bEFhc3htaGwxb3o4UmNjTi85RlhQK1Q2YlVpa3RiSzdCTldURGRtRXdcXFxcblRoYlBhR2NNOFBqbm40OGRwKzZRUmpuNG1Pa244MEJpRW1PaHc5WnRSRElNcFBHT0FLTWJWNVBLSnhZU3VFWGh2UVJJTEZNZnJUVjNcXFxcblpMaENRVHhQNU0yVHpXTjdhak1pQUQrT1Y4YnBPVWVlSGlKbm9QTnhkcDYvSHdYWCs5T29UVll0ci9mTmVuSTdEbnYvK1gydW0wOWlcXFxcbkVkUVU4ZGRiNXo0TDg2bFM5UUQ1elgzZlhPQ3R4a0xLaHhBLzJZT28xRVZNMm8vbjJ5N0tiU3lOZ013T2svNThiSzZxb3VScERHWUtcXFxcbm5Nc0hpQmxSa1pESWgrYXZOcGZqSXUvLytmT0gwWVZMdlp1ZG9VYUozUjZlVXpwbS9URTU3WVN0ZTVQeW9GYmFMTGtlYmN3RFBjOVNcXFxcbjhGMEJBc0FqckxVYnN0VmphMjJrMXdjTEpxck9kWlhlTXhhN0xpdHJ5MUdnZ0hWdXdaZ1RHcHV0cnN6TUFEK09SZTUvL3Z4cDY4dG5cXFxcbm4rdk85M2VxYjZPVTdQQW5XcDNEeDBoMUlGRUhjNEZ5cVBac3ZNTW5yWGh3QWw5YzBYdytLRmU5TThham9oQlhRMUFvczdFL0FMTDBcXFxcbm85dFhGUEFxMWZJdVhiZ3lLSklBVmlwZ0Vzc1dHQm9vcm0yNGNVWXYyVEs3MnIxWDlMYXpRbXdjczFJa2hKRmQwa1dlUU9MUGtZZTRcXFxcbjdLRWhCL3hZNXFpY1lUaFJSdnZJdXZhUWRRZXZHVGVNT2E3cmliQVNsdjN0QXl2cHBZYVY0NW9iK2dyRi9ZdXRoT0Z1eis4L2Y1NXJcXFxcbjJkRlRWemJsTUluclNSR0VTVVJvRlVhbFRFWHBTSGhWbHVkelB5WTFxeWI3bkxleHFKbWFhTEl1aDkybFBaSHVtU25rclhNcVJMTVNcXFxcbnRaVXFsd2pJQWttcG9NMmdYanRzWStxV2JyeUVwSG5rc2hERlgwZ0t3dEZoc091SWI5cXNlV3E3eFEwVzg4UXdaMW94TmNrUGxCRXJcXFxcbkx5VXI0eXpKMEo4L3ovTGtJYkVmRVJhTkUxclk3RjFsM1VWd3BGQW1OcnR6UHBZWkwwcUtyV2tJWUd0RklhTU91RjNQL2ZsOTU5UGhcXFxcbjNFZFNPNVB2NWVyYk9jVUkzVFY2cDBDTGFKcFVxdGpMWjMzS2lsMkhwUC81UGRHYUxXZEZncHBUWG1veVVhSVJheTROMEFuc1dQUFZcXFxcbndneHRYZTdlbGhxczZkRHlHNTBnNXlpb0NUV2RIUDduODhrdXFUL2cveG8rT1FkUHB2OHFjZTA2QjJsbXJDeVRtSW9UZU5hdEJQU2NcXFxcbnJJVGtVMXo4MWIwL3hwdUpINjBxZXJwOHVpelRWMklOY1F5VForOWxtN2JaODRCS2hBcmcxa3VUd2RlSEFYZ1ZtamtPcytQenVmTVpcXFxcbm1WamRPK1dXcTJUbldnWDFEMnBLZXVRSmZRWnpRSkpFd1JZSUgvMlRFa25WcG02MGNLam1UNlh5QkdvVXdnK2EydkV1SWJPZHBFR2RcXFxcbmtTcFl5U01MV1AvNXozOXNEWXFhckVSVTQrUC9FZkg3KzV2WldheHpwSGwrT3ZuL0EzT3FrUjA3MGV3L0FBQUFBRWxGVGtTdVFtQ0NcXFxcblxcXCIsXFxcInF1YW50aXR5XFxcIjoxLFxcXCJwYXJ0X3dhcnJhbnR5X3N0YXR1c1xcXCI6MSxcXFwicGFydHNfbmFtZVxcXCI6XFxcIlJFTU9URSBDT05UUk9MIE5PUk1BTFxcXCIsXFxcInJlcXVlc3RlZF9pbnZlbnRvcnlfaWRcXFwiOlxcXCIzMTIwXFxcIixcXFwiZGVmZWN0aXZlX2JhY2tfcGFydHNcXFwiOlxcXCJpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBSGdBQUFCNENBSUFBQUMyQnFHRkFBQUFBM05DU1ZRSUNBamI0VS9nQUFBZ0FFbEVRVlI0XFxcXG5uSDE5YlpManVvNXNBcExyenN4eVpndHZFMi8vaXpoZHRpUmlmb0JNSmtIM1VYUjB1R3lKSW9GRTRvTVVaZi8vLy8ydkJmSTRmMTdIXFxcXG5jVmdnSXN5c3RkWVFadWJ1QU5xRGlEQVBod0dJQ0xpWjljOFd5TSt0dFd3dHIwVjRSTUJhL3VydUZtaXR3UTFBTklzSXQraU5tSVVoXFxcXG5JZ0NZV1hiTURtK3RtVmwyS1Qva0NlNGVjcmo3Y1J6Wmdmdy9UK2o5YVUzLzFDL05iTjUwakNJL1o4c0FzdVg4SnMvSjgzbnIwcjNuXFxcXG5lU2c2TTNOdC9icXU1M215M1d5T2NuVDN2RWFQdkFmUHlhYllBMzdXay9PMGJJcVhjUEI2STE2ZVBkWUxlYksyMzVIUkd0WEE3L1BEXFxcXG5jUnphaUkyRHZkSm1WZlRaSlpXdnRrekZkS0I4RzJORU9JQ0dmaHNMM0orTGtJd0loem5HQUR5TzB5TGlpZlpFNDExYnU4MENiayswXFxcXG5ocTViOXNZdER1KzlpV2J0V2RSZ0hyQVdoaWRhR01JNmxCd1JEK0RXRUFodkQyZ1FFS05KV0tpWThodUtnT01uRWlPQ2w2ZjB2NnBjXFxcXG5OYVFINFovdEtMeXlXWVdkYXE2Q0ZNQjkzOVFKMWE2TnN0KzlvWGEweHptd29tb2R0aXFmWm9nVi9xMjE1M2tJQi8yZVB4VzBGalBTXFxcXG5QbUJZVXBFc3Z5ZWY4RFNlcklMbVQ2UWFIYzVYK2FxNWRFUURDQU44WG54ZFYwSU1BOWVkV0VXbGFRZkoyckRtc05NUEFFOTB2RmlBXFxcXG5iRzRCdERDUHZGY1lDaEdaMlhFY2srQUN4OUY3MlZIZnJEMWRTV3I3UlpmcEE5QzZhMUVzcTE3MTFyeGNUUm5ib2FjcE12Wm1PVFR0XFxcXG5ZZitLZ0oycXZoKzBDVGUxV2IwZWdxUFdHdkdpS0ZiOVU4a3BXY0tUZ09KZ3lMWmxHT3huUWE2ZW5KZERtRUY1WTI5S2U2alFUckhFXFxcXG42b2ZLdFlXN2lYcitSQUZXWklXaElWcHI5MzByWXh6bWpFK1diajNOQW5sVml1K0tObm5RclNIU1lnQ1k5d0dqQmRyQVppQXRabUhiXFxcXG5hRlJ3djlCRHBZWTF0SmlLTklUaGVSN0Mzd2IxVWU3dXJ0eUZZUTBxTDhwb2wvVXVYQ1dvci9ydzdDZzEwSDJSTzREbmVlNzdMc3FrXFxcXG5CQXNLQ0hrMUszWlI0ZHpsK0R6RUhWYkE4dnhpWnp4SENZUUk1UWNmQi9Hb0hvd1JIanVUZlNqUytkb2ZpS1YrL1o4SHFadzQ4R1RTXFxcXG5MaTlER0tLWjRlaVJRRVQ2bnh6VmRFUXRFb1lPZ3h2YzBNSmg4YlI0Mm84ZnBZdko4anpNckVjVUxTd0E3dzVoMGh4czh2dUlXQkJlXFxcXG5GRWEwNXZuTEhkZjQ1Ry9DSXFWUTFrb2crNW1MRUhRNEsxdnVDUGdTcTJNRUhtbG85MzFmMTR6NWVHV2hUclhOaGFRQ21RRmhQZlp4XFxcXG5sdTdTa1BkZnAwTWVCc1R6UTZJM25rUGtzaWxGSE1XcTdldVhTaVA2L2RkRGFZMW1GK2tNelN3UjBhT0x1TTNIR1lZd0pGbDNyTGtmXFxcXG41ZzJSbkVzTitYa2tzMDkrY0F0UnZDcDgycFNoSWR6UDVOK3BOZ1NqSUljZDVobDdRT0JNWnJUaFYyekVkcEF3aHFvcUdXRDhKUXZqXFxcXG5Ud3Z2RDVGQkhNTlgwQ2d5eU1PV21XRTVNaGhRRlVYRWRWMktQb1hiNUh0M1JndUZHY3RJbnVmaEphUk83YUlKbSt0Z3lLY2NsV1lvXFxcXG5XQk1LNVhFTlF2YWVGNmlxclBlUnFyYllmdjZxV1g3K21tbXRNUVduR1I3SG9melkwV1FXRVovN3VqT3g4NTZWMnVFOWxnaFk0REQzXFxcXG44MGh3c1dRQk56dEcySnUwN3A3WnNPcU1NVzhmZVhSYVR4OFExbGxiRlZBY2IxR0dSbVk1ZUlwYm9WZG9nZTFRMmNxWmlnWVNVUWZzXFxcXG5NQTYxYVVvZmdFZEVncUtFd0ZndEl0RjZYVmNabFdvWXEzbVdYeFdEL0o3aVRzM3JUVFdPM29rWWdNTXlNZUdZVlhPbGZjcWF5dmliXFxcXG5aTFh6SlhJb1JxWjYwa2FvV2tpMjdFOURpdzQ2dldzQ2Foa0FEQzN1ejVVaGNBNnlEOHluZERyWUF3dDJiUDVwZ1hnYVhRTEJtemJSXFxcXG5PM0Q0dEluTXkwZW1hc0xqNlJVU0t4eDhIL25vSk5xQzVTSWRYdlVWSmRnb2E5ZUhFaGRXV21zQTVlQ21wYnlOS0xFZHovT1FyOW1KXFxcXG40bExTQytVNUZJSHF2T1RRS2o0YUZ0SEUwMmlrN0tRT2xkK1FGckZpSEg4dkcvR0VYZGE3VmtxNG9xTERSdVZrZVgrZDdoWU1jb3N6XFxcXG5aZXpSRUdFdDRHRzQyOU5kVUNBWm5KWjQrcEdsaHZNOFo2RGRJbzJqRERLUk82T1h3eHNxM0pRMzBnNHNjUHJCTUNsUFM4elNZdEFpXFxcXG5tVDMvbVhCb1NDekJBMEFtQVpTKy9xUjZMWnJER2pXV3V4eG1tWXNnT1ZyRFVnakg2UTFLdDY3cnV1OGJLN3NwRmlMaVBNL1NnaXBjXFxcXG4yVlBCZ3RXUSthYzZsbklWNzZqOTU3Z2dqaEVDNnE4VW9lZncvM0k3N1hhSVkxUWtzZkl6aStDOFRXcmo2K0FQYzRkWk9Jc2QxOTErXFxcXG4zeGR4VFdTTmF5eUxHMzdPZ3R6OFByczdLaElXU0ViV0FTL250NUZBTW5jZFBQaVZiYnY5S2JvM2dkTElPR1JtQm9VbDJLeExMVERXXFxcXG5HTncyWmxkOXpQUEwyZXo5bm10aUFDZGo3Yy9uUXdvMjhmNXNyVHZHYjQxUS93VHBYaXBqSDlTRWQ5TXBkcTJ3WWd0cUpjVzJWSm9tXFxcXG5QdU03MXcxWjMvZk5oRWkxb3Bjd25Jc0lWOFBVVGlpQkxLSjgybUYrSHVZV1lmamNsM3JrYnIvcDd2UExaR0UzZUk4M09uWVVwMy9KXFxcXG5ialFhVTdIeWp1cFVpeWZ2RFE0TGdIQ0xvbXJQZ09ZeFJtRWpYQ3QwcWhNVTJsdUtzY244VG9Vek5jWm9GOEpmWm5hZXAwS2d0ZlorXFxcXG52N0ZOZzJwSlRFbGMvYnV5Y0FsczlWQ1VVUitGTWRobXlLSGE0c21sekxTclN1OWJTdDRodk8rajBFb3JvUkd6dGV4UG42WFYyNlQrXFxcXG5zUnFPbWJXRysyNEFVc29xZlFBTjhmdDVoOEhQZzFFRXVUdGpqMTVhc3A1VkFwMS9WU0xrZXNwbG9UV2JjNXZrZXFXUmlNZ0tJdStlXFxcXG5XZWhVTFl3RzFHdUgzNVE2dGVKbXg4eFQrRDlGbVpHb1p1R0sxMklCZGQ2RXd5NkJvUlpvOUJ3YnlkNzcvUzdrdzVsVFZYaTVQYzlYXFxcXG5uUEluUmJFaVRqR096ZXgyOFgzMUU5b2xqbFJQVU9KUzhXSEFXVSt6elcyVTRHMlpTY281RkpWRjVpYm42U3duTHdISnFJUkFaZ2tTXFxcXG5SSnltNnVhY1dCNlJieGwyWjE1RXppVWFaNjhEOFN3enpTb1J6dHJvQ1lucnRKNmNVd2ZBT1NER01HaHhyRXN0RkxaRml3b0ZFdjMrXFxcXG5xOG9hQXQvRXFHTWtjcEI1Z1RZT3lrdVR2YUtyL2szNDUzMXIwc2gyMk84U0FMalBLSDQzRjJ3VXY0dEFpZDQya2cycHZlbTF4YmFLXFxcXG55UGFUZlMyWlFzQ3VSc3hSNndsejdLb3VkcmUxOWp4UHh0c3Ftc1NkV3FLWlplNEhhN0QyK1gyM2U1UWR4T1Byc1Z4K2VFUG5VeHNSXFxcXG5icUsrMkdiZUpXMk9scFJoK0dHZWZRNkRIVjRrTWtVcGZxSm5qSUVNdE9mYXF5MTFMTVN5bTVkV0lFeW91V1F4UzhLU3hKcEFabDZuXFxcXG5scFhMb2xnNVdqUTIvdng4UG9WL0k1YjRGQ1BNS0VOaWEra1NOSXpSNGZsYThOMlJ6bTlLNGI4Y2U0WDY2eEdqVXJaSElQeS9yZk84XFxcXG5PaUorT1BkR09jamRrTTNzOUlNbHpiWGo0YkJ3UE5IKytmM3pQLy8xMzlhYXdmUDZlSnBaRHhVTXZiWUFvRDNOM1p0RklNd3NuaGE5XFxcXG45MllCRE8rZlZZZzVoc09mMXF3Wmtxa2pFREFLTlBQWHAwVjZMWEhkRWVISDVJRnVORzRCR0JZd1VrUE1vVzFNZ0tsQUNvYmlXekpGXFxcXG5mUFNRT3dQbjh6eE40a0VWTVh0UU1uVVNHUVE3QmRlOFdmbW02SjhuRkRXYkhCQURzcFdtcTFjVXUxYUdaTXRKUHNUbXY2VFViSWZnXFxcXG5wUVJNcGsxS243V0ZLV1VieVVpT1J3czA3SWZxNEt0anpQVktEbnVlNTdxZWF2dWo0Z3d5dU9HSjFybVNDMUF4bHpoRjlNTDNNZ2FaXFxcXG51ZStnQmdBYzVrbmlaSHlDZ05NdWJLRXZWZDNpbjZMUkhyMWxEWDFicUtZNks2bFFyQlVJendudkRNaE11SHpuZnE3cVZGbFQveVJ1XFxcXG45cFV6TWp2VnNnZkZyeGI0OHlmMUNpckJYWnFhOWFyc05QTGRyK1ZkRk10TnByRTEvVlBGVUZZRnlKUzFEY0k1NFpaZVcyWEtENlYvXFxcXG5oWVBVWHM3ekxBRW1SbkI5bm1kWVg2bkhnUmJsUjR3VjFxS1ZralM1ZTBNRUlwZHdlQ280dTkwTGI4TTNSbS81aVlZSU4vZkRvWXQxXFxcXG5CQ0pVekxRZVNSbzdqQkRtUzMyMW9JZUhTcHlOUjRSekpRYldRd21Ma0tGRmtLRktDZHUzV3NSOTMvZDlhNW1KaDBiUTJpMEZtZ0t6XFxcXG5CS2VxMThMbTJOSzVrRFVuNlkzVTVOdFlsS0tZdFpXdmlrcGlMVDJXZ3lZK1FaTUZBV0JaOTZheUxqWTQweTBKVWRnejlkZVVXb2FNXFxcXG43dDdyenFOdVo0RXlNRWkrcHplZFB1ZCtkUDBmaEcyL05PS212L1pxakp5Z3VTalAwZFhpYUtFVFkvLytQMVp1Wk9lN01GV21CZmE3XFxcXG5yUGxOT212TnloU1lESWw0KzdMU0xyWTRXazh1ZklmVnF0UW1GQmF4Umxxa1B0Nk8vUy9wWW9tNzJEaUxHRHJ0cVdJaGg1UU9oMHdXXFxcXG5zelAwYWY3MW1pOWR4MWg2OC9kS0RZQXltSWk0cmd2dFlUelFNN1MxUG1WbW1yOXgxb05JNmJvY2dKM0RrRGwxVlV6UEZRYzJwMlJiXFxcXG5ML1hsK2U1K21LTk5TZ1Y2QXBuWGF0V1h2RmUwcTROZERqTUxUQkpSaFZCcWhUU3BxOWZyVmE3Q0NreHFncUtQaU90NnpKYnA4MTJwXFxcXG5lajdIdkN1dldFelJ0RUtlVkU3WFFqRVZoclZSek9LTmVLMENXYzh2ZjlMczFOYURLYmorck42TStrKzlzeFA1VTZZMlBMa0l2YWdxXFxcXG5QMXpYOWM4L3Y1MTJZVnh4a2ZGMWpKcGNHSWd2alBVYkdYRW55am9MdFFvT01xeDFFQTJGSFo1OHpUWjE3ckZqY015WGs5WVM4bjF4XFxcXG50OHhtUUxpb2tCNEV6bFRWWVFZM0w2ZmFGdHRDTXFqeVUzTHhMbHo5MDJVNVZycjF6K2VqRlhEdE43dFJDRmNGYXV2akJ6eFREVkVCXFxcXG54ZnJNVG95K3JqOWlIbEFHb3JmZytWOUhUVlJwUU5VQk9zNmM2ODl0TGRaRVJHdGdKVS9GcDVjUTFHckkxR3JXQWltZ3orZlQyajB2XFxcXG55YldnTXNQU2U2LzUyNml4VVNKWitjc1ZUTVlvZUN3ZzRXd1IwTmVCZE10NzJxeEgrNkloOGdPNXU2aFF4VW81ZnVWb2ZxQXV6Nkd1XFxcXG5KWGhVMmVrTVFtSE1uVzFKSXhybkFjaGFJR1RpNTNrQXVFWnkvV1Q3YTBLaDNjTWFUVUtBbjZKZU9veEpjZHJQN0UrdVRWZ2tLQ3NsXFxcXG5zKzdLODB2UlEzdSs5NWF5YnEweEJENUVpSjJMT1Z2T01FTnJLRTJXVTZyUUZlbnBPYlVjeUo3ZGQ4dEVodEZDakhySVpOTEI1dkcwXFxcXG4rUlFNaHoxbVNUZzhXZ1pqaVQ1YWd4MkRGbnk2eXJ4RXRkZ1paa1ExNlEvK1pxbThSUC9FaW5HUzVFbmxhSnJYR25KZXFpaEhkVnZZXFxcXG5yVGhvak5sNFpSdnRVSXhLRmdaWjdWa1dMVW1iblowWkZsREcyY2UveGxIVCtDS2MvVy9MTEdWOEM5cTBCZjIvdEt3MkVaSko4SkhwXFxcXG5FOHVTMWpCRGE4dXpMbXpMUnY0TmNRc2wwNkdJSTBKRFFDcERPd1NBMDR5bEJUWDhyRE8wWVJ6emNnTkllY3F6MFNPTmdnbExqZXA5XFxcXG5Xc0NRZnFxQW1yVWtGYnJxc21CTEZSTmJ0U0J5Y3BiNmJBMnRnWFNoNTMxbENUMm9tTHpINi9VcTl3NEpXdFFhc254STR0S3JkQXpwXFxcXG5pa3RRcFZhdkxaZ3NtOW9SdDB0TmtjUVBzUko5QVFHdG4wQlJFYmQxTVlsbFpzaS9OUWdyZmRMNzVTVWNPVHNKOUZDWHN3Y0VCUnZSXFxcXG5sZ2tjUGhROWY5TDVSbGt4aEMxTFlzczhVMDlvcmVYa3pnTHRncEp4RmNWZEFBU3hTeUpHQ1kyeVZ1WkovMFJvemlpTlFHWmtybmhSXFxcXG50TzVRb2pKUFAxN0huR3kwalcwb0F2clZiRGFuejVXT0ZHamxwanBhM2toajV5ODZXQVZYc2xZVllxeHNDekhXSFh6YXo2L0FtdmVGXFxcXG5WdGZXZSt2QTVNcVo5VFBRdWU5N3hOb1ZFUkRrUXZCb1FzMnAvMXdIbkRGSFgyZXRxMDlWQkNNeTZZWTAxb3YydFJ5WlNZWjhPUUlNXFxcXG5lS2VVSHIwaDVucWxGcVdhaUsyVVFmbm85d3BxbnFhVityemQzSE9FZ3RZWXp1UWhzdnkxaERzcG96YldBaE0xQlE2N1liSjZSK2VUXFxcXG5DbE5jNzV5alIzRTRLZ2dJejRSVUNvc2NpL28xWUtVdDdzYWsxc01MdFRXWFRWSzRFUEpVVlpSUmhVeFFTVlhUSXBwWkw2SzMxcEtSXFxcXG54MUFQcys1T3NlSlhxVVBaaHFPS09VSHNMRmxFOUhDQmw1aFpUcGw3QUMzeTZadStXRCtRSVllYlFaMWtzckJYOHJFRzc1UHlROXdaXFxcXG5oeGdnMUZFKzh4c0kyeENqYmV4MVFiaFFoZ3VRVFJ5dVNtZVBncHZzbmxIWVRYbFE1Y3REbllZaUJRQ2Y5TmV4cVpRTEVqWEdLckxRXFxcXG5EcGNnaEtQYnorUnA1ZFlxWHdqNzVUQzUrRmFOUU1mdUhUUjVZd1B0aFYrbVFJdng1bU1zeEhLeFFReHZxOHJUWHJheGVFVTFUNkZmXFxcXG4xOFY2OFZ4ZkdtRFJ1WGRtbEtTWmNQVUs4aXBFRzFWcGpDb2RzNzRpNnpuQUVlZW9LSXIwT1VZS1hXV3REV1lMY3gxRlhwa21iMEpBXFxcXG5KbVZvTTR1dzV3bDNQOCt6VUlGSjNTTldGMkVTQXROaUZGOGNiWW8rbDRVby9MWGZ0bFk1cXBqV1EwVVphL3hiVktKQnV0cEhNWUxZXFxcXG5NbklsVzBXa0lzdzVtNVYxWVIxUDZhajY2OVBubmlaRmpleHh4aWRGRURGcVRCUWlCVjNBTmF1cFl6VUlTNTJKN2hpMUVVZmZ6bW5hXFxcXG41WGpTbHAzVXAyeXlrZU00ZEoxMW9qNmtXczB1RldKa3pLTTZ5OU4wMnJkUTdoS3hGaFpUS0NXcGZ6NmY0emhlcjlkTzNNcm1TcDArXFxcXG5Wb3lZeFBBN0ZsU3BHalh1cXJJUkR4UlM1cG9qZG1ZM0JaWGFiaFBhK082VDlpUUY2OUp5RS9jT01XS01BRGZKNjRsNEtLRG84Zkt5XFxcXG5TVW9ZenA4WEx5dGpVTjJNVGxSUWNJM09ibXVhZ0hIOGZIaDBVdE5ZQ0pxTFdnSGs3RWsrTjdZa3ZtNnNjU2ZNNlRNdzRxVWU3WTZWXFxcXG5wV2l6aW0xYkJZWUR5Ym44djVYQVNxbUVQODIvT1dDVlFwNlhqYjRPUDhTZ3NISVRWa3JpZUlpN3I4K2FLMEVWRHNrQzJQdjl2cTVMXFxcXG5XYktjUC9sa1lJb2ZTcTlLQnFBNlpyUEVHWE1JTllJWTRacXVRVzJ5dmluYjRkYUNrMjM0RElzQ2F2VGdBRHpHYzE3RDlibDc5V3h6XFxcXG5NazRPeWlXQjQrUFJHdDVZVlVMSjZwaGpiSDZUZlVod0xQWXU2NXI1UkVIT1E2cXN6WG9IOVdtYTNnMnBYR2NMdkNyR295SFpQcU1kXFxcXG5BdG0zaXFOQ1IwbXlhNGpvb1BiVXFGUEsra2lBdHM1MlNVK3E1eGpPZ1ZaaTR2MTIrS3YrODlhNTZESS82KzVPcWcrRmlKcUxSbWJsXFxcXG5nVUM5bzJKQ01hY0ExKzdsSlcyZFB5b21ia0xXekJMSjBYUHRkd0lnWmZUejgwT0p1TE1tMTNUTUFMTDlFazJuYUFwalVMaXFiVFUwXFxcXG5HNUc3TGlOdnJYMCtOL09qUkdMZk9ITHN0MGMxRTVVemxjaFZTMUlYVERoejN5ZzFmSDVZekJFeDQ1TXh3Y1R1RlMxU1Nlbk1PMThQXFxcXG5XWGhyR05rMk1sSXVhOUYwREd4eHIwYnhlNTBuTEpoVllJYUVLSlJYS1dlbkd0N3ZkNW1VNFRpTDJraHVER0JNU29hS2F6VXNGWm1lXFxcXG56M29GaE90bWxyU3V3aDZnbkVQclBlUU5PR0I5ZWdWTC9oTkFjejhqbU5HMmlFZWpDd3g2ZXIxZWVXSEVsOUtnQm4vYU9jNVNGZ1Z6XFxcXG5EUG1NekpBUXVHOXF0MUNwMjVuc2RSY1NIVE85aEhCMHFRcnRSQlN5Y1F5L3p4S1lnaS9FcFZNSENhbmxlYU1NcDM1K2ZuUURUNDFYXFxcXG5JQVJYNHB2Q0RJVWlOUEJTUXRDaTFlZnpPYzh6N1dBWE5DL01SSWEvYWhMUGUybndRS0diT0xxQ1plMzVMbXRlVmFUUDB6UVIxMXNzXFxcXG5zdWFLdEVRVDdUMnZIQkxQNmNUSnk3S0NaYTRpVExzK2pzTk0rL1JsN2xGTkdDUEFLTS8yMkxyTkZ3SFJXbnUvMy9TTnliOVpxbVU5XFxcXG5oQ3MzYkRxaXZ0MUhyM3VNeDlNNXM1N3FDZkhQSVpsblNJYlI1cVRTT3FHKzFYS1ZaK2FUV0ZtK3dPWnFYWjdXVWpVcTZDTG04bFlWXFxcXG5Wa0dLZG9XeTVoNTcvRW1qVjk2STFwQkNLY1dRQWsrVkNNVHdhZUJNS0haUGlNMHV0WDJlcWNPbkRXazdyTVIxSm9tSTY3b3lzWGIvXFxcXG5ia2QybkdaSGpGRFQrNHhrTDkwVlU0Z0lSYkh3TzdMNk1ac1ZsNldDdG05UllCbmJmZDk4SG1tQ2ZhelNZMFNjNjVpZTUzbWliNVRXXFxcXG5kOFMrSDMxR1dOVTVmWktzM21PZ3BsNlhIZE0rc0V2VVFRZFdhKzMxZWxIOHhWM3VPeHpGZW1pa2pMOGN0bnAyZmlEVitMckRYSnVUXFxcXG5ESk53MUVuRUNCLzNYY3ZVWW55dHZ0UEFzWlhYdFdXVm9QYTJJTHFjVStTKy8rUVpTRmxmeHBoRDJuRGRRZ1dSbUkwWms5ZmI2NWlIXFxcXG4vckpjbDZzWWVteERLWnZNSW12UVJ2a1dMSnRaR3RCMVhkeTFMR3QxdkRCeDNVT09mQWJTd0dWS2ZhcXdSVDd3RUJJUnhKb1FxVXdoXFxcXG53TmNUaUEveU9IVk1nYmlLTDJjM2ZEd3lENjJwcjFsVEc5TXJMblZPdlgzQlYrbFd1ajVXdEdNTmZtMDR2VjFocWd3YlFZaXVNTjlEXFxcXG5OTUtaNkk1dnV5OHB6OFpmUWt3ZWhVQW9VQ3FweVFNc0hUSHNINGY2UE04SU0zb3NFZkZrTlVPd3I4K3pWOURwUWJ1aitGckRlWjdIXFxcXG5jVmlidHF4R2F0K0NRaG9RblFHL24yVDl0RU8ydGFVMGM5OVVqS3FJSGU2eXFKTTdlNmgyU3p5cVR6YjJ4WUx5YXgvcTJHTVBxMlVIXFxcXG5vNDRwOWFGdC9aS0gva1RJeDhyOVg4WE4rNlhGbEdsMU5vNDFjMU1Pb2FvVXk4UkhST1J1SVhwSFc5TTJ6aHpGTEJzc3hXdmVYZnRqXFxcXG5VaHNvTEJ3U2pKc1VFYWxkcmJzRjkrdGdvOGR4UkZocldiNDRrcS9Ua1dOa2ZXbnlzZm9ybGM0NFd0SnhEa0JMSDcyTEk0WlZOakFKXFxcXG5NM1JJcXA2aTNmeXNzcVltK0t2NlJuMlNCd0NmMzlMbkxkMWRZeGdJOXZseWpwQWRUdHlkdTlxbytjN09GRVZsaDlvNEtDWmRaRU5sXFxcXG43c2hWM1BITExLK29vMU84cU9CNE9kUFJXS3NLSVo2cWlEWFQyaVkxMHZJMGxlNVR4QzlWWjJWYzFJM2ltaGN5MWRRR2lWOW12Sk83XFxcXG4yV21oYzdENHl6cEd5TXBITWJSZ2lKSzNVSEVEem9xMmU0WTNNem1NZUd5Tmw0azR5am8zOTZYYUtQZHlGWVlwM1BmbnV0Nkp6WDEvXFxcXG5DTEtXMlppcEdkVnFDK1REQTAycStLckZaUjU5Wkl6bGljZitPYUNQcnJLVFM4MnBTYm5aQmlrblRGaE9vODZWeW9rMVhrdkJNYmNPXFxcXG5TYzhLbldub1FxVVNZdlRqTnFJNm9BYkNRK0xuNysvY0JVZXBnN0w0bHcwNlFvcHRUZWFHOUM0cVZqMm5tRmU1Rm9rNEFPNlFha2FtXFxcXG5WalBvY1VjK2NzS1kxNVlNSW5HZDVEdXIxVzBzM21EUEluVExvRGwvT0d1SmcwbHl3aUhYUzJva0FFbU9GTmZvOW5lNzkwU0dnSXFZXFxcXG5UK2xtbitlU0NyZDhTMUsrYllBNzM1QjhpZ0owSC9peW85NE1mTmU5NGpFWWNxN21LbnBJM3NpQXY0MjVLTVVzaG04ZDNVcmd6S3dQXFxcXG5RRDZKVHlVelBrdEJLRmdVR2lRNENsZGxUV1ZvV01LZlVnM1hkZVcrYnlvc3J1L1grODdQZ2o3dHM4WTV0ajFJa1ZjRkZzdFdRK2MzXFxcXG5qT2ZNN01nNElXUG5sUElZc0xOODBWZVQyclJyZG85Rk8yWjlJZFVpSGRXK1AyemhEWlBwWk4zaURwSk42SGowcWE5VS8vWCtjRlUxXFxcXG5keXRsSTEvbWZYeDVuZ1hmYWtuNjNKanU5ZXRlWXdxS21OZk9QSVZnNGFoNG0ya1g4Z1lJS3B6NGN2Y0krM3p1ekVmVWF4ZldOcG1pXFxcXG41UCtzcnZEOFdNTUF6blNveXlMUGxCZzhjYzJnRGFQRXlDR29GMVVVVTBhVURLOHRQa24vVkFiZmdZVXNLbkhZR1Q1SFBDbFlWVkZFXFxcXG5aSnpRWjc5eUl4ay9nZ3VZNGEwaDRzbDNYSGwvM25hK1dDRTFsV0xrVFVuM09SNnVZQm9kellJM0pXLzZYTHlOVmRYRThvVG5NUFBQXFxcXG41NE0xVk9ldkprR2JCdkw4di9pRzJZbU1OM3d1TWxuYUhIbGphMk5ublY2S2tleUx4S3JBc1cwNWNEYXF1ZFp4SE0vemFBV0RZVGh4XFxcXG5vY0ZETVJvK01sUk16NFFmS0t3eWZ2YVdGa0RKcGo1MGk4a1NaZTNRQzRsUFl1eVRJVkJicmlvR0YrTmdheHJGZFNpbG1GWmYxM3BGXFxcXG5OMWpBMXZtT3ZuTTBBUGZ6dXViR1Z3RGNFZkc0WnhYNzRhcVAvQ1lSMUZjU0Nick5sZ0FXUUZiN1ZNY3BhektBUGl4RHdHbWFrK2k1XFxcXG5QOWZjVjIvemRjWEcxWC95SEJwbGE2MllLZUhJZlJuSTlWMGE1eEUyRW10T3lDYlBrbGVMcnBSd2xTS3h2cjNGWmNtd1dneC9BdnFjXFxcXG5VeTdlNERQbEttZ1R5dFBPY0NNWlhzV2YrS0ZFZnMvemtFTnNwUmVWc3RvdUJ2bG9HcjNmeTlaajF4YjdjMnEwR3pMOUE4eVVZZldOXFxcXG5HZDk0eWovdDREelBSRzQrZ1J2UkJ1NzRoRVRhell5VzJqcXhBREZidlduRVJEMzFlcnpPYzd4ZkVTdWxtaEFJbStJVXdjL1BEN2NxXFxcXG5zT0ViYkgySzM3ZEZWWVNhdXdjUURlN2pVZDh4bGVPZTcrSzFHQ3RnODJJQTdYNTZTbFllZzRCd1lnRjEwUjd0UU1NQVhrSzcxcXZ5XFxcXG5IRlpPdU9wUjROQXc5aDFTV2VkdnFkZDhzdzZkVzJGRzJ5cEtpYVRydWxMY2ltdEdoSkFVWC91c3dLUW1lQ04xdkJESFF6SHl0R1hsXFxcXG5PVEhDY2JKRjZ6RkFvcVp2ektCMDBSb0duSmZDcG9LUmN5dVpiYUt2T0IxazBwdHlSdlM2c0JPQUJoanhORWFRRENJcDlPd2ViWjkyXFxcXG44L2w4K0VKTURxM0VHNnBqU2tPREZpNW56UldxU2w4bFArVGVmaTNmSlUxRTJFcFlLblQ5bkpJcVc2UHJuZFNFZmJ3dmlwQzBVYkxRXFxcXG5ySSsyaVkwNk1jSllodGc4OHpoMHI0QzY4bG9EZGdyMDkvZFhkYTlrVGJYWjVwYnpVQnZTZm5JZzFEZkpnQU5abnB6bGdFdnJnMFlPXFxcXG53RCtmTzRhN3o1Vkt2Q1ZuZUNPTUMvV080K1YrSnQ2VG93VzVKT0xITExMK08xNnNkUnpIaTlPQXovTzhYaStwa3pCSGJVdUJlNFZoXFxcXG5TRDZsMzcvZmIrNDIxdkxSV3I2YWE2enR5ODBvYlExdCs1K2pia2VYbHZzOEtrOUNPSzNQNENnRTFCMnB4Z3BGcXM3cDMyUE12T1daXFxcXG5MSXhReWRkMThVS0ZJZi9NN1V0VTMyYVdrekk2ZlZWYVlBYzRDdjVmekl1U2l2VVpHY1hXYmtuOHJBcXpFVGp3cDZLUElrRGcyNk1WXFxcXG5qSjlVRmsxMmxJNkkvaTV3T0ZaVnFRa25yZ2RwM3F3TzhvNzBMV1BSU0tvb2FPOTM2eXRHU29ZOTFHUEFqSEE1MnVGbVozVndkNXM5XFxcXG40QnQ3cHovUjd2YlFKZlE5bUxiVXZLZDVJd09ZUTg1eVhZdjVaSTBhbGdGdWpsV05NZEloVlF0ZHlpR2JLTzJxVThBeU1TTzlhb3FsXFxcXG4ydVZnZElsSURPL1BhVFAyMDc1bHFyeTFWdjRLS3hZMTMvZWQ3OXNvYkZQc3VCQkNhVTF4WFN5RGwzZHp0M0h3VzVQNlZrVGtraTNOXFxcXG4raURWZW5YWjdDZ3ROelYwbnFmWjRYNW1wc2IrcFJZaUhvMnVVdHlabFArYzZldTZKd0JtUVZHSHpUK0o1WjJkZGs0d3MrdTZQcDhQXFxcXG4zMWZiV3VOYjdWVFdVNlBqS1M2TnZ2dUZibjEzOXhVQkVmMk5ZaE0rS240YWRXWjkraklGbFdBWmdINXVZeGwyNmJFZXFsZUlhYi9mXFxcXG5iMVVrczRsWXZZS3Y4M2dhYmhZQXhyb3lFVUt5S1d1c3Eyd0xiUzZ5SGoxWE42Q1hxRXowdzl5V1cwa2c1WmdtbjdMbFZSR1dXUTRrXFxcXG5nQy9Ub0NaejNsMTRscW1VamVvSHk3Tjk3REYyY1Zyck9QMmNpRWtwTW9aWnpZaDFHYU4ycHFnNVJ0bVBQdmJ6K1pqWjhUck5ESWJZXFxcXG4wZ2dxa3RyOUNxOWRKWDJNRVpZUDNkdTZZMHBxVmFzUSswcFJaU2lsQzR5VlVmU284eEpaczlLK3ZTaU03b0hxR1dURkdiVmxpUVdEXFxcXG5abUpaUS9LUVJVTkZhaXJsUE43djk0L3NCbXUyK0xTUStXTDFqZHAvZ2tBN21lYllkTjg3SmRrMlZnZVl4Q0ZzbmIxUm8rWmdJaDZHXFxcXG5nSXBCWGJycDdtYWgxZXBrNGM5OThla2dIYk5KQmJVTHJyK2VhQzVBeUY5TFAyT2RNbGVKYklWdjlQZHQ1TXpoZUltWFNueXkvOVBLXFxcXG4vcjZ4aHMvOFg3UDVVOCttdHJudmxJNDJ4S2QvMVRsNjlXTXBjU2lVZUh0RzNGbWx1ZTlvcmYzOC9Nd3RpRWY2cm1sM0wzUWNmWDBYXFxcXG5ZVTVjYTd3UmE1eExMSnRaUHZtN2t3ejNiKy9CbGNTNEhJNjc5M2Z3ZkdNUERsbHRkRG9iL3NiQy8xZjlaS1dpamMwTzhodFNTazUyXFxcXG51SiswREtEdEMwMFRiV2tQQUNJc1gvUjBucWNqeklJckxtZzkyVElMQzYwMWk3a28yL3BEaE9COWJWMHVRaEV3Zk5UdnBiZmRnY2Q0XFxcXG54eEhFZkR0SlBpMzNmK1Q3RXJFeU1sbExHKytRSWp2bkE2cXNZSkI1bTZ6ZklPdHBXMnFQKzJrdTlZZUNvSXhxMnJwb1JGK1FIWkpyXFxcXG5xREUxcVlpeUR5NjF0NGdhejlFNXF5M3VTTXlDcW1SU1ZsclRXKytSeGo3WU9aQlVwRDVDVWhabVVPY1Jwa09sVzJEaEg0REpVN1E1XFxcXG5pd2poMmQ1K2g5UnhYWTg3WHE5WmtpN1VuUFRRcjJvNXc5QmF1OXV5T08zSVpTazZLaXFTUGJUMUJZRzhoYTBzakxHK25ZNUhkY1BuXFxcXG5FbFVzRU9MbFFTeVNBLzE1NHJvNjk3a3ZrOVo3YjhxOW0yeENvLzVLWVZ2UVIzTkxmNnN6Zm5NTXl2Y0FBQVl4U1VSQlZDYnJvN1VQXFxcXG5PckRQNTNZLzA0WFFGV3RzU2x6dldOYk9GTkJwa041YXU5NmZkai9GbXN2b3RCSDJoTit2Y0FFQVZ5eExqWGhxV0xWRXpJNXdhdEZFXFxcXG40alRwVGFWRFMreXpNMjFLbWZWb004c3BOQjJiemhuMkRzaHJZV01yenJFdkFISldrNDlZVXpvaEVRS0g2Wks0SmVhdTYzcXVXL2ZiXFxcXG53K0ptRmlGbVQ3b1l4MjVqaXJiSXdyOWFYUGxjN3RHZk1odnIxZW5sOVJ4MUlIb24yZ1JybmxoSmpjSlNQOE0rSkNCK2ZuNncwb0thXFxcXG5MUW5OQnVFZTY1YVVXTzJkWHk0Qjc3QUo3c3lDRmFkNkZVZkVBTmVrTEVHRXVicmdYSjFFOVdwY0ltRHBiK3ZNRFpXNDFrVmxhcXVQXFxcXG5VaDFFV0Y0b3Y4NzFUWVBmbjlTMTloWEFlVHJRMEtZZ0ZFMXRISGtYQVBjOTl1YmEzakpVVkp1SDd2M0Evbjgrbi80dXhIV0FKazdTXFxcXG4zWHZvbmQ4UEhyZXh4cU0vS1ZOd1N1ZnVrbGlydUVNU3hYbW5GVjhtQlpkQlNsMDYrODZ3MUxRT2dCTEVXZ1IvWkJ1dGtKaEVvUm9SXFxcXG4xelZ6SHhVclpSMXJRVU5ER2xzTExKeVJjWmxkMUErS1ZOVmM4UWVPTlk3Uk1GbE5uaDNDbUVES3A3aDRWNFZZZmtoeXpDU1FXYTl0XFxcXG5SVTRmaVdKcmNHZGcwTXo2b3hqc2E3SmNrWFhPeUF3MElOWVhTWnRaak1xeVFsVTFwQVp1YTBRTDRMN3YzOTlmUHZXbGVpWHN1RjdwXFxcXG5lZVo4azFuZlVxRnJpRmV5TnhTWjFod29mZUlkM2VFc0JVelY0ZmpzcmZYTkRoVDRlaSs5aXJXaE5LOWMra1FjcUgvWG52UDdMTkVvXFxcXG5mUlhjeFJyL3BsdldWUSsyUlFIUDgyVGxXbnZPL3RCa2xVKzBlOTNFUzRlQTVYVU9ORjd1V1dEaXJDaEU5WFZxTWxSeU1nWlFRL3JNXFxcXG5ER213U2JQSDhjcXRMUFIyWXhpNUxyQTl6NVZ4UllTc1dZNzVBcnQ5NUFWUHR1MWNyNklvMkgrLy8veisvclByTEdTS1F3T2t5UkNJXFxcXG5YSVZkeTZUVW9jbkJQN1ZNb1dSQ3JLa2pEWm1IVnZKU1VBOGxBYXN4bWhsMW96OFJjY04vOUZYUCtUNmJVaWt0Yks3Qk5XVERkbUV3XFxcXG5UaGJQYUdjTThQam5uNDhkcCs2UVJqbjRtT2tuODBCaUVtT2h3OVp0UkRJTXBQR09BS01iVjVQS0p4WVN1RVhodlFSSUxGTWZyVFYzXFxcXG5aTGhDUVR4UDVNMlR6V043YWpNaUFEK09WOGJwT1VlZUhpSm5vUE54ZHA2L0h3WFgrOU9vVFZZdHIvZk5lbkk3RG52LytYMnVtMDlpXFxcXG5FZFFVOGRkYjV6NEw4NmxTOVFENXpYM2ZYT0N0eGtMS2h4QS8yWU9vMUVWTTJvL24yeTdLYlN5TmdNd09rLzU4Yks2cW91UnBER1lLXFxcXG5uTXNIaUJsUmtaREloK2F2TnBmakl1Ly8rZk9IMFlWTHZadWRvVWFKM1I2ZVV6cG0vVEU1N1lTdGU1UHlvRmJhTExrZWJjd0RQYzlTXFxcXG44RjBCQXNBanJMVWJzdFZqYTIyazF3Y0xKcXJPZFpYZU14YTdMaXRyeTFHZ2dIVnV3WmdUR3B1dHJzek1BRCtPUmU1Ly92eHA2OHRuXFxcXG5uK3ZPOTNlcWI2T1U3UEFuV3AzRHgwaDFJRkVIYzRGeXFQWnN2TU1uclhod0FsOWMwWHcrS0ZlOU04YWpvaEJYUTFBb3M3RS9BTEwwXFxcXG5vOXRYRlBBcTFmSXVYYmd5S0pJQVZpcGdFc3NXR0Jvb3JtMjRjVVl2MlRLNzJyMVg5TGF6UW13Y3MxSWtoSkZkMGtXZVFPTFBrWWU0XFxcXG43S0VoQi94WTVxaWNZVGhSUnZ2SXV2YVFkUWV2R1RlTU9hN3JpYkFTbHYzdEF5dnBwWWFWNDVvYitnckYvWXV0aE9GdXorOC9mNTVyXFxcXG4yZEZUVnpibE1JbnJTUkdFU1VSb0ZVYWxURVhwU0hoVmx1ZHpQeVkxcXliN25MZXhxSm1hYUxJdWg5MmxQWkh1bVNua3JYTXFSTE1TXFxcXG50WlVxbHdqSUFrbXBvTTJnWGp0c1krcVdicnlFcEhua3NoREZYMGdLd3RGaHNPdUliOXFzZVdxN3hRMFc4OFF3WjFveE5ja1BsQkVyXFxcXG5MeVVyNHl6SjBKOC96L0xrSWJFZkVSYU5FMXJZN0YxbDNVVndwRkFtTnJ0elBwWVpMMHFLcldrSVlHdEZJYU1PdUYzUC9mbDk1OVBoXFxcXG4zRWRTTzVQdjVlcmJPY1VJM1RWNnAwQ0xhSnBVcXRqTFozM0tpbDJIcFAvNVBkR2FMV2RGZ3BwVFhtb3lVYUlSYXk0TjBBbnNXUFBWXFxcXG53Z3h0WGU3ZWxocXM2ZER5RzUwZzV5aW9DVFdkSFA3bjg4a3VxVC9nL3hvK09RZFBwdjhxY2UwNkIybG1yQ3lUbUlvVGVOYXRCUFNjXFxcXG5ySVRrVTF6ODFiMC94cHVKSDYwcWVycDh1aXpUVjJJTmNReVRaKzlsbTdiWjg0QktoQXJnMWt1VHdkZUhBWGdWbWprT3MrUHp1Zk1aXFxcXG5tVmpkTytXV3EyVG5XZ1gxRDJwS2V1UUpmUVp6UUpKRXdSWUlILzJURWtuVnBtNjBjS2ptVDZYeUJHb1V3ZythMnZFdUliT2RwRUdkXFxcXG5rU3BZeVNNTFdQLzV6MzlzRFlxYXJFUlU0K1AvRWZINys1dlpXYXh6cEhsK092bi9BM09xa1IwNzBldy9BQUFBQUVsRlRrU3VRbUNDXFxcXG5cXFwiLFxcXCJwYXJ0c190eXBlXFxcIjpcXFwiUmVtb3RlXFxcIn1dLFxcXCJzZXJpYWxfbnVtYmVyXFxcIjpcXFwiMTIzXFxcIixcXFwic3BhcmVfc2hpcHBlZFxcXCI6XFxcIlxcXCIsXFxcImJvb2tpbmdfaWRcXFwiOlxcXCJTWS0xNjU3NjMxOTA0MjI0XFxcIixcXFwic2VydmljZV9jZW50ZXJfaWRcXFwiOlxcXCIxXFxcIixcXFwicGFydG5lcl9pZFxcXCI6XFxcIjI0NzAxMFxcXCIsXFxcIm1vZGVsX251bWJlcl9pZFxcXCI6XFxcIjMxMVxcXCIsXFxcInNlcmlhbF9udW1iZXJfcGljX2V4aXN0XFxcIjpcXFwiaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUhnQUFBQjRDQUlBQUFDMkJxR0ZBQUFBQTNOQ1NWUUlDQWpiNFUvZ0FBQWdBRWxFUVZSNFxcXFxubkgxOWJaTGp1bzVzQXBMcnpzeHlaZ3R2RTIvL2l6aGR0aVJpZm9CTUprSDNVWFIwdUd5SklvRkU0b01VWmYvLy8vMnZCZkk0ZjE3SFxcXFxuY1ZnZ0lzeXN0ZFlRWnVidUFOcURpREFQaHdHSUNMaVo5YzhXeU0rdHRXd3RyMFY0Uk1CYS91cnVGbWl0d1ExQU5Jc0l0K2lObUlVaFxcXFxuSWdDWVdYYk1EbSt0bVZsMktUL2tDZTRlY3JqN2NSelpnZncvVCtqOWFVMy8xQy9OYk41MGpDSS9aOHNBc3VYOEpzL0o4M25yMHIzblxcXFxuZVNnNk0zTnQvYnF1NTNteTNXeU9jblQzdkVhUHZBZlB5YWJZQTM3V2svTzBiSXFYY1BCNkkxNmVQZFlMZWJLMjM1SFJHdFhBNy9QRFxcXFxuY1J6YWlJMkR2ZEptVmZUWkpaV3Z0a3pGZEtCOEcyTkVPSUNHZmhzTDNKK0xrSXdJaHpuR0FEeU8weUxpaWZaRTQxMWJ1ODBDYmsrMFxcXFxuaHE1YjlzWXREdSs5aVdidFdkUmdIckFXaGlkYUdNSTZsQndSRCtEV0VBaHZEMmdRRUtOSldLaVk4aHVLZ09NbkVpT0NsNmYwdjZwY1xcXFxuTmFRSDRaL3RLTHl5V1lXZGFxNkNGTUI5MzlRSjFhNk5zdCs5b1hhMHh6bXdvbW9kdGlxZlpvZ1YvcTIxNTNrSUIvMmVQeFcwRmpQU1xcXFxuUG1CWVVwRXN2eWVmOERTZXJJTG1UNlFhSGM1WCthcTVkRVFEQ0FOOFhueGRWMElNQTllZFdFV2xhUWZKMnJEbXNOTVBBRTkwdkZpQVxcXFxuYkc0QnREQ1B2RmNZQ2hHWjJYRWNrK0FDeDlGNzJWSGZyRDFkU1dyN1JaZnBBOUM2YTFFc3ExNzExcnhjVFJuYm9hY3BNdlptT1RUdFxcXFxuWWYrS2dKMnF2aCswQ1RlMVdiMGVncVBXR3ZHaUtGYjlVOGtwV2NLVGdPSmd5TFpsR094blFhNmVuSmREbUVGNVkyOUtlNmpRVHJIRVxcXFxuNm9mS3RZVzdpWHIrUkFGV1pJV2hJVnByOTMwcll4em1qRStXYmozTkFubFZpdStLTm5uUXJTSFNZZ0NZOXdHakJkckFaaUF0Wm1IYlxcXFxuYUZSd3Y5QkRwWVkxdEppS05JVGhlUjdDM3diMVVlN3VydHlGWVEwcUw4cG9sL1V1WENXb3Ivcnc3Q2cxMEgyUk80RG5lZTc3THNxa1xcXFxuQkFzS0NIazFLM1pSNGR6bCtEekVIVmJBOHZ4aVp6eEhDWVFJNVFjZkIvR29Ib3dSSGp1VGZTalMrZG9maUtWKy9aOEhxWnc0OEdUU1xcXFxuTGk5REdLS1o0ZWlSUUVUNm54elZkRVF0RW9ZT2d4dmMwTUpoOGJSNDJvOGZwWXZKOGp6TXJFY1VMU3dBN3c1aDBoeHM4dnVJV0JCZVxcXFxuRkVhMDV2bkxIZGY0NUcvQ0lxVlExa29nKzVtTEVIUTRLMXZ1Q1BnU3EyTUVIbWxvOTMxZjE0ejVlR1doVHJYTmhhUUNtUUZoUGZaeFxcXFxubHU3U2tQZGZwME1lQnNUelE2STNua1Brc2lsRkhNV3E3ZXVYU2lQNi9kZERhWTFtRitrTXpTd1IwYU9MdU0zSEdZWXdKRmwzckxrZlxcXFxuNWcyUm5Fc04rWGtrczA5K2NBdFJ2Q3A4MnBTaElkelA1TitwTmdTaklJY2Q1aGw3UU9CTVpyVGhWMnpFZHBBd2hxb3FHV0Q4SlF2alxcXFxuVHd2dkQ1RkJITU5YMENneXlNT1dtV0U1TWhoUUZVWEVkVjJLUG9YYjVIdDNSZ3VGR2N0SW51ZmhKYVJPN2FJSm0rdGd5S2NjbFdZb1xcXFxuV0JNSzVYRU5RdmFlRjZpcXJQZVJxcmJZZnY2cVdYNyttbW10TVFXbkdSN0hvZnpZMFdRV0VaLzd1ak94ODU2VjJ1RTlsZ2hZNEREM1xcXFxuODBod3NXUUJOenRHMkp1MDdwN1pzT3FNTVc4ZmVYUmFUeDhRMWxsYkZWQWNiMUdHUm1ZNWVJcGJvVmRvZ2UxUTJjcVppZ1lTVVFmc1xcXFxuTUE2MWFVb2ZnRWRFZ3FLRXdGZ3RJdEY2WFZjWmxXb1lxM21XWHhXRC9KN2lUczNyVFRXTzNva1lnTU15TWVHWVZYT2xmY3FheXZpYlxcXFxuWkxYekpYSW9ScVo2MGthb1draTI3RTlEaXc0NnZXc0NhaGtBREMzdXo1VWhjQTZ5RDh5bmREcllBd3QyYlA1cGdYZ2FYUUxCbXpiUlxcXFxuTzNENHRJbk15MGVtYXNMajZSVVNLeHg4SC9ub0pOcUM1U0lkWHZVVkpkZ29hOWVIRWhkV1dtc0E1ZUNtcGJ5TktMRWR6L09RcjltSlxcXFxuNGxMU0MrVTVGSUhxdk9UUUtqNGFGdEhFMDJpazdLUU9sZCtRRnJGaUhIOHZHL0dFWGRhN1ZrcTRvcUxEUnVWa2VYK2Q3aFlNY29zelxcXFxuWmV6UkVHRXQ0R0c0MjlOZFVDQVpuSlo0K3BHbGh2TThaNkRkSW8yakRES1JPNk9Yd3hzcTNKUTMwZzRzY1ByQk1DbFBTOHpTWXRBaVxcXFxubVQzL21YQm9TQ3pCQTBBbUFaUysvcVI2TFpyREdqV1d1eHhtbVlzZ09WckRVZ2pINlExS3Q2N3J1dThiSzdzcEZpTGlQTS9TZ2lwY1xcXFxuMlZQQmd0V1ErYWM2bG5JVjc2ajk1N2dnamhFQzZxOFVvZWZ3LzNJNzdYYUlZMVFrc2ZJemkrQzhUV3JqNitBUGM0ZFpPSXNkMTkxK1xcXFxuM3hkeFRXU05heXlMRzM3T2d0ejhQcnM3S2hJV1NFYldBUy9udDVGQU1uY2RQUGlWYmJ2OUtibzNnZExJT0dSbUJvVWwyS3hMTFREV1xcXFxuR053MlpsZDl6UFBMMmV6OW5tdGlBQ2RqN2MvblF3bzI4ZjVzclR2R2I0MVEvd1RwWGlwakg5U0VkOU1wZHEyd1lndHFKY1cyVkpvbVxcXFxuUHVNNzF3MVozL2ZOaEVpMW9wY3duSXNJVjhQVVRpaUJMS0o4Mm1GK0h1WVdZZmpjbDNya2JyL3A3dlBMWkdFM2VJODNPbllVcDMvSlxcXFxuYmpRYVU3SHlqdXBVaXlmdkRRNExnSENMb21yUGdPWXhSbUVqWEN0MHFoTVUybHVLc2NuOFRvVXpOY1pvRjhKZlpuYWVwMEtndGZaK1xcXFxudjdGTmcycEpURWxjL2J1eWNBbHM5VkNVVVIrRk1kaG15S0hhNHNtbHpMU3JTdTliU3Q0aHZPK2owRW9yb1JHenRleFBuNlhWMjZUK1xcXFxuc1JxT21iV0crMjRBVXNvcWZRQU44ZnQ1aDhIUGcxRUV1VHRqajE1YXNwNVZBcDEvVlNMa2VzcGxvVFdiYzV2a2VxV1JpTWdLSXUrZVxcXFxuV2VoVUxZd0cxR3VIMzVRNnRlSm14OHhUK0Q5Rm1aR29adUdLMTJJQmRkNkV3eTZCb1JabzlCd2J5ZDc3L1M3a3c1bFRWWGk1UGM5WFxcXFxublBJblJiRWlUakdPemV4MjhYMzFFOW9samxSUFVPSlM4V0hBV1UrenpXMlU0RzJaU2NvNUZKVkY1aWJuNlN3bkx3SEpxSVJBWmdrU1xcXFxuUkp5bTZ1YWNXQjZSYnhsMloxNUV6aVVhWjY4RDhTd3p6U29SenRyb0NZbnJ0SjZjVXdmQU9TREdNR2h4ckVzdEZMWkZpd29GRXYzK1xcXFxucThvYUF0L0VxR01rY3BCNWdUWU95a3VUdmFLci9rMzQ1MzFyMHNoMjJPOFNBTGpQS0g0M0Yyd1V2NHRBaWQ0MmtnMnB2ZW0xeGJhS1xcXFxueVBhVGZTMlpRc0N1UnN4UjZ3bHo3S291ZHJlMTlqeFB4dHNxbXNTZFdxS1paZTRIYTdEMitYMjNlNVFkeE9QcnNWeCtlRVBuVXhzUlxcXFxuYnFLKzJHYmVKVzJPbHBSaCtHR2VmUTZESFY0a01rVXBmcUpuaklFTXRPZmFxeTExTE1TeW01ZFdJRXlvdVdReFM4S1N4SnBBWmw2blxcXFxubHBYTG9sZzVXalEyL3Z4OFBvVi9JNWI0RkNQTUtFTmlhK2tTTkl6UjRmbGE4TjJSem05SzRiOGNlNFg2NnhHalVyWkhJUHkvcmZPOFxcXFxuT2lKK09QZEdPY2pka00zczlJTWx6YlhqNGJCd1BOSCsrZjN6UC8vMTM5YWF3ZlA2ZUpwWkR4VU12YllBb0QzTjNadEZJTXdzbmhhOVxcXFxuOTJZQkRPK2ZWWWc1aHNPZjFxd1prcWtqRURBS05QUFhwMFY2TFhIZEVlSEg1SUZ1Tkc0QkdCWXdVa1BNb1cxTWdLbEFDb2JpV3pKRlxcXFxuZlBTUU93UG44enhONGtFVk1YdFFNblVTR1FRN0JkZThXZm1tNko4bkZEV2JIQkFEc3BXbXExY1V1MWFHWk10SlBzVG12NlRVYklmZ1xcXFxucFFSTXBrMUtuN1dGS1dVYnlVaU9Sd3MwN0lmcTRLdGp6UFZLRG51ZTU3cWVhdnVqNGd3eXVPR0oxcm1TQzFBeGx6aEY5TUwzTWdhWlxcXFxudWUrZ0JnQWM1a25pWkh5Q2dOTXViS0V2VmQzaW42TFJIcjFsRFgxYnFLWTZLNmxRckJVSXp3bnZETWhNdUh6bmZxN3FWRmxUL3lSdVxcXFxuOXBVek1qdlZzZ2ZGcnhiNDh5ZjFDaXJCWFpxYTlhcnNOUExkcitWZEZNdE5wckUxL1ZQRlVGWUZ5SlMxRGNJNTRaWmVXMlhLRDZWL1xcXFxuaFlQVVhzN3pMQUVtUm5COW5tZFlYNm5IZ1JibFI0d1YxcUtWa2pTNWUwTUVJcGR3ZUNvNHU5MExiOE0zUm0vNWlZWUlOL2ZEb1l0MVxcXFxuQkNKVXpMUWVTUm83akJEbVMzMjFvSWVIU3B5TlI0UnpKUWJXUXdtTGtLRkZrS0ZLQ2R1M1dzUjkzL2Q5YTVtSmgwYlEyaTBGbWdLelxcXFxuQktlcTE4TG0yTks1a0RVbjZZM1U1TnRZbEtLWXRaV3Zpa3BpTFQyV2d5WStRWk1GQVdCWjk2YXlMalk0MHkwSlVkZ3o5ZGVVV29hTVxcXFxuN3Q3cnpxTnVaNEV5TUVpK3B6ZWRQdWQrZFAwZmhHMi9OT0ttdi9acWpKeWd1U2pQMGRYaWFLRVRZLy8rUDFadVpPZTdNRldtQmZhN1xcXFxuclBsTk9tdk55aFNZRElsNCs3TFNMclk0V2s4dWZJZlZxdFFtRkJheFJscWtQdDZPL1MvcFlvbTcyRGlMR0RydHFXSWhoNVFPaDB3V1xcXFxuc3pQMGFmNzFtaTlkeDFoNjgvZEtEWUF5bUlpNHJndnRZVHpRTTdTMVBtVm1tcjl4MW9OSTZib2NnSjNEa0RsMVZVelBGUWMycDJSYlxcXFxuTC9YbCtlNSttS05OU2dWNkFwblhhdFdYdkZlMHE0TmREak1MVEJKUmhWQnFoVFNwcTlmclZhN0NDa3hxZ3FLUGlPdDZ6SmJwODEycFxcXFxuZWo3SHZDdXZXRXpSdEVLZVZFN1hRakVWaHJWUnpPS05lSzBDV2M4dmY5THMxTmFES2JqK3JONk0rays5c3hQNVU2WTJQTGtJdmFncVxcXFxuUDF6WDljOC92NTEyWVZ4eGtmRjFqSnBjR0lndmpQVWJHWEVueWpvTHRRb09NcXgxRUEyRkhaNTh6VFoxN3JGamNNeVhrOVlTOG4xeFxcXFxudDh4bVFMaW9rQjRFemxUVllRWTNMNmZhRnR0Q01xanlVM0x4TGx6OTAyVTVWcnIxeitlakZYRHRON3RSQ0ZjRmF1dmpCenhURFZFQlxcXFxueGZyTVRveStyajlpSGxBR29yZmcrVjlIVFZScFFOVUJPczZjNjg5dExkWkVSR3RnSlUvRnA1Y1ExR3JJMUdyV0FpbWd6K2ZUMmowdlxcXFxueWJXZ01zUFNlNi81MjZpeFVTSlorY3NWVE1Zb2VDd2c0V3dSME5lQmRNdDcycXhIKzZJaDhnTzV1NmhReFVvNWZ1Vm9mcUF1ejZHdVxcXFxuSlhoVTJla01RbUhNblcxSkl4cm5BY2hhSUdUaTUza0F1RVp5L1dUN2EwS2gzY01hVFVLQW42SmVPb3hKY2RyUDdFK3VUVmdrS0NzbFxcXFxucys3SzgwdlJRM3UrOTVheWJxMHhCRDVFaUoyTE9Wdk9NRU5yS0UyV1U2clFGZW5wT2JVY3lKN2RkOHRFaHRGQ2pIcklaTkxCNXZHMFxcXFxuK1JRTWh6MW1TVGc4V2daamlUNWFneDJERm55NnlyeEV0ZGdaWmtRMTZRLytacW04UlAvRWluR1M1RW5sYUpyWEduSmVxaWhIZFZ2WVxcXFxuclRob2pObDRaUnZ0VUl4S0ZnWlo3VmtXTFVtYm5aMFpGbERHMmNlL3hsSFQrQ0tjL1cvTExHVjhDOXEwQmYyL3RLdzJFWkpKOEpIcFxcXFxuRTh1UzFqQkRhOHV6TG16TFJ2NE5jUXNsMDZHSUkwSkRRQ3BET3dTQTA0eWxCVFg4ckRPMFlSenpjZ05JZWNxejBTT05nZ2xMamVwOVxcXFxuV3NDUWZxcUFtclVrRmJycXNtQkxGUk5idFNCeWNwYjZiQTJ0Z1hTaDUzMWxDVDJvbUx6SDYvVXE5dzRKV3RRYXNueEk0dEtyZEF6cFxcXFxuaWt0UXBWYXZMWmdzbTlvUnQwdE5rY1FQc1JKOUFRR3RuMEJSRWJkMU1ZbGxac2kvTlFncmZkTDc1U1VjT1RzSjlGQ1hzd2NFQlJ2UlxcXFxubGdrY1BoUTlmOUw1UmxreGhDMUxZc3M4VTA5b3JlWGt6Z0x0Z3BKeEZjVmRBQVN4U3lKR0NZMnlWdVpKLzBSb3ppaU5RR1prcm5oUlxcXFxudE81UW9qSlBQMTdIbkd5MGpXMG9BdnJWYkRhbno1V09GR2pscGpwYTNraGo1eTg2V0FWWHNsWVZZcXhzQ3pIV0hYemF6Ni9BbXZlRlxcXFxuVnRmV2UrdkE1TXFaOVRQUXVlOTd4Tm9WRVJEa1F2Qm9RczJwLzF3SG5ERkhYMmV0cTA5VkJDTXk2WVkwMW92MnRSeVpTWVo4T1FJTVxcXFxuZUtlVUhyMGg1bnFsRnFXYWlLMlVRZm5vOXdwcW5xYVYrcnpkM0hPRWd0WVl6dVFoc3Z5MWhEc3BvemJXQWhNMUJRNjdZYko2UitlVFxcXFxuQ2xOYzc1eWpSM0U0S2dnSXo0UlVDb3NjaS9vMVlLVXQ3c2FrMXNNTHRUV1hUVks0RVBKVVZaUlJoVXhRU1ZYVElwcFpMNkszMXBLUlxcXFxueDFBUHMrNU9zZUpYcVVQWmhxT0tPVUhzTEZsRTlIQ0JsNWhaVHBsN0FDM3k2WnUrV0QrUUlZZWJRWjFrc3JCWDhyRUc3NVB5UTl3WlxcXFxuaHhnZzFGRSs4eHNJMnhDamJleDFRYmhRaGd1UVRSeXVTbWVQZ3B2c25sSFlUWGxRNWN0RG5ZWWlCUUNmOU5leHFaUUxFalhHS3JMUVxcXFxuRHBjZ2hLUGJ6K1JwNWRZcVh3ajc1VEM1K0ZhTlFNZnVIVFI1WXdQdGhWK21RSXZ4NW1Nc3hIS3hRUXh2cThyVFhyYXhlRVUxVDZGZlxcXFxuMThWNjhWeGZHbURSdVhkbWxLU1pjUFVLOGlwRUcxVnBqQ29kczc0aTZ6bkFFZWVvS0lyME9VWUtYV1d0RFdZTGN4MUZYcGttYjBKQVxcXFxuSm1Wb000dXc1d2wzUDgrelVJRkozU05XRjJFU0F0TmlGRjhjYllvK2w0VW8vTFhmdGxZNXFwaldRMFVaYS94YlZLSkJ1dHBITVlMWVxcXFxuTW5JbFcwV2tJc3c1bTVWMVlSMVA2YWo2NjlQbm5pWkZqZXh4eGlkRkVERnFUQlFpQlYzQU5hdXBZelVJUzUySjdoaTFFVWZmem1uYVxcXFxuNVhqU2xwM1VwMnl5a2VNNGRKMTFvajZrV3MwdUZXSmt6S002eTlOMDJyZFE3aEt4RmhaVEtDV3BmejZmNHpoZXI5ZE8zTXJtU3AwK1xcXFxuVm95WXhQQTdGbFNwR2pYdXFySVJEeFJTNXBvamRtWTNCWlhhYmhQYStPNlQ5aVFGNjlKeUUvY09NV0tNQURmSjY0bDRLS0RvOGZLeVxcXFxuU1VvWXpwOFhMeXRqVU4yTVRsUlFjSTNPYm11YWdISDhmSGgwVXROWUNKcUxXZ0hrN0VrK043WWt2bTZzY1NmTTZUTXc0cVVlN1k2VlxcXFxucFdpemltMWJCWVlEeWJuOHY1WEFTcW1FUDgyL09XQ1ZRcDZYamI0T1A4U2dzSElUVmtyaWVJaTdyOCthSzBFVkRza0MyUHY5dnE1TFxcXFxuV2JLY1AvbGtZSW9mU3E5S0JxQTZaclBFR1hNSU5ZSVk0WnF1UVcyeXZpbmI0ZGFDazIzNERJc0NhdlRnQUR6R2MxN0Q5Ymw3OVd4elxcXFxuTWs0T3lpV0I0K1BSR3Q1WVZVTEo2cGhqYkg2VGZVaHdMUFl1NjVyNVJFSE9RNnFzelhvSDlXbWEzZzJwWEdjTHZDckdveUhaUHFNZFxcXFxuQXRtM2lxTkNSMG15YTRqb29QYlVxRlBLK2tpQXRzNTJTVStxNXhqT2dWWmk0djEyK0t2Kzg5YTU2REkvNis1T3FnK0ZpSnFMUm1ibFxcXFxuZ1VDOW8ySkNNYWNBMSs3bEpXMmRQeW9tYmtMV3pCTEowWFB0ZHdJZ1pmVHo4ME9KdUxNbTEzVE1BTEw5RWsybmFBcGpVTGlxYlRVMFxcXFxuRzVHN0xpTnZyWDArTi9PalJHTGZPSExzdDBjMUU1VXpsY2hWUzFJWFREaHozeWcxZkg1WXpCRXg0NU14d2NUdUZTMVNTZW5NTzE4UFxcXFxuV1hockdOazJNbEl1YTlGMERHeHhyMGJ4ZTUwbkxKaFZZSWFFS0pSWEtXZW5HdDd2ZDVtVTRUaUwya2h1REdCTVNvYUthelVzRlptZVxcXFxuejNvRmhPdG1sclN1d2g2Z25FUHJQZVFOT0dCOWVnVkwvaE5BY3o4am1ORzJpRWVqQ3d4NmVyMWVlV0hFbDlLZ0JuL2FPYzVTRmdWelxcXFxuRFBtTXpKQVF1RzlxdDFDcDI1bnNkUmNTSFRPOWhIQjBxUXJ0UkJTeWNReS96eEtZZ2kvRXBWTUhDYW5sZWFNTXAzNStmblFEVDQxWFxcXFxuSUFSWDRwdkNESVVpTlBCU1F0Q2kxZWZ6T2M4ejdXQVhOQy9NUklhL2FoTFBlMm53UUtHYk9McUNaZTM1TG10ZVZhVFAwelFSMTFzc1xcXFxuc3VhS3RFUVQ3VDJ2SEJMUDZjVEp5N0tDWmE0aVRMcytqc05NKy9SbDdsRk5HQ1BBS00vMjJMck5Gd0hSV251LzMvU055YjlacW1VOVxcXFxuaENzM2JEcWl2dDFIcjN1TXg5TTVzNTdxQ2ZIUElabG5TSWJSNXFUU09xRysxWEtWWithVFdGbSt3T1pxWFo3V1VqVXE2Q0xtOGxZVlxcXFxuVmtHS2RvV3k1aDU3L0VtalY5NkkxcEJDS2NXUUFrK1ZDTVR3YWVCTUtIWlBpTTB1dFgyZXFjT25EV2s3ck1SMUpvbUk2N295c1hiL1xcXFxuYmtkMm5HWkhqRkRUKzR4a0w5MFZVNGdJUmJId083TDZNWnNWbDZXQ3RtOVJZQm5iZmQ5OEhtbUNmYXpTWTBTYzY1aWU1M21pYjVUV1xcXFxuZDhTK0gzMUdXTlU1ZlpLczNtT2dwbDZYSGRNK3NFdlVRUWRXYSszMWVsSDh4VjN1T3h6RmVtaWtqTDhjdG5wMmZpRFYrTHJEWEp1VFxcXFxuREpOdzFFbkVDQi8zWGN2VVlueXR2dFBBc1pYWHRXV1ZvUGEySUxxY1UrUysvK1FaU0ZsZnhwaEQybkRkUWdXUm1JMFprOWZiNjVpSFxcXFxuL3JKY2w2c1llbXhES1p2TUltdlFSdmtXTEp0Wkd0QjFYZHkxTEd0MXZEQngzVU9PZkFiU3dHVktmYXF3UlQ3d0VCSVJ4Sm9RcVV3aFxcXFxud05jVGlBL3lPSFZNZ2JpS0wyYzNmRHd5RDYycHIxbFRHOU1yTG5WT3ZYM0JWK2xXdWo1V3RHTU5mbTA0dlYxaHFnd2JRWWl1TU45RFxcXFxuTk1LWjZJNXZ1eThwejhaZlFrd2VoVUFvVUNxcHlRTXNIVEhzSDRmNlBNOElNM29zRWZGa05VT3dyOCt6VjlEcFFidWorRnJEZVo3SFxcXFxuY1ZpYnRxeEdhdCtDUWhvUW5RRy9uMlQ5dEVPMnRhVTBjOTlVaktxSUhlNnlxSk03ZTZoMlN6eXFUemIyeFlMeWF4L3EyR01QcTJVSFxcXFxubzQ0cDlhRnQvWktIL2tUSXg4cjlYOFhOKzZYRmxHbDFObzQxYzFNT29hb1V5OFJIUk9SdUlYcEhXOU0yemh6RkxCc3N4V3ZlWGZ0alxcXFxuVWhzb0xCd1NqSnNVRWFsZHJic0Y5K3RnbzhkeFJGaHJXYjQ0a3EvVGtXTmtmV255c2ZvcmxjNDRXdEp4RGtCTEg3MkxJNFpWTmpBSlxcXFxuTTNSSXFwNmkzZnlzc3FZbStLdjZSbjJTQndDZjM5TG5MZDFkWXhnSTl2bHlqcEFkVHR5ZHU5cW8rYzdPRkVWbGg5bzRLQ1pkWkVObFxcXFxuN3NoVjNQSExMSytvbzFPOHFPQjRPZFBSV0tzS0laNnFpRFhUMmlZMTB2STBsZTVUeEM5VloyVmMxSTNpbWhjeTFkUUdpVjltdkpPN1xcXFxuMldtaGM3RDR5enBHeU1wSE1iUmdpSkszVUhFRHpvcTJlNFkzTXptTWVHeU5sNGs0eWpvMzk2WGFLUGR5RllZcDNQZm51dDZKelgxL1xcXFxuQ0xLVzJaaXBHZFZxQytUREEwMnErS3JGWlI1OVpJemxpY2YrT2FDUHJyS1RTODJwU2JuWkJpa25URmhPbzg2VnlvazFYa3ZCTWJjT1xcXFxuU2M4S25Xbm9RcVVTWXZUak5xSTZvQWJDUStMbjcrL2NCVWVwZzdMNGx3MDZRb3B0VGVhRzlDNHFWajJubUZlNUZvazRBTzZRYWthbVxcXFxuVmpQb2NVYytjc0tZMTVZTUluR2Q1RHVyMVcwczNtRFBJblRMb0RsL09HdUpnMGx5d2lIWFMyb2tBRW1PRk5mbzluZTc5MFNHZ0lxWVxcXFxuVCtsbW4rZVNDcmQ4UzFLK2JZQTczNUI4aWdKMEgvaXlvOTRNZk5lOTRqRVljcTdtS25wSTNzaUF2NDI1S01Vc2htOGQzVXJnekt3UFxcXFxuUUQ2SlR5VXpQa3RCS0ZnVUdpUTRDbGRsVFdWb1dNS2ZVZzNYZGVXK2J5b3NydS9YKzg3UGdqN3RzOFk1dGoxSWtWY0ZGc3RXUStjM1xcXFxuak9mTTdNZzRJV1BubFBJWXNMTjgwVmVUMnJScmRvOUZPMlo5SWRVaUhkVytQMnpoRFpQcFpOM2lEcEpONkhqMHFhOVUvL1grY0ZVMVxcXFxuZHl0bEkxL21mWHg1bmdYZmFrbjYzSmp1OWV0ZVl3cUttTmZPUElWZzRhaDRtMmtYOGdZSUtwejRjdmNJKzN6dXpFZlVheGZXTnBtaVxcXFxuNVArc3J2RDhXTU1Bem5Tb3l5TFBsQmc4Y2MyZ0RhUEV5Q0dvRjFVVVUwYVVESzh0UGtuL1ZBYmZnWVVzS25IWUdUNUhQQ2xZVlZGRVxcXFxuWkp6UVo3OXlJeGsvZ2d1WTRhMGg0c2wzWEhsLzNuYStXQ0UxbFdMa1RVbjNPUjZ1WUJvZHpZSTNKVy82WEx5TlZkWEU4b1RuTVBQUFxcXFxuNTRNMVZPZXZKa0diQnZMOHYvaUcyWW1NTjN3dU1sbmFISGxqYTJObm5WNktrZXlMeEtyQXNXMDVjRGFxdWRaeEhNL3phQVdEWVRoeFxcXFxub2NGRE1SbytNbFJNejRRZktLd3lmdmFXRmtESnBqNTBpOGtTWmUzUUM0bFBZdXlUSVZCYnJpb0dGK05nYXhyRmRTaWxtRlpmMTNwRlxcXFxuTjFqQTF2bU92bk0wQVBmenV1YkdWd0RjRWZHNFp4WDc0YXFQL0NZUjFGY1NDYnJObGdBV1FGYjdWTWNwYXpLQVBpeER3R21haytpNVxcXFxuUDlmY1YyL3pkY1hHMVgveUhCcGxhNjJZS2VISWZSbkk5VjBhNXhFMkVtdE95Q2JQa2xlTHJwUndsU0t4dnIzRlpjbXdXZ3gvQXZxY1xcXFxuVXk3ZTREUGxLbWdUeXRQT2NDTVpYc1dmK0tGRWZzL3prRU5zcFJlVnN0b3VCdmxvR3IzZnk5WmoxeGI3YzJxMEd6TDlBOHlVWWZXTlxcXFxuR2Q5NHlqL3Q0RHpQUkc0K2dSdlJCdTc0aEVUYXpZeVcyanF4QURGYnZXbkVSRDMxZXJ6T2M3eGZFU3VsbWhBSW0rSVV3Yy9QRDdjcVxcXFxuc09FYmJIMkszN2RGVllTYXV3Y1FEZTdqVWQ4eGxlT2U3K0sxR0N0ZzgySUE3WDU2U2xZZWc0QndZZ0YxMFI3dFFNTUFYa0s3MXF2eVxcXFxuSEZaT3VPcFI0TkF3OWgxU1dlZHZxZGQ4c3c2ZFcyRkcyeXBLaWFUcnVsTGNpbXRHaEpBVVgvdXN3S1FtZUNOMXZCREhRekh5dEdYbFxcXFxuT1RIQ2NiSkY2ekZBb3FadnpLQjAwUm9HbkpmQ3BvS1JjeXVaYmFLdk9CMWswcHR5UnZTNnNCT0FCaGp4TkVhUURDSXA5T3dlYlo5MlxcXFxuOC9sOCtFSk1EcTNFRzZwalNrT0RGaTVuelJXcVNsOGxQK1RlZmkzZkpVMUUyRXBZS25UOW5KSXFXNlBybmRTRWZid3ZpcEMwVWJMUVxcXFxuckkrMmlZMDZNY0pZaHRnODh6aDByNEM2OGxvRGRncjA5L2RYZGE5a1RiWFo1cGJ6VUJ2U2ZuSWcxRGZKZ0FOWm5wemxnRXZyZzBZT1xcXFxud0QrZk80YTd6NVZLdkNWbmVDT01DL1dPNCtWK0p0NlRvd1c1Sk9MSExMTCtPMTZzZFJ6SGk5T0F6L084WGkrcGt6QkhiVXVCZTRWaFxcXFxuU0Q2bDM3L2ZiKzQyMXZMUldyNmFhNnp0eTgwb2JRMXQrNStqYmtlWGx2czhLazlDT0szUDRDZ0UxQjJweGdwRnFzN3AzMlBNdk9XWlxcXFxuTEl4UXlkZDE4VUtGSWYvTTdVdFUzMmFXa3pJNmZWVmFZQWM0Q3Y1ZnpJdVNpdlVaR2NYV2JrbjhyQXF6RVRqd3A2S1BJa0RnMjZNVlxcXFxuako5VUZrMTJsSTZJL2k1d09GWlZxUWtucmdkcDNxd084bzcwTFdQUlNLb29hTzkzNnl0R1NvWTkxR1BBakhBNTJ1Rm1aM1Z3ZDVzOVxcXFxuNEJ0N3B6L1I3dmJRSmZROW1MYlV2S2Q1SXdPWVE4NXlYWXY1WkkwYWxnRnVqbFdOTWRJaFZRdGR5aUdiS08ycVU4QXlNU085YW9xbFxcXFxuMnVWZ2RJbElETy9QYVRQMjA3NWxxcnkxVnY0S0t4WTEzL2VkNzlzb2JGUHN1QkJDYVUxeFhTeURsM2R6dDNId1c1UDZWa1Rra2kzTlxcXFxuK2lEVmVuWFo3Q2d0TnpWMG5xZlo0WDVtcHNiK3BSWWlIbzJ1VXR5WmxQK2M2ZXU2SndCbVFWR0h6VCtKNVoyZGRrNHdzK3U2UHA4UFxcXFxuMzFmYld1TmI3VlRXVTZQaktTNk52dnVGYm4xMzl4VUJFZjJOWWhNK0tuNGFkV1o5K2pJRmxXQVpnSDV1WXhsMjZiRWVxbGVJYWIvZlxcXFxuYjFVa3M0bFl2WUt2ODNnYWJoWUF4cm95RVVLeUtXdXNxMndMYlM2eUhqMVhONkNYcUV6MHc5eVdXMGtnNVpnbW43TGxWUkdXV1E0a1xcXFxuZ0MvVG9DWnozbDE0bHFtVWplb0h5N045N0RGMmNWcnJPUDJjaUVrcE1vWlp6WWgxR2FOMnBxZzVSdG1QUHZieitaalo4VHJOREliWVxcXFxuMGdncWt0cjlDcTlkSlgyTUVaWVAzZHU2WTBwcVZhc1ErMHBSWlNpbEM0eVZVZlNvOHhKWnM5Syt2U2lNN29IcUdXVEZHYlZsaVFXRFxcXFxuWm1KWlEvS1FSVU5GYWlybFBON3Y5NC9zQm11MitMU1ErV0wxamRwL2drQTdtZWJZZE44N0pkazJWZ2VZeENGc25iMVJvK1pnSWg2R1xcXFxuZ0lwQlhicnA3bWFoMWVwazRjOTk4ZWtnSGJOSkJiVUxycitlYUM1QXlGOUxQMk9kTWxlSmJJVnY5UGR0NU16aGVJbVhTbnl5LzlQS1xcXFxuL3I2eGhzLzhYN1A1VTgrbXRybnZsSTQyeEtkLzFUbDY5V01wY1NpVWVIdEczRm1sdWU5b3JmMzgvTXd0aUVmNnJtbDNMM1FjZlgwWFxcXFxuWVU1Y2E3d1JhNXhMTEp0WlB2bTdrd3ozYisvQmxjUzRISTY3OTNmd2ZHTVBEbGx0ZERvYi9zYkMvMWY5WktXaWpjME84aHRTU2s1MlxcXFxudUorMERLRHRDMDBUYldrUEFDSXNYL1IwbnFjanpJSXJMbWc5MlRJTEM2MDFpN2tvMi9wRGhPQjliVjB1UWhFd2ZOVHZwYmZkZ2NkNFxcXFxueHhIRWZEdEpQaTMzZitUN0VyRXlNbGxMRysrUUlqdm5BNnFzWUpCNW02emZJT3RwVzJxUCsya3U5WWVDb0l4cTJycG9SRitRSFpKclxcXFxucURFMXFZaXlEeTYxdDRnYXo5RTVxeTN1U015Q3FtUlNWbHJUVysrUnhqN1lPWkJVcEQ1Q1VoWm1VT2NScGtPbFcyRGhINERKVTdRNVxcXFxuaXdqaDJkNStoOVJ4WFk4N1hxOVpraTdVblBUUXIybzV3OUJhdTl1eU9PM0laU2s2S2lxU1BiVDFCWUc4aGEwc2pMRytuWTVIZGNQblxcXFxuRWxVc0VPTGxRU3lTQS8xNTRybzY5N2t2azlaN2I4cTltMnhDby81S1lWdlFSM05MZjZzemZuTU15dmNBQUFZeFNVUkJWQ2JybzdVUFxcXFxuT3JEUDUzWS8wNFhRRld0c1NsenZXTmJPRk5CcGtONWF1OTZmZGovRm1zdm90QkgyaE4rdmNBRUFWeXhMalhocVdMVkV6STV3YXRGRVxcXFxuNGpUcFRhVkRTK3l6TTIxS21mVm9NOHNwTkIyYnpobjJEc2hyWVdNcnpyRXZBSEpXazQ5WVV6b2hFUUtINlpLNEplYXU2M3F1Vy9mYlxcXFxudytKbUZpRm1UN29ZeDI1amlyYkl3cjlhWFBsYzd0R2ZNaHZyMWVubDlSeDFJSG9uMmdScm5saEpqY0pTUDhNK0pDQitmbjZ3MG9LYVxcXFxuTFFuTkJ1RWU2NWFVV08yZFh5NEI3N0FKN3N5Q0ZhZDZGVWZFQU5la0xFR0V1YnJnWEoxRTlXcGNJbURwYit2TURaVzQxa1ZsYXF1UFxcXFxuVWgxRVdGNG92ODcxVFlQZm45UzE5aFhBZVRyUTBLWWdGRTF0SEhrWEFQYzk5dWJhM2pKVVZKdUg3djNBL244K24vNHV4SFdBSms3U1xcXFxuM1h2b25kOFBIcmV4eHFNL0tWTndTdWZ1a2xpcnVFTVN4WG1uRlY4bUJaZEJTbDA2Kzg2dzFMUU9nQkxFV2dSL1pCdXRrSmhFb1JvUlxcXFxuMXpWekh4VXJaUjFyUVVOREdsc0xMSnlSY1psZDFBK0tWTlZjOFFlT05ZN1JNRmxObmgzQ21FREtwN2g0VjRWWWZraHl6Q1NRV2E5dFxcXFxuUlU0ZmlXSnJjR2RnME16Nm94anNhN0pja1hYT3lBdzBJTllYU1p0WmpNcXlRbFUxcEFadWEwUUw0TDd2Mzk5ZlB2V2xlaVhzdUY3cFxcXFxuZWVaOGsxbmZVcUZyaUZleU54U1oxaHdvZmVJZDNlRXNCVXpWNGZqc3JmWE5EaFQ0ZWkrOWlyV2hOSzljK2tRY3FIL1hudlA3TE5Fb1xcXFxuZlJYY3hSci9wbHZXVlErMlJRSFA4MlRsV252Ty90QmtsVSswZTkzRVM0ZUE1WFVPTkY3dVdXRGlyQ2hFOVhWcU1sUnlNZ1pRUS9yTVxcXFxuREdtd1NiUEg4Y3F0TFBSMll4aTVMckE5ejVWeFJZU3NXWTc1QXJ0OTVBVlB0dTFjcjZJbzJIKy8vL3orL3JQckxHU0tRd09reVJDSVxcXFxuWElWZHk2VFVvY25CUDdWTW9XUkNyS2tqRFptSFZ2SlNVQThsQWFzeG1obDFvejhSY2NOLzlGWFArVDZiVWlrdGJLN0JOV1REZG1Fd1xcXFxuVGhiUGFHY004UGpubjQ4ZHArNlFSam40bU9rbjgwQmlFbU9odzladFJESU1wUEdPQUtNYlY1UEtKeFlTdUVYaHZRUklMRk1mclRWM1xcXFxuWkxoQ1FUeFA1TTJUeldON2FqTWlBRCtPVjhicE9VZWVIaUpub1BOeGRwNi9Id1hYKzlPb1RWWXRyL2ZOZW5JN0Rudi8rWDJ1bTA5aVxcXFxuRWRRVThkZGI1ejRMODZsUzlRRDV6WDNmWE9DdHhrTEtoeEEvMllPbzFFVk0yby9uMnk3S2JTeU5nTXdPay81OGJLNnFvdVJwREdZS1xcXFxubk1zSGlCbFJrWkRJaCthdk5wZmpJdS8vK2ZPSDBZVkx2WnVkb1VhSjNSNmVVenBtL1RFNTdZU3RlNVB5b0ZiYUxMa2ViY3dEUGM5U1xcXFxuOEYwQkFzQWpyTFVic3RWamEyMmsxd2NMSnFyT2RaWGVNeGE3TGl0cnkxR2dnSFZ1d1pnVEdwdXRyc3pNQUQrT1JlNS8vdnhwNjh0blxcXFxubit2TzkzZXFiNk9VN1BBbldwM0R4MGgxSUZFSGM0RnlxUFpzdk1NbnJYaHdBbDljMFh3K0tGZTlNOGFqb2hCWFExQW9zN0UvQUxMMFxcXFxubzl0WEZQQXExZkl1WGJneUtKSUFWaXBnRXNzV0dCb29ybTI0Y1VZdjJUSzcycjFYOUxhelFtd2NzMUlraEpGZDBrV2VRT0xQa1llNFxcXFxuN0tFaEIveFk1cWljWVRoUlJ2dkl1dmFRZFFldkdUZU1PYTdyaWJBU2x2M3RBeXZwcFlhVjQ1b2IrZ3JGL1l1dGhPRnV6KzgvZjU1clxcXFxuMmRGVFZ6YmxNSW5yU1JHRVNVUm9GVWFsVEVYcFNIaFZsdWR6UHlZMXF5YjduTGV4cUptYWFMSXVoOTJsUFpIdW1TbmtyWE1xUkxNU1xcXFxudFpVcWx3aklBa21wb00yZ1hqdHNZK3FXYnJ5RXBIbmtzaERGWDBnS3d0RmhzT3VJYjlxc2VXcTd4UTBXODhRd1oxb3hOY2tQbEJFclxcXFxuTHlVcjR5ekowSjgvei9Ma0liRWZFUmFORTFyWTdGMWwzVVZ3cEZBbU5ydHpQcFlaTDBxS3JXa0lZR3RGSWFNT3VGM1AvZmw5NTlQaFxcXFxuM0VkU081UHY1ZXJiT2NVSTNUVjZwMENMYUpwVXF0akxaMzNLaWwySHBQLzVQZEdhTFdkRmdwcFRYbW95VWFJUmF5NE4wQW5zV1BQVlxcXFxud2d4dFhlN2VsaHFzNmREeUc1MGc1eWlvQ1RXZEhQN244OGt1cVQvZy94bytPUWRQcHY4cWNlMDZCMmxtckN5VG1Jb1RlTmF0QlBTY1xcXFxucklUa1UxejgxYjAveHB1Skg2MHFlcnA4dWl6VFYySU5jUXlUWis5bG03Ylo4NEJLaEFyZzFrdVR3ZGVIQVhnVm1qa09zK1B6dWZNWlxcXFxubVZqZE8rV1dxMlRuV2dYMUQycEtldVFKZlFaelFKSkV3UllJSC8yVEVrblZwbTYwY0tqbVQ2WHlCR29Vd2crYTJ2RXVJYk9kcEVHZFxcXFxua1NwWXlTTUxXUC81ejM5c0RZcWFyRVJVNCtQL0VmSDcrNXZaV2F4enBIbCtPdm4vQTNPcWtSMDcwZXcvQUFBQUFFbEZUa1N1UW1DQ1xcXFxuXFxcIixcXFwiZGF5c1xcXCI6MCxcXFwiYW1vdW50X2R1ZVxcXCI6MCxcXFwibW9kZWxfbnVtYmVyXFxcIjpcXFwiMTlXSE4tMDNcXFwifVwiLFwiZGV2aWNlSW5mb1wiOlwie1xcXCJpc0VtdWxhdG9yXFxcIjpcXFwiZmFsc2VcXFwiLFxcXCJvc1xcXCI6XFxcIjMuMTguOTErXFxcIixcXFwibW9kZWxWZXJzaW9uXFxcIjpcXFwiZ2VuZXJpY194ODZcXFwiLFxcXCJwbGF0Zm9ybVZlcnNpb25cXFwiOlxcXCI4LjAuMFxcXCIsXFxcIm1vZGVsXFxcIjpcXFwiR29vZ2xlXFxcIixcXFwiaXNSb290ZWRcXFwiOlxcXCJ0cnVlXFxcIn1cIn0ifQ\\u003d\\u003d.MjQwMjkxYjdlYmZiMGZhNjc2ODBiZTI2MTZlYWMzZWJjOTk0ZjZmZmUyODViN2RhZmMxNDNkNmEwYjhiZmMxOA\\u003d\\u003d\"}"}';

        //$_POST = json_decode($str, true);
            
        //print_r($_POST); exit();
        $this->debug = true;
        $this->jsonResponseString = null;
        $this->user = "";

        if ($_POST && array_key_exists("request", $_POST)) {

            $jsonRequestData = $_POST['request'];

            $requestData = json_decode($jsonRequestData, true);
            
            $this->token = $requestData['token'];

            //username is user email address, not her name
            if (array_key_exists("username", $requestData)) {
                $this->user = $requestData['username'];
            }

            $this->requestId = $requestData['requestId'];
            $this->deviceId = $requestData['deviceId'];
            $this->requestUrl = $requestData['requestUrl'];

            if ($this->requestUrl == "saveHandyMan") {
                header('Content-Type: bitmap; charset=utf-8');
            }

            $this->tokenArray = explode('.', $this->token);
            $header = $this->tokenArray[0];
            $jsonData = $this->tokenArray[1];
            $signature = $this->tokenArray[2];
            $type = 'post';

            $details = array(
                'header' => base64_decode($this->tokenArray[0]),
                'request' => base64_decode($this->tokenArray[1]),
                'signature' => base64_decode($this->tokenArray[2]),
                'request_id' => $this->requestId,
                'device_id' => $this->deviceId,
                'email_id' => $this->user,
                'browser_information' => $_SERVER['HTTP_USER_AGENT'],
                'ip_address' => $_SERVER["REMOTE_ADDR"],
                'type' => $type);
            $this->apis->saveRequestData($details);

            $activity = array('activity' => 'data input', 'data' => json_encode($details), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            $this->validateRequest();
        } else {
            log_message('info', "request key NOT exists");
            $this->sendJsonResponse(array('0001', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: accepts get request only and basic validations
     * @output: void
     */
    public function jsonPost() {
        log_message('info', "Entering: " . __METHOD__);

        $this->debug = true;
        $this->jsonResponseString = null;
        $this->user = "";
        $this->user = $this->input->get('username');
        $this->token = $this->input->get('jwt');
        $this->deviceId = $this->input->get('deviceId');
        $this->requestId = $this->input->get('requestId');
        $this->requestUrl = $this->input->get('requestUrl');

       // $authToken = $this->apis->getAuthToken($this->user);

        if (!empty($this->token)) {

            $this->tokenArray = explode('.', $this->token);
            //$header = $this->tokenArray[0];
            //$jsonData = $this->tokenArray[1];
            //$signature = $this->tokenArray[2];
            $type = 'post';

            $details = array(
                'header' => base64_decode($this->tokenArray[0]),
                'request' => base64_decode($this->tokenArray[1]),
                'signature' => base64_decode($this->tokenArray[2]),
                'request_id' => $this->requestId,
                'device_id' => $this->deviceId,
                'email_id' => $this->user,
                'browser_information' => $_SERVER['HTTP_USER_AGENT'],
                'ip_address' => $_SERVER["REMOTE_ADDR"],
                'type' => $type);
            $this->apis->saveRequestData($details);

            $activity = array('activity' => 'data input', 'data' => json_encode($details), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            $this->validateRequest();
        } else {
            log_message('info', "request key NOT exists in jsonPost");
            $this->sendJsonResponse(array('0001', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: validate each request
     * @output: void
     */
    function validateRequest() {
        if ($this->checkSignature() == true and $this->checkAppKeyAndTimeout() == true) {
            $this->processRequest();
        }
    }

    /**
     * @input: void
     * @description: check api key and timeout
     * @output: void
     */
    function checkAppKeyAndTimeout() {
        $activity = array('activity' => 'checking appkey and timeout', 'data' => json_encode($this->jsonRequestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $appKey = $this->jsonRequestData['iss'];
        $expTime = $this->jsonRequestData['exp'];
        $curTime = time();
        return true;
        if ($appKey == 'boloaaka-mobile-application' and $curTime <= $expTime) {
            return true;
        } else {
            $this->sendJsonResponse(array('0004', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: check signature and vaidate signarure
     * @output: void
     */
    function checkSignature() {
        $activity = array('activity' => 'checking signarure', 'data' => json_encode($this->tokenArray), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);
        if (count($this->tokenArray) == 3) {
            $header = $this->tokenArray[0];
            $claims = $this->tokenArray[1];
            $signature = $this->tokenArray[2];
            $secret = $this->doCalculateHmacSignature("username", "boloaaka-signup-request");
            $this->jsonRequestData = base64_decode($claims);
            $this->jsonRequestData = json_decode($this->jsonRequestData, true);
            //print_r($this->jsonRequestData);
            return $this->verifySignature($header, $claims, $signature, $secret);
        } else {
            $this->sendJsonResponse(array('0002', 'failure'));
        }
    }

    /**
     * @input: void
     * @description: verify signarure
     * @output: print response
     */
    public function verifySignature($header, $claims, $signature, $secret) {

        $headerArray = json_decode(base64_decode($header), true);

        if ($headerArray['typ'] === 'JWT') {

            $algo = $headerArray['alg'];
            $string = $header . "." . $claims;

            $sig = base64_encode(hash_hmac($algo, $string, $secret));

            if ($sig === $signature) {
                return true;
            } else {
                //$this->statusCode = '0002';
                $this->sendJsonResponse(array('0002', 'failure'));
            }
        } else {
            //$this->statusCode = '0003';
            $this->sendJsonResponse(array('0003', 'failure'));
        }
    }

    /**
     * @input: JSON String and App secret
     * @description: Create signature from JSON String and App secret
     * @output: Signature
     */
    function doCalculateHmacSignature($message, $secretKey) {
        $hmac = hash_hmac("sha256", $message, $secretKey);

        $hmacBase64 = base64_encode($hmac);

        return $hmacBase64;
    }

    /**
     * @input: void
     * @description: acts as a router to process different request
     * @output: void
     */
    function processRequest() {
        log_message('info', "Entering: " . __METHOD__ . ", Request type UPDATED: " . $this->requestUrl);
        
        switch ($this->requestUrl) {
            case 'getCancellationReasons':
                $this->processGetCancellationReasons();
                break;

            case 'cancelBooking':
                $this->processCancelBooking();
                break;

            case 'rescheduleBooking':
                $this->processRescheduleBooking();
                break;

            case 'engineerLogin':
                $this->processEngineerLogin();
                break;
          
            case 'completeBookingByEngineer':
                $this->processCompleteBookingByEngineer();
                break;
                
            case 'getCancellationReason':
                $this->getCancellationReason();
                break;
                
            case 'cancelBookingByEngineer':
                $this->processCancelBookingByEngineer();
                break;
            
            case 'engineerHomeScreen':
                $this->getEngineerHomeScreen();
                break;
            
            case 'missedBookings':
                $this->getMissedBookings();
                break;
            
            case 'tommorowBookings':
                $this->getTommorowBookings();
                break;
            
            case 'techSupport':
                $this->getTechSupport();
                break;
            
            case 'engineerBookingsByStatus':
                $this->getEngineerBookingsByStatus();
                break;
            
            case 'engineerHeplingDocuments':
                $this->getEngineerHeplingDocuments();
                break;
            
            case 'engineerProfile':
                $this->getEngineerProfile();
                break;
            
            case 'engineerSparePartOrder':
                $this->getEngineerSparePartOrder();
                break;
            
            case 'partTypeOnModelNumber':
                $this->getPartTypeOnModelNumber();
                break;
            
            case 'sparePartName':
                $this->getSparePartName();
                break;
            
            case 'submitSparePartsOrder':
                $this->processSubmitSparePartsOrder();
                break;
            
            case 'bookingProductDetails':
                $this->getBookingProductDetails();
                break;
            
            case 'symptomCompleteBooking':
                $this->getSymptomCompleteBooking();
                break;
            
            case 'defectCompleteBooking':
                $this->getDefectCompleteBooking();
                break;
            
            case 'solutionCompleteBooking':
                $this->getSolutionCompleteBooking();
                break;
            
            default:
                break;
            
        }
    }

    function verifyResponse($phone_number, $userResult) {
        log_message('info', "Entering: " . __METHOD__);

        $result_print = array();
        $code = "0011";
        $status = "error";
        //$message = "Thanks for joining Aroundhomz. Avail off-season AC service at just Rs290 & get AC cover worth Rs500 free. Offer on App Booking goo.gl/m0iAcS / Call 011-39595200";
        //$message = "Thanks for joining Aroundhomz. Avail off-season AC service at Rs210. All Service charges carry 1 Month Warranty. Book on App goo.gl/m0iAcS / Call 011-39595200";
        //$message = "Thanks for interest in 247Around. Please call us for TV, Refrigerator, Washing Machine, Microwave etc Repair/Service/Installation requirement in Delhi & NCR.";
        $message = "Welcome to 247around, your appliance buddy app. You can use it for Appliance Repair/Service/Installation requirements and check our unique repair diagnostics.";
        $developer_phone = array('8826423424', '9810872244', '8130572244', '9899296372', '8447142491');
        //$developer_phone = array();

        if ($userResult) {
            //Confirm user about number verification
            $this->notify->sendTransactionalSmsMsg91($phone_number, $message,SMS_WITHOUT_TAG);
            $name = $userResult[0]['name'];
            $email = $userResult[0]['user_email'];
            $user_id = $userResult[0]['user_id'];

            //Inform Admin as well about the new user
           
            if (!in_array($phone_number, $developer_phone)) {
                /*
                  $this->sendMail("New User Added", $name . " with phone number " . $phone_number
                  . " and email " . $email . " joi`ned Around !!!", false);
                 */

                $this->sendNewUserEmail($userResult);
            }
            

            //Create sample wallet if required
            //Check no of appliances in User's wallet
            $count = $this->apis->getApplianceCountByUser($user_id);
            //log_message('info', "Appliance Count: " . $count);
            //Add sample appliances if user has < 5 appliances in wallet
            if ($count < 5) {
                $this->apis->addSampleAppliances($user_id, 5 - intval($count));
            }

            $result = $userResult[0];
            $result_print = array(
                'user_id' => $result['user_id'],
                'phone_number' => $result['phone_number'],
                'name' => $result['name']
            );

            $code = "0000";
            $status = 'success';
        }

        $this->jsonResponseString['response'] = $result_print;
        $this->sendJsonResponse(array($code, $status));
    }

    /**
     * @input: void
     *
     * @description: This function gets called through the Exotel Missed call App Passthru Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/pass-through
     * Through the $route['pass-through'] = 'api/pass_through'; mechanism defined in routes.php,
     * call reaches to this function below which fetches information passed while making a call to
     * this URL and stores all details in the boloaaka.passthru_misscall_log table (function
     * apis->insertPassthruCall($callDetails)).
     * This table is checked again and again in processUserVerificationCode() to see if valid entry
     * is there or not. Once the entry is found, it is parsed and appropriate code is returned.
     *
     * After saving call details, it marks the calling no as Verified in DB only if call was made
     * to app verification no 30017601 and set 200 OK in header.
     *
     * @output: None
     */
    public function pass_through() {
        log_message('info', "Entering: " . __METHOD__);
        
        if($this->input->post()){
            $callDetails = $this->input->post();
        }
        else{
            $activity = array('activity' => 'process exotel request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
            $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
            $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
            $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
            $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
            $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
            $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
            $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
            $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
            $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
            $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
            $callDetails['create_date'] = null;
        }
        log_message('info', "call_details_array: " . print_r($callDetails, TRUE));

        //var_dump($apiDetails);
        //insert in database
        $this->apis->insertPassthruCall($callDetails);

        //fetches only the 10 digits of the mobile no without the country code
        $num = substr($callDetails['from_number'], '-10');
        //var_dump($num);

    //User could give missed call on 011-30017601 to verify the App
    //as well as to confirm her istallation. Try both steps below and then
    //leave.
    //If user has given a missed call on 011-30017601 to verify the App,
    //verify the user no in the database.
    //Also, If user has given a missed call on 011-30017601 to confirm installation,
    //tag the booking accordingly.
    if ($callDetails['To'] == PARTNERS_MISSED_CALLED_NUMBER || $callDetails['To'] == PARTNERS_MISSED_CALLED_NUMBER_KNOWLARITY || $callDetails['To'] == PARTNERS_MISSED_CALLED_NUMBER_2) {
            //Send Notification to concerned employee for missed call notification
            $receiverArray['employee'] = explode(",",INSTALLATION_MISSED_CALL_NOTIFICATION_EMPLOYYE_IDS);
            $this->push_notification_lib->create_and_send_push_notiifcation(INSTALLATION_MISSED_CALL_NOTIFICATION,$receiverArray,array());
            
            //verify user phone no first
            $this->apis->verifyUserNumber($num);

            //Check if call has been made from APP
            //Handling case when User is not being Found in DB, sending Installation and Request
            // welcome SMS to the corresponding user and adding the details in Partner Missed Calls table as well
            //1. Sending SMS to the user
            $sms['tag'] = "partner_missed_call_welcome_sms";
            $sms['phone_no'] = $num;
            $sms['smsData'] = '';
            $sms['booking_id'] = '';
            $sms['type'] = "user";
            $sms['type_id'] = '';

            $this->notify->send_sms_msg91($sms);
            //Logging
            log_message('info', __FUNCTION__ . ' Partner Missed Call Welcome SMS has been sent to ' . $num);


            //2. Now adding details in partner_missed_calls table
            //Checking the Case when Number is already present in Table
            //Getting FollowUp Leads
            $leads_followUp = $this->partner_model->get_partner_leads_by_phone_status($num, 'FollowUp');
            //Getting Completed Leads
            $leads_completed = $this->partner_model->get_partner_leads_by_phone_status($num, 'Completed');
            //Getting Cancelled Leads
            $leads_cancelled = $this->partner_model->get_partner_leads_by_phone_status($num, 'Cancelled');
            // a . First checking if FollowUp leads is Present
            if (!empty($leads_followUp)) {

                //Updating Previously present Row, by changing Dates when Phone is present in FollowUp state
                $data['action_date'] = date('Y-m-d H:i:s');
                $data['create_date'] = date('Y-m-d H:i:s');
                $data['update_date'] = date('Y-m-d H:i:s');
                $where = array('id' => $leads_followUp[0]['id']);
                $inserted_id = $this->partner_model->update_partner_missed_calls($where, $data);
                if ($inserted_id) {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Previous Phone has been updated in partner_missed_calls table with no: ' . $num);
                    //Adding details in Booking State Change
                    $this->notify->insert_state_change("", _247AROUND_FOLLOWUP, _247AROUND_FOLLOWUP, "Lead Updated Phone: " . $num, _247AROUND_DEFAULT_AGENT, 
                            _247AROUND_DEFAULT_AGENT_NAME, ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP,_247AROUND);
                } else {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Error in adding Phone to partner_missed_calls details ' . $num);
                }
            }
            // b. Checking case when leads is Completed or Cancelled
            else if (!empty($leads_cancelled) || !empty($leads_completed)) {

                // Adding a new Row in Partner missed calls details in case of completed or cancelled
                $data['phone'] = $num;
                $data['action_date'] = date('Y-m-d H:i:s');
                $data['create_date'] = date('Y-m-d H:i:s');
                $inserted_id = $this->partner_model->insert_partner_missed_calls_detail($data);
                if ($inserted_id) {
                    //Logging
                    log_message('info', __FUNCTION__ . ' New Entry for SAME PHONE has been added in partner_missed_calls table with no: ' . $num);
                    //Adding details in Booking State Change
                    $this->notify->insert_state_change("", _247AROUND_FOLLOWUP, _247AROUND_NEW_PARTNER_LEAD, "Lead Added Phone: " . $num, _247AROUND_DEFAULT_AGENT,
                            _247AROUND_DEFAULT_AGENT_NAME, ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP,_247AROUND);
                } else {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Error in adding Phone to partner_missed_calls details ' . $num);
                }
            }
            // c. No leads is Present
            else {

                //Condition when Phone is Not Present - Insert New Row
                $data['phone'] = $num;
                $data['action_date'] = date('Y-m-d H:i:s');
                $data['create_date'] = date('Y-m-d H:i:s');
                $inserted_id = $this->partner_model->insert_partner_missed_calls_detail($data);
                if ($inserted_id) {
                    //Logging
                    log_message('info', __FUNCTION__ . ' New Phone has been added in partner_missed_calls table with no: ' . $num);
                    //Adding details in Booking State Change
                    $this->notify->insert_state_change("", _247AROUND_FOLLOWUP, _247AROUND_NEW_PARTNER_LEAD, "Lead Added Phone: " . $num, _247AROUND_DEFAULT_AGENT, 
                            _247AROUND_DEFAULT_AGENT_NAME,ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP, _247AROUND);
                } else {
                    //Logging
                    log_message('info', __FUNCTION__ . ' Error in adding Phone to partner_missed_calls details ' . $num);
                }
            }


            //Considering the case for Snapdeal Missed Calls
        } 
        else if($callDetails['To'] == SNAPDEAL_MISSED_CALLED_NUMBER || $callDetails['To'] == SNAPDEAL_MISSED_CALLED_NUMBER_KNOWLARITY){
            //Logging
            log_message('info', __FUNCTION__ . ' Missed call given by Snapdeal customer - Number: ' . $num);
            
            //verify user phone no first
        $this->apis->verifyUserNumber($num);
            
            //find all pending queries for this user now
            $bookings = $this->user_model->booking_history($num, 100, 0);

            //change internal status to show missed call activity if it is
            //a pending query waiting for confirmation and user has given missed
            //call to confirm the installation
            if (count($bookings) > 0) {
                foreach ($bookings as $b) {
                    if (($b['type'] === 'Query' && $b['current_status'] === 'FollowUp') ||
                            $b['current_status'] === "Cancelled" && $b['type'] === 'Query' &&
                            (date('Y-m-d', strtotime($b['create_date'])) > date('Y-m-d',strtotime('-30 days')))) {
                        $d = array('internal_status' => 'Missed_call_confirmed',
                            'closed_date' => NULL,
                            'cancellation_reason' => NULL,
                            'service_center_closed_date' => NULL,
                            'booking_date' => '', 'booking_timeslot' => '',
                            'delivery_date' => date('Y-m-d H:i:s'),
                            'current_status' => 'FollowUp',
                            'query_remarks' => 'Missed call received, Convert to Booking NOW !!!');

                        //check partner status from partner_booking_status_mapping table  
                        $partner_status = $this->booking_model->get_partner_status($b['partner_id'], $d['current_status'], $d['internal_status']);
                        if (!empty($partner_status[0]['partner_current_status']) && !empty($partner_status[0]['partner_internal_status'])) {
                            $d['partner_current_status'] = $partner_status[0]['partner_current_status'];
                            $d['partner_internal_status'] = $partner_status[0]['partner_internal_status'];
                        } else {
                            $d['partner_current_status'] = 'PENDING';
                            $d['partner_internal_status'] = 'Customer_Not_Available';
                            $this->booking_utilities->send_mail_When_no_data_found($d['current_status'], $d['internal_status'], $b['booking_id'], $b['partner_id']);
                        }

                        $r = $this->booking_model->update_booking($b['booking_id'], $d);

                        $this->send_missed_call_confirmation_sms($b);

                        if ($r === FALSE) {
                            log_message('info', __METHOD__ . '=> Booking confirmation '
                                    . 'through missed call failed for ' . $b['booking_id']);

                            //Send email
                            $this->notify->sendEmail(NOREPLY_EMAIL_ID, "anuj@247around.com", "", "", "Query update Failed after Missed Call for Booking ID: " . $b['booking_id'], "", "",QUERY_UPDATE_FAILED_MISSED_CALL, "", $b['booking_id']);
                        } else {
                            log_message('info', __METHOD__ . '=> Booking confirmation '
                                    . 'through missed call succeeded for ' . $b['booking_id']);
                            $u = array('booking_status' => _247AROUND_FOLLOWUP, 'ud_closed_date' => NULL);
                            //Update unit details
                            $this->booking_model->update_booking_unit_details($b['booking_id'], $u);
                             $this->notify->insert_state_change($b['booking_id'], _247AROUND_FOLLOWUP, $b['current_status'], 
                                     "Booking Open After Customer Missed Call",_247AROUND_DEFAULT_AGENT, 
                                     _247AROUND_DEFAULT_AGENT_NAME,ACTOR_FOLLOW_UP,NEXT_ACTION_FOLLOW_UP, _247AROUND);
                        }
                    }
                    else if($b['type'] === 'Booking' && $b['current_status'] === 'Cancelled'){
                        // If Cancelled date belongs to last 7 days only 
                        $today = strtotime(date("Y-m-d"));
                        $cancelled_date = strtotime($b['closed_date']);
                        $datediff = round(($today - $cancelled_date) / (60 * 60 * 24));
                        if($datediff < 8){
                            $postArray['assigned_vendor_id'] =$b['assigned_vendor_id'];
                            $nextDay = date('Y-m-d', strtotime("+1 days"));
                            $postArray['booking_date'] = $nextDay;
                            if(date('w', strtotime($nextDay)) == 7){
                                $postArray['booking_date'] = date('Y-m-d', strtotime("+2 days"));
                            }
                            $postArray['booking_timeslot'] = "4PM-7PM";
                            $postArray['admin_remarks'] = "Booking get Reopend through customer missed call";
                            $postArray['partner_id'] = $b['partner_id'];
                            $reopenBookingUrl = base_url() . "employee/do_background_process/reopen_booking/".$b['booking_id']."/".$b['current_status'];
                            $this->asynchronous_lib->do_background_process($reopenBookingUrl, $postArray);
                        }
                    }
                }
            }else{
                /* When No bookings found for the snapdeal customers on missed call then send sms*/
                $this->send_missed_call_booking_not_found_sms($num);
                log_message('info', __FUNCTION__ . ' Missed call given by customer from 247AROUND App - Number: ' . $num);
            }
        }

        $this->output->set_header("HTTP/1.1 200 OK");
    }

    
    public function pass_through_ac_service() {
        //log_message('info', "Entering: " . __METHOD__);
        
        if($this->input->post()){
            $callDetails = $this->input->post();
        }
        else{
            $activity = array('activity' => 'AC Service Request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
            $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
            $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
            $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
            $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
            $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
            $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
            $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
            $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
            $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
            $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
            $callDetails['create_date'] = null;
        }

        //var_dump($apiDetails);
        //insert in database
        $this->apis->insertPassthruCall($callDetails);

        //fetches only the 10 digits of the mobile no without the country code
        $num = substr($callDetails['from_number'], '-10');
        //var_dump($num);

    //User would give missed call on 011-39595450 to make AC service request
        //Once missed call is received, send customer details on email to the team
        //so that the booking can be inserted.
    if ($callDetails['To'] == AC_SERVICE_MISSED_CALLED_NUMBER || $callDetails['To'] == AC_SERVICE_MISSED_CALLED_NUMBER_KNOWLARITY) {
            log_message('info', "AC Service Missed Call Received from: " . $num);
            
            //send email
            $from = NOREPLY_EMAIL_ID;
            $to = NOREPLY_EMAIL_ID;
            $cc = NITS_ANUJ_EMAIL_ID;
            $bcc = '';
            $sub = "AC Service Missed Call Received from: " . $num;
            $body = 'Please schedule AC service for this customer';
                    
            $this->notify->sendEmail($from, $to, $cc, $bcc, $sub, $body, "",AC_MISSED_CALL);
        }
        
    }
    
    /**
     * @desc: This is used to send sms when customer gave a missed call and booking is found
     * @param string $booking
     */
    function send_missed_call_confirmation_sms($booking) {
        //log_message ('info', __METHOD__);

        if($booking['partner_id'] === GOOGLE_FLIPKART_PARTNER_ID){
            $sms['tag'] = "missed_call_confirmed_for_google";
        }else{
            $sms['tag'] = "missed_call_confirmed";
        }
        $sms['phone_no'] = $booking['booking_primary_contact_no'];
        $sms['smsData']['message'] = '';
        $sms['smsData']['service'] = $booking['services'];
        // Check time is greater than 1PM. If time is greater than 1 PM,
        // then set installation date Tommorrow otherwise Today.
        if(date("l") == "Sunday"){
            
            $sms['smsData']['date'] = "Tomorrow";
            
        } else if (date('H') > 13) {
            $sms['smsData']['date'] = "Tomorrow";
        } else {
            $sms['smsData']['date'] = "Today";
        }

        $sms['smsData']['booking_id'] = $booking['booking_id'];
        $sms['booking_id'] = $booking['booking_id'];
        $sms['type'] = "user";
        $sms['type_id'] = $booking['user_id'];

        $this->notify->send_sms_msg91($sms);
    }

    /**
     * @desc: This is used to send sms when customer gave a missed call and booking is NOT found
     * @param string Mobile no
     */
    function send_missed_call_booking_not_found_sms($mobile) {
        //log_message ('info', __METHOD__);
        
    $sms['tag'] = "missed_call_booking_not_found";
    $sms['phone_no'] = $mobile;
        $sms['smsData'] = '';
    $sms['booking_id'] = '';
    $sms['type'] = "user";
    $sms['type_id'] = '';

    $this->notify->send_sms_msg91($sms);
    }

    /**
     * @input: void
     *
     * @description: This function gets called through the Exotel Vendor extn call App Passthru Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/vendor-extn
     * Through the $route['vendor-extn'] = 'api/vendor_extn'; mechanism defined in routes.php,
     * call reaches to this function below which fetches information passed while making a call to
     * this URL and the Vendor extn which gets passed through the Gather Applet.
     *
     * After saving call details, it marks the calling no as Verified in DB and set 200 OK in header.
     *
     * @output: None
     */
    public function vendor_extn() {
        log_message('info', "Entering: " . __METHOD__);

        $activity = array('activity' => 'process vendor extn request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
        $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
        $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
        $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
        $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
        $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
        $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
        $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
        $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
        $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
        $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
        //$callDetails['create_date'] = $this->microtime_float();
        //$callDetails['update_date'] = $this->microtime_float();
        //send test mail with all this info - SEND MAIL DIDN'T WORK HERE SO RELY ON DB TABLE ONLY
        //sendMail("Vendor extn test", print_r($callDetails, true), true);
        //fetches the vendor extn using the 'digits' parameter.
        //NOTE: This parameter comes with a double quote (") before and after the number. You'll have to trim()
        //this parameter for double quotes (") to get the actual digits.
        $extn = trim($callDetails['digits'], "\"");
        log_message('info', "Extn: " . $extn);

        //TODO: Validate extn and set HTTP header accordingly
        $result = $this->apis->gethandymanfromextn($extn);
        if (count($result) > 0) {
            //fetch handyman
            $callDetails['handyman_id'] = $result[0]['id'];
            $callDetails['handyman_phone'] = $result[0]['phone'];

            log_message('info', "Phone number found: " . $callDetails['handyman_phone']);
        } else {
            //TODO: Handle error here
            log_message('info', "Handyman not found, invalid extension");
        }

        //insert in database
        $this->apis->insertPassthruVendorExtnCall($callDetails);

        $this->output->set_header("HTTP/1.1 200 OK");
    }

    /**
     * @input:
     *
     * @description: This function gets called through the Exotel Vendor extn call App Connect Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/get-vendor-phone
     * to get a vendor number as per the vendor selected by the user (through the extn passed).
     *
     * @output: None
     */
    public function getVendorPhoneFromExtn() {
        log_message('info', "Entering: " . __METHOD__);

        $activity = array('activity' => 'get vendor number from extn request', 'data' => json_encode($_GET),
            'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $callSid = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;

        //returns the vendor mobile num using the extn parameter.
        //TODO: Should we have some flag which marks the request as serviced????
        $result = $this->apis->checkPassThruVendorExtnLog($callSid);
        if (count($result) > 0) {
            //return handyman mobile number
            log_message('info', "Phone number found & returned");

            $mob_num = $result[0]['handyman_phone'];
        } else {
            //TODO: Handle error here
            log_message('info', "Phone number not found, return Around call center number");

            $mob_num = "08046809276";
        }

        echo $mob_num;
        log_message('info', "Mobile no returned: " . $mob_num);
    }

    /**
     * @input: Subject and Message strings. Flag isTesting is used to send test mails only to Anuj
     * @description: send email
     * @output: Return response string: Success or Fail
     */
    function sendMail($subject, $message, $isTesting) {
        $this->load->library('email');
        $this->email->initialize(array(
            'protocol' => 'smtp',
            'smtp_host' => 'smtp.sendgrid.net',
            'smtp_user' => 'nitinmalhotra',
            'smtp_pass' => 'mandatory16',
            'smtp_port' => 587,
            'crlf' => "\r\n",
            'newline' => "\r\n",
            'mailtype' => 'html'
            )
        );

        $activity = array('activity' => 'send email', 'data' => "Subject: $subject, Message: $message",
            'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $this->email->from('feedback@247around.com', '247around Team');

    if ($isTesting) {
            $this->email->to("anuj.aggarwal@gmail.com");
        } else {
            $this->email->to(NITS_ANUJ_EMAIL_ID);
            //$this->email->cc("anuj.aggarwal@gmail.com");
    }

        $this->email->subject($subject);
        $this->email->message($message);

        if ($this->email->send()) {
            log_message('info', __METHOD__ . ": Mail sent successfully");

            return "Success";
        } else {
            log_message('error', __METHOD__ . ": Mail could not be sent");

            return "Fail";
        }
    }

    /**
     * @input: Subject and Message strings. Flag isTesting is used to send test mails only to Anuj
     * @description: send email
     * @output: Return response string: Success or Fail
     */
    function sendBookingMailToUser($user, $subject, $message, $file, $isTesting) {
        //$activity = array('activity' => 'send booking email to user', 'data' => "Subject: $subject, Message: $message",
        //    'time' => $this->microtime_float());
        //$this->apis->logTable($activity);

        $this->email->from(NOREPLY_EMAIL_ID, '247around Team');

    if ($isTesting) {
            $this->email->to($user);
            $this->email->bcc(ANUJ_EMAIL_ID);
        } else {
            $this->email->to($user);
            $this->email->bcc(NITS_ANUJ_EMAIL_ID);
    }

        $this->email->subject($subject);
        $this->email->message($message);

        if ($file != "")
            $this->email->attach($file, 'attachment', 'booking-snapshot.jpg');

        if ($this->email->send()) {
//            log_message('info', __METHOD__ . ": Mail sent successfully");

            return "Success";
        } else {
//            log_message('error', __METHOD__ . ": Mail could not be sent");

            return "Fail";
        }
    }

    function saveUnitDetails($unit_details, $booking_id, $discount_amount, $service_id, $appliance_id, $state) {
        log_message('info', "Entering: " . __METHOD__);

        $units = json_decode($unit_details, true);
        $count = count($units);
        $i= 0;
        $price_tag = array();
        //Insert unit details corresponding to this booking ID
        foreach ($units as $unit) {
        $b_unit['partner_id'] = _247AROUND;
        $b_unit['appliance_brand'] = $unit['brand'];
        $b_unit['service_id'] = $service_id;
        $b_unit['booking_id'] = $booking_id;
        $b_unit['appliance_id'] = $appliance_id;
        $b_unit['appliance_capacity'] = $unit['capacity'];
        $b_unit['appliance_category'] = $unit['category'];
        $b_unit['model_number'] = $unit['modelNo'];
        $price_tags = $unit['priceTags'];
        $p_explode = explode(",", $price_tags);
        foreach($p_explode as $key => $p_tags){
            $s_charges = $this->partner_model->getPrices( $b_unit['service_id'], $b_unit['appliance_category'], 
                    $b_unit['appliance_capacity'], $this->app_price_mapping_id, trim($p_tags),"");
            if($i == 0){
                $b_unit['around_paid_basic_charges'] = $discount_amount;
                $b_unit['around_net_payable'] = $discount_amount;
            } else{
                $b_unit['around_paid_basic_charges'] = 0;
                $b_unit['around_net_payable'] = 0;
            }
            
            $b_unit['partner_paid_basic_charges'] = 0;
            $b_unit['partner_net_payable'] = 0;
            
            $b_unit['id'] = $s_charges[0]['id'];
            $b_unit['booking_status'] = _247AROUND_PENDING;
            
             $result = $this->booking_model->insert_data_in_booking_unit_details($b_unit, $state , $key);
             array_push($price_tag, $result['price_tags']);
            $i++;
        }
           
        //log_message('info', "Unit Inserted: " . $id_returned);
        }
        
         $this->booking_model->update_request_type($booking_id, $price_tag,array());

//        log_message('info', "No of Units: " . $count);
        return $count;
    }

 
    /**
     * @input: None
     * @description: Get booking calcellation reasons
     * @output:
     */
    function processGetCancellationReasons() {
        log_message('info', "Entering: " . __METHOD__);

        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //print_r($requestData);
        $activity = array('activity' => 'process get cancellation reasons', 'data' => json_encode($requestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $reasons = $this->apis->getCancellationReasons();
        log_message('info', print_r($reasons, TRUE));

        $this->jsonResponseString['response'] = $reasons;
        $this->sendJsonResponse(array('0000', 'success'));
    }

    /**
     * @input: Booking ID to be cancelled
     * @description: Cancel pre-existing booking
     * @output:
     */
    function processCancelBooking() {
        log_message('info', "Entering: " . __METHOD__);

        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //print_r($requestData);
        $activity = array('activity' => 'process cancel booking', 'data' => json_encode($requestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $booking_id = $requestData['booking_id'];
        $cancellation_reason = $requestData['reason'];
        
        $data = $this->booking_model->getbooking_history($booking_id);
        $result = $data[0];

        log_message('info', "Booking ID: " . $booking_id . ", Reason: " . $cancellation_reason);

        $this->miscelleneous->process_cancel_form($booking_id, _247AROUND_PENDING, $cancellation_reason, "Cancelled By Customer through Mobile APP", _247AROUND_DEFAULT_AGENT, _247AROUND_DEFAULT_AGENT, _247AROUND, _247AROUND);

        //Send message to User
        $user_profile = $this->apis->getuserProfileid($result['user_id']);
//        log_message('info', "Formatted date: " . $booking_date_formatted);

        //Send cancellation mails to Admin, Vendor and User
        $this->sendCancellationMails($user_profile[0], $result);

        $this->jsonResponseString['response'] = "done";
        $this->sendJsonResponse(array('0000', 'success'));
        
    }

    /**
     * @input: Booking ID to be rescheduled, new date and time
     * @description: Cancel pre-existing booking
     * @output:
     */
    function processRescheduleBooking() {
        log_message('info', "Entering: " . __METHOD__);

        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //print_r($requestData);
        $activity = array('activity' => 'process reschedule booking', 'data' => json_encode($requestData), 'time' => $this->microtime_float());
        $this->apis->logTable($activity);

        $booking_id = $requestData['booking_id'];
        $booking_date = $requestData['booking_date'];
        //Format = DD-MM-YYYY for database
        $booking_date_formatted = date("d-m-Y", strtotime($booking_date));
        $booking_time = $requestData['booking_time'];
        $reschedule_date = date('Y-m-d H:i:s');

//        log_message('info', "Booking ID: " . $booking_id);

        $reschedule_details = array(
            'current_status' => 'Rescheduled',
            'update_date' => $reschedule_date,
            'booking_date' => $booking_date_formatted,
            'booking_timeslot' => $booking_time
        );

        $result = $this->apis->updateBooking($booking_id, $reschedule_details);
//        log_message('info', print_r($result, TRUE));

        //Send message to User
        $user_profile = $this->apis->getuserProfileid($result['user_id']);
        $user_phone = $user_profile[0]['phone_number'];

        $booking_date_strings = explode(",", $result['booking_date']);
        $booking_time_strings = explode("-", $result['booking_timeslot']);
        $booking_time_by = trim($booking_time_strings[1]);

        $services = $this->apis->getServiceById($result['service_id']);
        $searched_service = $services[0]['services'];

        //Send cancellation mails to Admin, Vendor and User
        $this->sendRescheduleMails($user_profile[0], $result);

        $message = "Got It ! Your request for $searched_service Repair is rescheduled to $booking_date_strings[0], $booking_time_by. Like us on Facebook goo.gl/Y4L6Hj / 9555000247 - 247Around";

        //log_message('info', "SMS text: " . $message);

        $this->notify->sendTransactionalSmsMsg91($user_phone, $message,SMS_WITHOUT_TAG);
        //$notify = "Sms Sent";

        $this->jsonResponseString['response'] = "done";
        $this->sendJsonResponse(array('0000', 'success'));
        
    }

    function processEngineerLogin(){ 
         $requestData = json_decode($this->jsonRequestData['qsh'], true);
         
         $data = $this->dealer_model->entity_login(array("entity" => "engineer", 
            "active" =>1, "user_id" => $requestData["mobile"], "password" => md5($requestData["password"])));
        if(!empty($data)){ 
            $engineer  = $this->engineer_model->get_engineers_details(array("id" => $data[0]['entity_id']), "service_center_id, name");
            if(!empty($engineer)){
                $sc_agent = $this->service_centers_model->get_sc_login_details_by_id($engineer[0]['service_center_id']);
                $data[0]['service_center_id'] = $engineer[0]['service_center_id'];
                $data[0]['sc_agent_id'] = $sc_agent[0]['id'];
                $data[0]['agent_name'] = $engineer[0]['name'];
                $device['deviceInfo'] = $requestData["deviceInfo"];
                $device["device_id"] = $this->deviceId;
                $device['app_version'] = $requestData["app_version"];
                $this->partner_model->update_login_details($device, array("agent_id" => $data[0]['agent_id']));
                $this->jsonResponseString['response'] = $data[0];
                $this->sendJsonResponse(array('0000', 'success'));
            } else {
                $this->sendJsonResponse(array('0013', 'failure'));
            }
            
        } else {
            $this->sendJsonResponse(array('0012', 'failure'));
        }
    }
    
    function processCompleteBookingByEngineer(){
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $unitDetails = json_decode($requestData["unit_array"], true);
     
        $booking_id = $requestData["booking_id"];
        $validation = true;
        foreach($unitDetails as $value){
            $data = array();
            $data["current_status"] = "InProcess";
           
            $data["internal_status"] = _247AROUND_COMPLETED;
            
            if($value["appliance_broken"] == "false"){
                $data["is_broken"] = 0;
            } else {
                $data["is_broken"] = 1;
            }
           

            if($value['pod'] == "1"){
                if(isset($value["serial_number"])){
                    $data['serial_number'] = $value["serial_number"];
                    $sn_pic_url = $value['bookingID']."_" . $value["unit_id"]."_serialNO_".rand(10,100).".png";
                    
                    $this->miscelleneous->generate_image($value["signature_pic"],$sn_pic_url,"engineer-uploads");
                    
                    $data["serial_number_pic"] = $sn_pic_url;
                    
                } else {
                    $validation = false;
                    break;
                }
               
            }
            $data["closed_date"] = date("Y-m-d H:i:s");
            $data["engineer_id"] = $requestData['engineer_id'];
            $data["sf_purchase_date"] = $requestData['purchase_date'];
            $data["model_number"] = $value['model_number'];
            $data["closing_remark"] = $value['closing_remark'];
            $data["symptom"] = $value['symptom'];
            $data["defect"] = $value['defect'];
            $data["solution"] = $value['solution'];
            $data["service_charge"] = $value['service_charge'];
            $data["additional_service_charge"] = $value['additional_service_charge'];
            $data["parts_cost"] = $value['parts_cost'];
            $this->engineer_model->update_engineer_table($data, array("unit_details_id" => $value["unit_id"], "booking_id" =>$value["booking_id"] ));
        }
        
        if($validation){
            $sign_pic_url = $booking_id."_sign_".rand(10,100).".png";
                   
            $this->miscelleneous->generate_image($requestData["SignatureEncode"],$sign_pic_url,"engineer-uploads");
            
            $en["amount_paid"] = $requestData["amountPaid"];
            $en["booking_id"] = $booking_id;
            $en["signature"] = $sign_pic_url;
            $en['closed_date'] = date("Y-m-d H:i:s");
            $bookinghistory = $this->booking_model->getbooking_history($booking_id);
            if(!empty($requestData['location']) ){
                $location = json_decode($requestData['location'], true);
                $en["pincode"] = $location['pincode'];
                if($bookinghistory[0]['booking_pincode'] != $location['pincode']){
                    $en['mismatch_pincode']  = 1;
                }
                $en["city"] = $location['city'];
                $en["address"] = $location['address'];
                $en["latitude"] = $location['latitude'];
                $en["longitude"] = $location['longitude'];
               
            }
            $en["remarks"] = $requestData['remarks'];
            $en["service_center_id"] = $requestData['service_center_id'];
            $en["engineer_id"] = $requestData['engineer_id'];
            $is_exist = $this->engineer_model->get_engineer_sign("id", array("service_center_id" => $requestData['service_center_id'], "booking_id" => $booking_id));
            if(!empty($is_exist)){
                $this->engineer_model->update_engineer_action_sig(array("id"=> $is_exist[0]['id']), $en);
            } else {
                $this->engineer_model->insert_engineer_action_sign($en);
            }
            $actor = $next_action = 'not_define';
            $partner_status = $this->booking_utilities->get_partner_status_mapping_data($data["current_status"] , $data['internal_status'], "", $booking_id);
            if (!empty($partner_status)) {
                $booking['partner_current_status'] = $partner_status[0];
                $booking['partner_internal_status'] = $partner_status[1];
                $actor = $booking['actor'] = $partner_status[2];
                $next_action = $booking['next_action'] = $partner_status[3];
            }
            $this->booking_model->update_booking($booking_id, $booking);
            $this->notify->insert_state_change($booking_id, ENGINEER_COMPLETE_STATUS, _247AROUND_PENDING, "Booking Updated By Engineer From App", 
                    $requestData['sc_agent_id'], "", $actor,$next_action,NULL, $requestData['service_center_id']);
            
            $this->sendJsonResponse(array('0000', 'success'));
        } else {
            
            $this->sendJsonResponse(array('0018', 'Please Add Serial Number'));
        }  
    }
    
    function getCancellationReason(){
        $where = array('reason_of' => 'vendor', 'show_on_app'=> 1);
        $reason = $this->booking_model->cancelreason($where);
        $this->jsonResponseString['cancellationReason'] = $reason;
        $this->sendJsonResponse(array('0000', 'success'));
    }
    
    function processCancelBookingByEngineer(){
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        if(!empty($requestData["bookingID"]) && !empty($requestData["cancellationReason"])){
            
            $data["booking_id"] = $requestData["bookingID"];
            $data['engineer_id'] = $requestData["engineer_id"];
            $data['current_status'] = "InProcess";
            $data['internal_status'] = _247AROUND_CANCELLED;
            $data["closed_date"] = date("Y-m-d H:i:s");
            $this->engineer_model->update_engineer_table($data, array( "booking_id" =>$requestData["bookingID"] ));
            
            $en["booking_id"] = $requestData["bookingID"];
            $en["remarks"] = $requestData["cancellationReason"];
            $en['closed_date'] = date("Y-m-d H:i:s");
            $bookinghistory = $this->booking_model->getbooking_history($requestData["bookingID"]);
            if(!empty($requestData['location']) ){
                $location = json_decode($requestData['location'], true);
                $en["pincode"] = $location['pincode'];
                $en["city"] = $location['city'];
                $en["address"] = $location['address'];
                $en["latitude"] = $location['latitude'];
                $en["longitude"] = $location['longitude'];
                if($bookinghistory[0]['booking_pincode'] != $location['pincode']){
                    $en['mismatch_pincode']  = 1;
                }
               
            }
            $en["service_center_id"] = $requestData['service_center_id'];
            $en["engineer_id"] = $requestData['engineer_id'];
            $is_exist = $this->engineer_model->get_engineer_sign("id", array("service_center_id" => $requestData['service_center_id'], "booking_id" => $data["booking_id"]));
            if(!empty($is_exist)){
                $this->engineer_model->update_engineer_action_sig(array("id"=> $is_exist[0]['id']), $en);
            } else {
                $this->engineer_model->insert_engineer_action_sign($en);
            }
           
            $this->notify->insert_state_change($requestData["bookingID"], $requestData["cancellationReason"], _247AROUND_PENDING, 
                    "Booking Cancelled By Engineer From App", 
                    $requestData['sc_agent_id'], "",ACTOR_BOOKING_CANCELLED,NEXT_ACTION_CANCELLED_BOOKING, NULL, $requestData['service_center_id']);
            
            $this->sendJsonResponse(array('0000', 'success'));
             
        } else {
            $this->sendJsonResponse(array('0019', 'Failure'));
        }
    }

    function makeRequestDataArray() {
        $reqData = json_decode($this->jsonRequestData['qsh'], true);
        $array = array();
        for ($i = 0; $i < count($reqData); $i++) {
            $val = $reqData[$i];
            $array[$val['name']] = $val['value'];
        }
        return $array;
    }

    function makeAssocArray($data) {
        $reqData = json_decode($data, true);
        $array = array();
        for ($i = 0; $i < count($reqData); $i++) {
            $val = $reqData[$i];
            $array[$val['name']] = $val['value'];
        }
        return $array;
    }

    /**
     * @input: child key array and parent of child keys
     * @description: check valid JSON keys
     * @output: valid JSON keys
     */
    function checkJsonKeys($childArray, $parent = null) {
        $childArray = array_change_key_case($childArray, CASE_LOWER);
        $childArrayKey = array_keys($childArray);
        foreach ($childArrayKey as $childArrayKeys) {
            if (is_string($childArray[$childArrayKeys])) {
                $this->number = $this->checkValidKeys(strtolower($childArrayKeys), $parent) * $this->number;
            } else if (is_bool($childArray[$childArrayKeys])) {
                $this->number = $this->checkValidKeys(strtolower($childArrayKeys), $parent) * $this->number;
            } else if ($this->isAssociative($childArray[$childArrayKeys]) == 1) {
                $this->checkJsonKeys($childArray[$childArrayKeys], $childArrayKeys);
            } else if (is_array($childArray[$childArrayKeys])) {
                for ($i = 0; $i < sizeof($childArray[$childArrayKeys]); $i++) {
                    if (!is_string($childArray[$childArrayKeys][$i])) {
                        $this->checkJsonKeys($childArray[$childArrayKeys][$i], $childArrayKeys);
                    }
                }
            } else {
                return array("1001.1", "failure");
            }
        }
    }

    /**
     * @input: IP Address
     * @description: find the location of the user according to the ip address
     */
    function findLocationByIpNumber($ipaddress, $email) {

        //convert ip address into ip number
        $ipno = $this->Dot2LongIP($ipaddress);
        //find location according to ip number
        $getLocationFromIpNo = $this->apis->getIp2Location($ipno);
        if ($getLocationFromIpNo) {
            $latitude = $getLocationFromIpNo[0]['latitude'];
            $longitude = $getLocationFromIpNo[0]['longitude'];
            $country = $getLocationFromIpNo[0]['country_name'];

            $getLocation = $this->apis->getLastLocation($latitude, $longitude, $email);
            if (!$getLocation) {
                //saving location into database
                $location = array('latitude' => $latitude, 'longitude' => $longitude);

                $this->apis->saveLocation($location, $email, $country);
            }
        }
    }

    /**
     * @input: Ipaddress
     * @description: Converts ipaddress to ip number
     * @output: Ip number
     */
    function Dot2LongIP($Ipaddress) {
        if ($Ipaddress == "") {
            return 0;
        } else {
            $ips = explode(".", $Ipaddress);
            //print_r($ips);
            return ($ips[3] + $ips[2] * 256 + $ips[1] * 256 * 256 + $ips[0] * 256 * 256 * 256);
        }
    }

    /**
     * @input: Array
     * @description: Check array is associative or not
     * @output: true/false
     */
    function isAssociative($array) {
        return (bool) count(array_filter(array_keys($array), 'is_string'));
    }

    /**
     * @input: Array having code (numeric) and result (string) as 1st and 2nd elements
     * @description: send success and failure response
     * @output: Echoes response which gets returned to the Client (Android App) through the REST API
     */
    function sendJsonResponse($code) {
              
        $this->jsonResponseString['code'] = $code[0];
        $this->jsonResponseString['result'] = $code[1];

        if ($this->debug == "true") {
            $responseData = array("data" => $this->jsonResponseString);
            $activity = array('activity' => 'sending response', 'data' => json_encode($responseData), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);
            $response = json_encode($responseData, JSON_UNESCAPED_SLASHES);

            echo $response;
        } else if ($this->debug == "false") {
            $message = array("appid" => $this->appId, "data" => $this->jsonResponseString);
            $message = json_encode($message, JSON_UNESCAPED_SLASHES);
            $signature = $this->doCalculateHmacSignature($message, $this->appSecrete);
            header("x-pingoo:" . $signature);
            $responseData = array("appid" => $this->appId, "data" => $this->jsonResponseString);
            $responseData = json_encode($responseData, JSON_UNESCAPED_SLASHES);
            $response = base64_encode($responseData);

            echo $response;
        } else {
            $responseData = array("appid" => $this->appId, "debug" => $this->debug, "data" => $this->jsonResponseString);
            $response = json_encode($responseData, JSON_UNESCAPED_SLASHES);

            echo $response;
        }
    }

    /**
     * Simple function to replicate PHP 5 behaviour
     */
    function microtime_float() {
        list($usec, $sec) = explode(" ", microtime());
        return ((float) $usec + (float) $sec);
    }


    /**
     * @description: Function to send New User notification email to Admin
     * @param : User details object and flags array
     * @return : None
     */
    function sendNewUserEmail($userResult) {
        log_message('info', __METHOD__);

        $id = $userResult[0]['user_id'];
        $name = $userResult[0]['name'];
        $email = $userResult[0]['user_email'];
        $device_id = $userResult[0]['device_id'];
        $phone_number = $userResult[0]['phone_number'];
        $install_source = $userResult[0]['install_source'];
        $account_email = $userResult[0]['account_email'];
        $existing_flags = explode(",", $userResult[0]['existing_flags']);
        $src1 = "com.google.android";
        $src2 = "com.android.vending";

        log_message('info', "Flags: " . $existing_flags[0] . $existing_flags[1] .
            $existing_flags[2] . $existing_flags[3]);

        if ($userResult[0]['existing_flags'] == "Yes,Yes,Yes,Yes")
            $subject = "Existing User Re-installed Around";
        else {
            if ($existing_flags[3] == "No")
                $subject = "New User Joined Around";
            else
                $subject = "User Installed Around - Check further details";
        }

        $message = $name . " with phone number " . $phone_number
            . " and email " . $email . " joined Around !!! <br/><br/>";

        $message .= "<p>Notes:</p>";

        if (strstr($install_source, $src1) || strstr($install_source, $src2))
            $message = $message . "Install Source: Google" . "<br/>";
        else
            $message = $message . "Install Source: " . $install_source . "<br/>";

        $message = $message . "Playstore Email <b>" . $account_email . "</b> existed: " .
            $existing_flags[3] . "<br/>";

        $message = $message . "Phone number <b>" . $phone_number . "</b> existed: " .
            $existing_flags[1] . "<br/>";

        $message = $message . "Device ID <b>" . $device_id . "</b> existed: " .
            $existing_flags[0] . "<br/>";

        $message = $message . "Phone number & Dev Id combination existed:" .
            $existing_flags[2] . "<br/>";

        $this->sendMail($subject, $message, false);
    }

    function getservice($services) {
        $service_id = $this->apis->getservice_id($services);
        print_r($service_id);
    }

    function sendBookingMails($user, $booking, $service_name) {
        log_message('info', __METHOD__);

        //User details
        $name = $user['name'];
       // $user_email = $user['user_email'];
        $phone_number = $user['phone_number'];
//        log_message('info', "Name: " . $name  . ", Phone: " . $phone_number);

        //Booking details
       // $service_id = $booking['service_id'];

        $booking_id = $booking['booking_id'];
        $booking_date = $booking['booking_date'];
        $booking_time = $booking['booking_timeslot'];
        $booking_comments = $booking['booking_remarks'];
        $units_saved = $booking['quantity'];
        $booking_address = $booking['booking_address'];
        $booking_pincode = $booking['booking_pincode'];
        $discount = $booking['discount_amount'];
        $amount_due = $booking['amount_due'];

//        log_message('info', print_r($booking, TRUE));

        //TEMP: Need to use template for sending email to user
        $user_email = "anuj@247around.com, booking@247around.com";

        $subject = "Booking confirmation from 247Around Mobile App";

        $message = "Dear $name ($phone_number),<br/><br/>Thank you for allowing us to assist you. Please note down your booking details:<br/>";
        $message .= "Booking ID: " . $booking_id . "<br/>";
        $message .= "Appliance: " . $service_name . "<br/>";
        $message .= "Booking Date: " . $booking_date . ", Time: " . $booking_time . "<br/>";
        $message .= "Booking comments: " . $booking_comments . "<br/>";
        $message .= "Number of Appliances: " . $units_saved . "<br/>";
        $message .= "Booking address / pincode: " . $booking_address . " / " . $booking_pincode . "<br/>";
        $message .= "Discount: " . $discount . "<br/>";
        $message .= "<br/>Total amount due: Rs. " . $amount_due . "<br/>";

//        log_message('info', "Booking message: " . $message);

        $this->sendBookingMailToUser($user_email, $subject, $message, "", FALSE);
    }

    function sendCancellationMails($user, $booking) {
        log_message('info', __METHOD__);

        //User details
        $name = $user['name'];
        $user_email = $user['user_email'];
        $phone_number = $user['phone_number'];
        log_message('info', "Name: " . $name . ", Email: " . $user_email . ", Phone: " . $phone_number);

        //Booking details
        $service_id = $booking['service_id'];
        $services = $this->apis->getServiceById($service_id);
        $service_name = $services[0]['services'];

        $booking_id = $booking['booking_id'];
        $booking_date = $booking['booking_date'];
        $booking_time = $booking['booking_timeslot'];
        $units_saved = 1;
        $booking_address = $booking['booking_address'];
        $booking_pincode = $booking['booking_pincode'];
        $amount_due = $booking['amount_due'];
        $cancellation_reason = $booking['cancellation_reason'];

        log_message('info', print_r($booking, TRUE));

        //TEMP: Need to use template for sending email to user
        $user_email = DEVELOPER_EMAIL.', booking@247around.com';

        $subject = "Booking Cancellation from 247Around";

        $message = "Dear $name ($phone_number),<br/><br/>Booking with below details stands cancelled as per your request:<br/>";
        $message .= "Booking ID: " . $booking_id . "<br/>";
        $message .= "Appliance: " . $service_name . "<br/>";
        $message .= "Booking Date: " . $booking_date . ", Time: " . $booking_time . "<br/>";
        $message .= "Number of Appliances: " . $units_saved . "<br/>";
        $message .= "Booking address / pincode: " . $booking_address . " / " . $booking_pincode . "<br/>";
        $message .= "Total amount due: Rs. " . $amount_due . "<br/>";

        $message .= "<br/>Cancellation reason " . $cancellation_reason . "<br/>";

        log_message('info', "Booking message: " . $message);

        $this->sendBookingMailToUser($user_email, $subject, $message, "", FALSE);
    }

    function sendRescheduleMails($user, $booking) {
        log_message('info', __METHOD__);

        //User details
        $name = $user['name'];
        $user_email = $user['user_email'];
        $phone_number = $user['phone_number'];
        log_message('info', "Name: " . $name . ", Email: " . $user_email . ", Phone: " . $phone_number);

        //Booking details
        $service_id = $booking['service_id'];
        $services = $this->apis->getServiceById($service_id);
        $service_name = $services[0]['services'];

        $booking_id = $booking['booking_id'];
        $booking_date = $booking['booking_date'];
        $booking_time = $booking['booking_timeslot'];
        $units_saved = $booking['quantity'];
        $booking_address = $booking['booking_address'];
        $booking_pincode = $booking['booking_pincode'];
        $amount_due = $booking['amount_due'];

        log_message('info', print_r($booking, TRUE));

        //TEMP: Need to use template for sending email to user
        $user_email = DEVELOPER_EMAIL.', booking@247around.com';

        $subject = "Booking Rescheduling from 247Around";

        $message = "Dear $name ($phone_number),<br/><br/>Booking with below details stands rescheduled as per your request:<br/>";
        $message .= "Booking ID: " . $booking_id . "<br/>";
        $message .= "Appliance: " . $service_name . "<br/>";
        $message .= "New Booking Date: " . $booking_date . ", New Time: " . $booking_time . "<br/>";
        $message .= "Number of Appliances: " . $units_saved . "<br/>";
        $message .= "Booking address / pincode: " . $booking_address . " / " . $booking_pincode . "<br/>";
        $message .= "Total amount due: Rs. " . $amount_due . "<br/>";

        log_message('info', "Booking message: " . $message);

        $this->sendBookingMailToUser($user_email, $subject, $message, "", FALSE);
       
        $this->notify->insert_state_change($booking_id, _247AROUND_RESCHEDULED, _247AROUND_PENDING, "Booking Rescheduled By Customer From App", 
               _247AROUND_DEFAULT_AGENT, "247Around", ACTOR_RESCHEDULED_BY_CUSTOMER,RESCHEDULED_BY_CUSTOMER_NEXT_ACTION,_247AROUND);
    }
    
    /**
     * @input: void
     *
     * @description: This function gets called through the Exotel Missed call App Passthru Applet.
     * That applet makes a call to the URL:
     *      https://aroundhomzapp.com/pass_through_android_app
     * Through the $route['pass-through-android-app'] = 'api/pass_through_android_app'; mechanism defined in routes.php,
     * call reaches to this function below which fetches information passed while making a call to
     * this URL and stores all details in the boloaaka.passthru_misscall_log table (function
     * apis->insertPassthruCall($callDetails)).
     * This table is checked again and again in processUserVerificationCode() to see if valid entry
     * is there or not. Once the entry is found, it is parsed and appropriate code is returned.
     *
     * After saving call details, it marks the calling no as Verified in DB only if call was made
     * to app verification no 30017601 and set 200 OK in header.
     *
     * @output: None
     */
    public function pass_through_android_app() {
        //log_message('info', "Entering: " . __METHOD__);
        if($this->input->post()){
            $callDetails = $this->input->post();
        }
        else{
            $activity = array('activity' => 'process exotel request', 'data' => json_encode($_GET), 'time' => $this->microtime_float());
            $this->apis->logTable($activity);

            //Refer: http://support.exotel.in/support/solutions/articles/48283-working-with-passthru-applet
            $callDetails['callSid'] = (isset($_GET['CallSid'])) ? $_GET['CallSid'] : null;
            $callDetails['from_number'] = (isset($_GET['From'])) ? $_GET['From'] : null;
            $callDetails['To'] = (isset($_GET['To'])) ? $_GET['To'] : null;
            $callDetails['Direction'] = (isset($_GET['Direction'])) ? $_GET['Direction'] : null;
            $callDetails['DialCallDuration'] = (isset($_GET['DialCallDuration'])) ? $_GET['DialCallDuration'] : null;
            $callDetails['StartTime'] = (isset($_GET['StartTime'])) ? $_GET['StartTime'] : null;
            $callDetails['EndTime'] = (isset($_GET['EndTime'])) ? $_GET['EndTime'] : null;
            $callDetails['CallType'] = (isset($_GET['CallType'])) ? $_GET['CallType'] : null;
            $callDetails['DialWhomNumber'] = (isset($_GET['DialWhomNumber'])) ? $_GET['DialWhomNumber'] : null;
            $callDetails['digits'] = (isset($_GET['digits'])) ? $_GET['digits'] : null;
            $callDetails['create_date'] = null;
        }

        //var_dump($apiDetails);
        //insert in database
        $this->apis->insertPassthruCall($callDetails);

        //fetches only the 10 digits of the mobile no without the country code
        $num = substr($callDetails['from_number'], '-10');
        //var_dump($num);

    //User could give missed call on 01139585684 to verify the App

    if ($callDetails['To'] == ANDROID_APP_MISSED_CALLED_NUMBER || $callDetails['To'] == ANDROID_APP_MISSED_CALLED_NUMBER_KNOWLARITY) {
        //verify user phone no first
        $this->apis->verifyUserNumber($num);
            
        //Adding details in Log File
        log_message('info', __FUNCTION__ . ' Missed call given by customer from 247AROUND App - Number: ' . $num);
    }

        $this->output->set_header("HTTP/1.1 200 OK");
    }
    
   

    
    function getEngineerHomeScreen(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("engineer_id" => 1, "service_center_id" => 1);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"])) {
            $select = "count(booking_details.booking_id) as bookings";
            $slot_select = 'booking_details.booking_id, booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type, booking_details.booking_remarks,'
                    . 'booking_pincode, booking_primary_contact_no, booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, booking_details.service_id';
            $missed_bookings_count = $this->getMissedBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            $tommorow_bookings_count = $this->getTommorowBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            $morning_slot_bookings = $this->getTodaysSlotBookingList($slot_select, TIMESLOT_10AM_TO_1PM, $requestData["service_center_id"], $requestData["engineer_id"]);
            $noon_slot_bookings = $this->getTodaysSlotBookingList($slot_select, TIMESLOT_1PM_TO_4PM, $requestData["service_center_id"], $requestData["engineer_id"]);
            $evening_slot_bookings = $this->getTodaysSlotBookingList($slot_select, TIMESLOT_4PM_TO_7PM, $requestData["service_center_id"], $requestData["engineer_id"]);
            
            $response['missedBookingsCount'] = $missed_bookings_count[0]['bookings'];
            $response['tomorrowBookingsCount'] = $tommorow_bookings_count[0]['bookings'];
            $response['todayMorningBooking'] = $morning_slot_bookings;
            $response['todayAfternoonBooking'] = $noon_slot_bookings;
            $response['todayEveningBooking'] = $evening_slot_bookings;
            
            log_message("info", __METHOD__ . "Bookings Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0022', 'Booking ID Not Found'));
        }
    }
    
    function getMissedBookingList($select, $service_center_id, $engineer_id){
            $missed_where = array(
                        "assigned_vendor_id" => $service_center_id,
                        "assigned_engineer_id" => $engineer_id,
                        "engineer_booking_action.internal_status != '"._247AROUND_CANCELLED."'" => NULL,
                        "(booking_details.current_status = '"._247AROUND_PENDING."' OR booking_details.current_status = '"._247AROUND_RESCHEDULED."')" => NULL
                    );
            $missed_slots = $this->apis->getMissedBookingSlots();
            if($missed_slots){
                if(count($missed_slots) == "1"){
                    $missed_where["(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) > 0) OR  ( (DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) = 0) AND booking_timeslot = '".$missed_slots[0]."')"] = NULL;
                }
                if(count($missed_slots) == "2"){
                    $missed_where["(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) > 0) OR  ( (DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) = 0) AND (booking_timeslot = '".$missed_slots[0]."' OR booking_timeslot = '".$missed_slots[1]."'))"] = NULL;
                }
            }
            else{
                $missed_where["(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) > 0)"] = NULL;
            }
            
            $missed_bookings = $this->engineer_model->get_engineer_booking_details($select, $missed_where, true, true, true, false, false);
            return $missed_bookings;
    }
    
    function getTommorowBookingList($select, $service_center_id, $engineer_id){
        log_message("info", __METHOD__. " Entering..");
        $where = array(
                    "assigned_vendor_id" => $service_center_id,
                    "assigned_engineer_id" => $engineer_id,
                    "engineer_booking_action.internal_status != '"._247AROUND_CANCELLED."'" => NULL,
                    "(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) = -1)" => NULL,
                    "(booking_details.current_status = '"._247AROUND_PENDING."' OR booking_details.current_status = '"._247AROUND_RESCHEDULED."')" => NULL
                );
        $tommorow_bookings = $this->engineer_model->get_engineer_booking_details($select, $where, true, true, true, false, false);
        return $tommorow_bookings;
    }
    
    function getTodaysSlotBookingList($select, $slot, $service_center_id, $engineer_id){
        log_message("info", __METHOD__. " Entering..");
        $where = array(
                    "assigned_vendor_id" => $service_center_id,
                    "assigned_engineer_id" => $engineer_id,
                    "booking_timeslot" => $slot,
                    "engineer_booking_action.internal_status != '"._247AROUND_CANCELLED."'" => NULL,
                    "(DATEDIFF(CURRENT_TIMESTAMP , STR_TO_DATE(booking_date, '%d-%m-%Y')) = 0)" => NULL,
                    "(booking_details.current_status = '"._247AROUND_PENDING."' OR booking_details.current_status = '"._247AROUND_RESCHEDULED."')" => NULL
                );
        $bookings = $this->engineer_model->get_engineer_booking_details($select, $where, true, true, true, false, false);
        return $bookings;
    }
    
    function getMissedBookings(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("engineer_id" => 1, "service_center_id" => 1);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"])) {
            $select = "booking_details.booking_id, booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type, booking_details.booking_remarks,"
                    . "booking_pincode, booking_primary_contact_no, booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, booking_details.service_id";
            $response['missedBooking'] = $this->getMissedBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            log_message("info", __METHOD__ . "Missed Bookings Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0023', 'Engineer ID or Service Center Id not found'));
        }
    }
    
    function getTommorowBookings(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("engineer_id" => 1, "service_center_id" => 1);
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"])) {
            $select = "booking_details.booking_id, booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type, booking_details.booking_remarks, "
                    . "booking_pincode, booking_primary_contact_no, booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, booking_details.service_id";
            $response['tomorrowBooking'] = $this->getTommorowBookingList($select, $requestData["service_center_id"], $requestData["engineer_id"]);
            log_message("info", __METHOD__ . "Tommorow Bookings Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0024', 'Engineer ID or Service Center Id not found'));
        }
    }
    
    function getEngineerBookingsByStatus(){ 
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("engineer_id" => 1, "service_center_id" => 1, "booking_status" => "Completed");
        if (!empty($requestData["engineer_id"]) && !empty($requestData["service_center_id"]) && !empty($requestData["booking_status"])) {
            if($requestData["booking_status"] == _247AROUND_CANCELLED || $requestData["booking_status"] == _247AROUND_COMPLETED){
                $select = "booking_details.booking_id, booking_details.booking_date, users.name, booking_details.booking_address, booking_details.state, booking_unit_details.appliance_brand, services.services, booking_details.request_type,"
                    . "booking_pincode, booking_primary_contact_no, booking_timeslot, booking_unit_details.appliance_category, booking_unit_details.appliance_category, booking_unit_details.appliance_capacity, booking_details.amount_due, booking_details.partner_id, booking_details.service_id";
            
                $where = array(
                    "assigned_vendor_id" => $requestData["service_center_id"],
                    "assigned_engineer_id" => $requestData["engineer_id"],
                );

                if($requestData["booking_status"] == _247AROUND_CANCELLED){
                    $where["engineer_booking_action.internal_status = '"._247AROUND_CANCELLED."'"] = NULL;
                }
                else{
                    $where["engineer_booking_action.internal_status = '"._247AROUND_COMPLETED."'"] = NULL;
                }
                $response['cancelledBookings'] = $this->engineer_model->get_engineer_booking_details($select, $where, true, true, true, false, false);

                log_message("info", __METHOD__ . "Bookings Found Successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Incorrect Booking Status");
                $this->sendJsonResponse(array('0025', 'Incorrect Booking Status'));
            }
        }
        else{
            log_message("info", __METHOD__ . " Engineer ID Not Found - " . $requestData["engineer_id"]." or Service Center Id not found - ".$requestData["service_center_id"]);
            $this->sendJsonResponse(array('0026', 'Engineer ID Not Found or Service Center Id or Booking Status Not found'));
        }
    }
    
    function getTechSupport(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("booking_id" => "PB-16565919051532");
        if (!empty($requestData["booking_id"])) {
            $tech_support = $this->apis->techSupportNumberForEngineer($requestData["booking_id"]);
            if(!empty($tech_support)){
                $response = $tech_support[0];
                log_message("info", __METHOD__ . "Tech Support Numbers Founded Successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Booking Id not found".$requestData["booking_id"]);
            $this->sendJsonResponse(array('0027', 'Support Details not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found".$requestData["booking_id"]);
            $this->sendJsonResponse(array('0028', 'Booking id not found'));
        }
    }
    
    function getEngineerHeplingDocuments(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $pdf_docs = array();
        $video_docs = array();
        $other_docs = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("booking_id" => "SP-2502017111426");
        if (!empty($requestData["booking_id"])) {
            $documets =  $this->service_centers_model->get_collateral_for_service_center_bookings($requestData["booking_id"]);
            $i = 0;
            foreach ($documets as $key => $value) {
                if($value['document_type'] == "pdf"){
                    $pdf['document_type'] = $value['document_type'];
                    $pdf['document_description'] = $value['document_description'];
                    $pdf['file'] = S3_WEBSITE_URL."vendor-partner-docs/".$value['file'];
                    array_push($pdf_docs, $pdf);
                }
                else if($value['document_type'] == "video"){
                    $video['document_type'] = $value['document_type'];
                    $video['document_description'] = $value['document_description'];
                    $video['file'] = S3_WEBSITE_URL."vendor-partner-docs/".$value['file'];
                    array_push($video_docs, $video);
                }
                else{
                    $others['document_type'] = $value['document_type'];
                    $others['document_description'] = $value['document_description'];
                    $others['file'] = S3_WEBSITE_URL."vendor-partner-docs/".$value['file'];
                    array_push($other_docs, $others);
                }
                $i++;
            }
            
            $response['pdf'] = $pdf_docs;
            $response['video'] = $video_docs;
            $response['others'] = $other_docs;
            
            log_message("info", __METHOD__ . "Helping Documents Found Successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Booking Id not found - ".$requestData["booking_id"]);
            $this->sendJsonResponse(array('0029', 'Booking Id not found'));
        }
    }
    
    function getEngineerProfile(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("engineer_id" => "1");
        if (!empty($requestData["engineer_id"])) {
            $eng_profile =  $this->engineer_model->engineer_profile_data($requestData['engineer_id']);
            if(!empty($eng_profile)){
                $response = $eng_profile[0];
                log_message("info", __METHOD__ . "Enngineer Profile Found Successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Engineer Profile not found - ".$requestData["engineer_id"]);
                $this->sendJsonResponse(array('0030', 'Engineer Profile not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Engineer id not found - ".$requestData["engineer_id"]);
            $this->sendJsonResponse(array('0031', 'Engineer Id not found'));
        }
    }
    
    function getEngineerSparePartOrder(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("partner_id" => "1", "service_id" => "1");
        if (!empty($requestData["partner_id"]) && !empty($requestData["service_id"])) {
            $where = array('entity_id' => $requestData['partner_id'], 'entity_type' => _247AROUND_PARTNER_STRING, 'service_id' => $requestData['service_id'], 'active' => 1);
            $model_detail = $this->inventory_model->get_inventory_mapped_model_numbers('appliance_model_details.id,appliance_model_details.model_number',$where);
            if(!empty($model_detail)){
                $response['sparePartsOrder']['modelNumberList'] = $model_detail;
            }
            else{
                $parts_type_details = $this->inventory_model->get_inventory_parts_type_details('inventory_parts_type.part_type', array('service_id' => $requestData['service_id']), FALSE);
                $response['sparePartsOrder']['partTypeList'] = $parts_type_details;
            }
            log_message("info", __METHOD__ . "Model Number or Part Type found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Partner Id not found - ".$requestData["partner_id"]." OR Service Id not found ".$requestData["service_id"]);
            $this->sendJsonResponse(array('0032', 'Partner Id or Service Id not found'));
        }
    }
    
    function getPartTypeOnModelNumber(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("model_number_id" => "157");
        if(!empty($requestData["model_number_id"])) {
            $response['partTypeList'] = $this->inventory_model->get_inventory_model_mapping_data('inventory_master_list.type as part_type', array('model_number_id' => $requestData["model_number_id"]));
            log_message("info", __METHOD__ . "Part Type found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Model Number Id not found - ".$requestData["model_number_id"]);
            $this->sendJsonResponse(array('0033', 'Model Number Id not found'));
        }
    }
    
    function getSparePartName(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("part_type"=> "Main Board", "partner_id"=>"247010", "service_id" => "46");
        if(!empty($requestData["part_type"]) && !empty($requestData["partner_id"]) && !empty($requestData["service_id"])) {
            $where = array();
            if (!empty($requestData["model_number_id"])) {
                $where['model_number_id'] = $requestData["model_number_id"];
            }

            if (!empty($requestData["part_type"])) {
                $where['type'] = $requestData["part_type"];
            }

            $where['inventory_master_list.service_id'] = $requestData['service_id'];
            $where['inventory_master_list.entity_id'] = $requestData['partner_id'];
            $where['inventory_master_list.entity_type'] = _247AROUND_PARTNER_STRING;;
            $select = "inventory_master_list.part_name, inventory_master_list.inventory_id, inventory_model_mapping.max_quantity, inventory_master_list.part_number, CAST((price + (price*gst_rate/100) + (price*oow_around_margin/100) + (price*oow_vendor_margin/100)) as decimal(10,2)) as amount";
            $response = $this->inventory_model->get_inventory_model_mapping_data($select, $where);
            log_message("info", __METHOD__ . "Spare Part Name found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
            
        }
        else{
            log_message("info", __METHOD__ . "Part Type not found - ".$requestData["part_type"]." or Partner Id not found - ".$requestData["partner_id"]." or Service Id not found -".$requestData["service_id"]);
            $this->sendJsonResponse(array('0034', 'Part Type or Partner Id or Service Id not found'));
        }
    }
    
    function processSubmitSparePartsOrder(){ 
        log_message("info", __METHOD__. " Entering..");
        $postData = json_decode($this->jsonRequestData['qsh'], true);
        $requestData = json_decode($postData['submitSparePartsOrder'], true);
        $requestData["call_from_api"] = TRUE;
        $validation = $this->validateSparePartsOrderRequest($requestData);
        if($validation['status']){ 
            foreach ($requestData['part'] as $key => $value){
                //upload defective front part pic
                if($value["defective_front_parts"]){
                    $defective_part_pic = "Defective_Parts_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($value["defective_front_parts"], $defective_part_pic, "misc-images");
                    $requestData['part'][$key]['defective_parts'] = $defective_part_pic;
                }
                
                //upload defective back part pick
                if($value["defective_back_parts"]){
                    $defective_back_part_pic = "Defective_Parts_".date("YmdHis").".png";
                    $this->miscelleneous->generate_image($value["defective_back_parts"], $defective_back_part_pic, "misc-images");
                    $requestData['part'][$key]['defective_back_parts_pic'] = $defective_back_part_pic;
                }
            }
        
        
            if($requestData['serial_number_pic_exist']){
                $serial_number_pic = "serial_number_pic_".date("YmdHis").".png";
                $this->miscelleneous->generate_image($requestData['serial_number_pic_exist'], $serial_number_pic, "misc-images");
                $requestData['serial_number_pic'] = $serial_number_pic;
            }

            if($requestData['invoice_number_pic_exist']){
                $invoice_pic = "invoice_".$requestData['booking_id']."_".date("YmdHis").".png";
                $this->miscelleneous->generate_image($requestData['invoice_number_pic_exist'], $invoice_pic, "misc-images");
                $requestData['invoice_pic'] = $invoice_pic;
            }
        
            //Call curl for updating spare parts using code from where service center ask for spare parts
            $url = base_url()."employee/service_centers/update_spare_parts"; 
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_HEADER, false);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($requestData));
            $curl_response = curl_exec($ch);
            curl_close($ch);
            $response = json_decode($curl_response);
            if($response->status){
                log_message("info", __METHOD__ . "Part  Updated successfully");
                $this->jsonResponseString['response'] = $response->message;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Part Not Updated Error - ".$response->message);
                $this->sendJsonResponse(array('0035', $response->message));
            }
        }
        else{
            log_message("info", __METHOD__ . "Request validation failed ".$validation['message']);
            $this->sendJsonResponse(array('0036', $validation['message']));
        }
    }
    
    function validateSparePartsOrderRequest($requestData){
        $response = array();
        $response['status'] = false;
        if(!isset($requestData['booking_id'])){
            $response['message'] = "Booking id not found!";
        }
        else if(!isset($requestData['amount_due'])){
            $response['message'] = "Amount Due not found";
        }
        else if(!isset($requestData['partner_id'])){
            $response['message'] = "Partner Id not found";
        }
        else if(!isset($requestData['price_tags'])){
            $response['message'] = "Request Type not found";
        }
        else if(!isset($requestData['partner_flag'])){
            $response['message'] = "Partner Flag not found";
        }
        else if(!isset($requestData['spare_shipped'])){
            $response['message'] = "Shipped Spare not found";
        }
        else if(!isset($requestData['reason'])){
            $response['message'] = "Spare Remarks not found";
        }
        else if(!isset($requestData['days'])){
            $response['message'] = "Days not found";
        }
        else if(!isset($requestData['model_number_id'])){
            $response['message'] = "Model Number Id not found";
        }
        else if(!isset($requestData['model_number'])){
            $response['message'] = "Model Number not found";
        }
        else if(!isset($requestData['dop'])){
            $response['message'] = "Date of purchase not found";
        }
        else if(!isset($requestData['serial_number'])){
            $response['message'] = "Serial Number not found";
        }
        else if(!isset($requestData['service_center_id'])){
            $response['message'] = "Service Center Id not found";
        }
        else if(!isset($requestData['part'])){
            $response['message'] = "Parts Array not found";
        }
        else if(isset($requestData['part'])){
           
            $check = true;
            $missing_key = "";
            $keys = array("part_warranty_status", "parts_type", "parts_name", "requested_inventory_id", "quantity");
            foreach($requestData['part'] as $parts){
                foreach ($keys as $key){
                    if (!array_key_exists($key, $parts)){ 
                        $check = false;
                        $missing_key = "Part array key missing - ".$key;
                    }
                }
            }
            if($check){
                $response['status'] = true;
                $response['message'] = "success";
            }
            else{
                $response['message'] = $missing_key;
            }
        }
        else{
            $response['status'] = true;
            $response['message'] = "success";
        }
        
        return $response;
    }
    
     function getSymptomCompleteBooking(){ 
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $requestData = array("booking_id" => "PV-16565919062733", "service_id" => 28, "partner_id" => 236, "request_type" => 'Installation & Demo');
        if(!empty($requestData["booking_id"]) && !empty($requestData["service_id"]) && !empty($requestData["partner_id"]) && !empty($requestData["request_type"])){
            $response['booking_symptom'] = $this->booking_model->getBookingSymptom($requestData["booking_id"]);
            $price_tags = str_replace('(Free)', '', $requestData["request_type"]);
            $price_tags1 = str_replace('(Paid)', '', $price_tags);
            $where = array(
                'symptom.service_id' => $requestData["service_id"], 
                'symptom.active' => 1, 
                'symptom.partner_id' => $requestData["partner_id"]
            );
            $where_in = array(
                'request_type.service_category' => $price_tags1
            );
            $response['symptoms'] = $this->booking_request_model->get_booking_request_symptom('symptom.id, symptom', $where, $where_in);
            if(count($response['symptoms']) <= 0) {
                $response['symptoms'][0] = array('id' => 0, 'symptom' => 'Default');
            }
            
            $defect_where = array(
                'symptom_id' => $response['booking_symptom'][0]['symptom_id_booking_creation_time'],
                'partner_id' => $requestData["partner_id"]
            );
            $response['defect'] = $this->booking_request_model->get_defect_of_symptom('defect_id,defect', $defect_where);
            if(count($response['defect']) <= 0) {
                $response['defect'][0] = array('defect_id' => 0, 'defect' => 'Default');
            }
            
            if(!empty($response['symptoms']) || !empty($response['defect'])){
                log_message("info", __METHOD__ . "Symptoms or Defects found successfully successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Symptom or Defects not found");
                $this->sendJsonResponse(array('0037', 'Symptom not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Service Id - ".$requestData["service_id"]." or Partner Id - ".$requestData["partner_id"]." or Request Type - ".$requestData["request_type"]." not found");
            $this->sendJsonResponse(array('0037', 'Booking Id or Service Id or Partner Id or Request Type not found'));
        }
    }
    
    function getDefectCompleteBooking(){ 
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $requestData = array("technical_problem" => "1");
        if(!empty($requestData["technical_problem"])){
            $response = $this->booking_request_model->get_defect_of_symptom('defect_id,defect', array('symptom_id' => $requestData['technical_problem']));
            if(count($response)<=0) {
                array_push($response, array('defect_id' => 0, 'defect' => 'Default'));
            }
            if(!empty($response)){
                log_message("info", __METHOD__ . "Defects found successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Defects not found");
                $this->sendJsonResponse(array('0038', 'Defects not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . " ");
            $this->sendJsonResponse(array('0039', 'Technical Problem not found'));
        }
    }
    
    function getSolutionCompleteBooking(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        $requestData = array("technical_symptom" => "1", "technical_defect" => "1");
        if(!empty($requestData["technical_symptom"]) && !empty($requestData["technical_defect"])){
            $response = $this->booking_request_model->get_solution_of_symptom('solution_id,technical_solution', array('symptom_id' => $requestData["technical_symptom"], 'defect_id' => $requestData["technical_defect"]));
            if(count($response)<=0) {
                array_push($response, array('solution_id' => 0, 'technical_solution' => 'Default'));
            }
            if(!empty($response)){
                log_message("info", __METHOD__ . "Solution found successfully");
                $this->jsonResponseString['response'] = $response;
                $this->sendJsonResponse(array('0000', 'success'));
            }
            else{
                log_message("info", __METHOD__ . "Solution not found");
                $this->sendJsonResponse(array('0040', 'Solution not found'));
            }
        }
        else{
            log_message("info", __METHOD__ . "Technical Problem or Defect not found");
            $this->sendJsonResponse(array('0041', 'Technical Problem or Defect not found'));
        }
    }
    
    function getBookingProductDetails(){
        log_message("info", __METHOD__. " Entering..");
        $response = array();
        $bookng_unit_details = array();
        $requestData = json_decode($this->jsonRequestData['qsh'], true);
        //$requestData = array("booking_id" => "PV-16565919070335", "brand"=>"TSeries", "partner_id" => 247073, "service_id"=> 46, "service_center_id" => 1);
        if(!empty($requestData["booking_id"]) && !empty($requestData["brand"]) && !empty($requestData["partner_id"]) && !empty($requestData["service_id"])){
            $source = $this->partner_model->getpartner_details('bookings_sources.source, partner_type', array('bookings_sources.partner_id' => $requestData['partner_id']));
            $where = array(
                "partner_appliance_details.partner_id" => $requestData["partner_id"],
                'partner_appliance_details.service_id' => $requestData["service_id"], 
                'partner_appliance_details.brand' => $requestData["brand"], 
                'appliance_model_details.active'=> 1, 
                "NULLIF(model, '') IS NOT NULL" => NULL);
        
            $response['model_data'] = $this->partner_model->get_model_number("appliance_model_details.id, appliance_model_details.model_number", $where);
            $unit_details = $this->booking_model->getunit_details($requestData["booking_id"]);
            array_push($bookng_unit_details, $unit_details[0]);
            $response['prices'] = array();
            $price_tags = array();
            foreach ($bookng_unit_details as $key1 => $b) {

                if ($source[0]['partner_type'] == OEM) {
                    $prices = $this->booking_model->getPricesForCategoryCapacity($requestData['service_id'], $bookng_unit_details[$key1]['category'], $bookng_unit_details[$key1]['capacity'], $requestData['partner_id'], $b['brand']);
                } 
                //If partner type is not OEM then check is brand white list for partner if brand is white listed then use brands if not then 
                else {
                    $isWbrand = "";
                    $whiteListBrand = $this->partner_model->get_partner_blocklist_brand(array("partner_id" => $requestData['partner_id'], "brand" => $b['brand'],"service_id" => $requestData['service_id'], "whitelist" => 1), "*");
                    if(!empty($whiteListBrand)){
                        $isWbrand = $b['brand'];
                    }
                    $prices = $this->booking_model->getPricesForCategoryCapacity($requestData['service_id'], $bookng_unit_details[$key1]['category'], $bookng_unit_details[$key1]['capacity'], $requestData['partner_id'], $isWbrand);
                }

                $broken = 0;
                foreach ($b['quantity'] as $key2 => $u) {
                    $price_tags1 = str_replace('(Free)', '', $u['price_tags']);
                    $price_tags2 = str_replace('(Paid)', '', $price_tags1);
                    array_push($price_tags, $price_tags2);
                    $pid = $this->miscelleneous->search_for_pice_tag_key($u['price_tags'], $prices);
                    

                    $unitWhere = array("engineer_booking_action.booking_id" => $requestData['booking_id'],
                        "engineer_booking_action.unit_details_id" => $u['unit_id'], "service_center_id" => $requestData['service_center_id']);
                    $en = $this->engineer_model->getengineer_action_data("engineer_booking_action.*", $unitWhere);
                    if (!empty($en)) {
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_serial_number'] = $en[0]['serial_number'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_serial_number_pic'] = $en[0]['serial_number_pic'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_is_broken'] = $en[0]['is_broken'];
                        $bookng_unit_details[$key1]['quantity'][$key2]['en_internal_status'] = $en[0]['internal_status'];
                        if ($en[0]['is_broken'] == 1) {
                            $broken = 1;
                        }
                    }
                
                    // remove array key, if price tag exist into price array
                    unset($prices[$pid]);

                }
                array_push($response['prices'], $prices);
                $bookng_unit_details[$key1]['is_broken'] = $broken;
                $bookng_unit_details[$key1]['dop'] = $broken;
            }
            
            $response['booking_unit_details'] = $bookng_unit_details[0];
            log_message("info", __METHOD__ . "Product details found successfully");
            $this->jsonResponseString['response'] = $response;
            $this->sendJsonResponse(array('0000', 'success'));
        }
        else{
            log_message("info", __METHOD__ . "Booking Id or Brand or Partner Id or Service Id not found");
            $this->sendJsonResponse(array('0042', 'Booking Id or Brand or Partner Id or Service Id not found'));
        }
    }
}
